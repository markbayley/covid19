{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map2.js","components/LineGraph.js","components/GlobalMenu.js","components/DoughnutCases.js","components/DoughnutDeaths.js","components/HorizontalChart.js","components/Menu.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","width","position","background","zIndex","opacity","display","flexDirection","justifyContent","alignItems","boxShadow","id","className","color","marginBottom","href","marginTop","Button","top","onClick","variant","Row","Col","border","backgroundColor","lineHeight","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","region","cont","mapboxElRef","useRef","fetcher","url","a","fetch","then","r","json","data","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","mort","useSWR","useEffect","renderListings","features","empty","document","createElement","listingEl","innerHTML","length","feature","label","itemLink","appendChild","addEventListener","currentFeature","this","flyTo","center","zoom","createPopUp","activeItem","getElementsByClassName","classList","remove","parentNode","add","popup","setLngLat","setText","addTo","filterEl","value","textContent","setFilter","normalize","string","trim","toLowerCase","popUps","Map","container","current","pitch","console","log","response","rsp","forEach","countryInfo","lat","long","flag","title","todayCases","toFixed","todayDeaths","critical","todayRecovered","active","activePerOneMillion","deathsPerOneMillion","casesPerOneMillion","tests","testsPerOneMillion","mortality","activity","positive","el","population","elcases","el3","Marker","getCanvas","cursor","Popup","offset","closeButton","closeOnClick","closeOnMove","setHTML","getElementById","essential","i","points","pulsingDot","Uint8Array","size","onAdd","canvas","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","getImageData","triggerRepaint","on","cases1","cases2","cases3","cases4","colors","addImage","pixelRatio","addSource","addLayer","source","layout","cluster","clusterRadius","clusterProperties","deaths1","deaths2","deaths3","deaths4","deaths5","cases5","mr1","mr2","mr3","mr4","mr5","filter","paint","markers","markersOnScreen","createDonutChart","props","offsets","counts","counts2","total","count","push","total2","count2","fontSize","r0","round","w","fontSize2","r2","w2","html","donutSegment","toLocaleString","firstChild","start","end","a0","a1","x0","cos","y0","sin","x1","y1","largeArc","isSourceLoaded","newMarkers","querySourceFeatures","coords","cluster_id","marker","element","updateMarkers","e","slice","getLayer","link","onclick","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","geocoder","MapboxGeocoder","addControl","GeolocateControl","fitBoundsOptions","maxZoom","queryRenderedFeatures","layers","uniqueFeatures","comparatorProperty","uniqueIds","Set","has","getUniqueFeatures","colorCase","statusCase","classText","colorDeath","statusDeath","classText2","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","provinceHTML","mortalityRate","HTML","Boolean","ctx","Chart","options","elements","borderColor","borderWidth","responsive","maintainAspectRatio","legend","text","animation","animateScale","animateRotate","tooltips","cornerRadius","displayColors","bodyFontSize","labels","usePointStyle","callbacks","item","datasets","datasetIndex","target","filtered","name","code","includes","ref","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","y","LineGraph","useState","setData","fetchData","scales","yAxes","xAxes","Menu","state","global","countries","continents","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","globalRecovered","continentNames","casesMillion","deathsMillion","activeMillion","criticalMillion","recoveredMillion","testsMillion","todayGlobalCases","todayGlobalDeaths","casesPerContinent","selectedContinent","deathsPerContinent","activePerContinent","criticalPerContinent","testsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","recoveredGlobal","continentCountries","continent","selectedCountry","substring","criticalPerOneMillion","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","content","overflowY","duration","separator","decimals","yPadding","xPadding","xAlign","ticks","stepSize","stack","Badge","maxWidth","colorsPie","TabsMenu","tab","setTab","TabItem","icon","onItemClicked","error","isActive","key","animationIn","animationOut","isVisible","Container","xs","placeholder","DoughnutCases","DoughnutDeaths","critical1","critical2","critical3","critical4","critical5","HorizontalChart","countryNames","recoveredPerOneMillion","colorActivity","sort","b","continentCountrys","setSampleData","sorted1","setSorted1","sorted2","setSorted2","sorted3","setSorted3","sorted4","setSorted4","countryName","casesPerMil","testsPerMil","activePerMil","deathsPerMil","colorCasez","max","colorActiv","sortedData","evt","_model","hover","mode","intersect","fontColor","padding","left","bottom","open","recovered","sorted","maxName","maxActive","maxActiveName","maxTests","maxTestsName","maxCritical","maxCriticalName","maxDeaths","maxDeathsName","maxRecovered","maxRecoveredName","colorMortality","borderRadius","paddingLeft","stacked","initialState","App","globaldata","setGlobal","BASE_URL","result","fetchContinents","getGlobal","setContinents","getContinents","setCountries","res","String","fetchCountries","setState","setZoom","setCenter","toggle","GlobalMenu","handleZoom","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.09170b7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({\r\n  toggleAsia,\r\n  toggleEurope,\r\n  toggleOceania,\r\n  toggleNorthAmerica,\r\n  toggleSouthAmerica,\r\n  toggleAfrica,\r\n  toggleGlobal,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          right: \"0px\",\r\n          height: \"100vh\", //auto mobile\r\n          width: \"auto\",\r\n          position: \"absolute\",\r\n          background: \"#212529\",\r\n          zIndex: 1,\r\n          opacity: 0.95,\r\n          display: \"flex\",\r\n          flexDirection: \"column\", //row mobile\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          \r\n          // flexWrap: \"wrap\" //mobile\r\n          boxShadow: \"rgba(9, 30, 66, 0.25) 0px 4px 8px -2px, rgba(9, 30, 66, 0.08) 0px 0px 0px 1px\",\r\n        }}\r\n      >\r\n            <div id=\"\" className=\"legend\" style={{ color: \"grey\", marginBottom: \"0px\" }}>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n          >\r\n            COVID-19\r\n          </h5>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"10px\" }}\r\n          >\r\n            DATAMAP\r\n          </h5>\r\n        </div>\r\n               <Button\r\n               style={{position: \"absolute\", top: 7}}\r\n          className=\"mr-5 close button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5> <i className=\"fa fa-search\"></i></h5>\r\n        </Button>\r\n        {/* <Button\r\n               style={{position: \"absolute\", top: 10, left: 20}}\r\n          className=\" px-3 ml-5\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5> <i className=\"fa fa-star pt-2\"></i></h5>\r\n        </Button> */}\r\n        \r\n    \r\n        {/* <div id=\"\" className=\"\" style={{marginTop: '20px', zIndex: '2'}}>\r\n        <h5>Covid-19</h5>\r\n        <h6 >Data Map</h6>\r\n      </div> */}\r\n   \r\n     \r\n      \r\n        {/* <div id=\"state-legend\" className=\"legend pl-1 pr-2\" >\r\n      \r\n        \r\n          <div >\r\n         <span style={{ backgroundColor: \"#ff125e\", height: \"20px\", width: \"20px\"}} ></span>Extreme\r\n          </div>\r\n          <div>\r\n        <span style={{ backgroundColor: \"#e72585\", height: \"17px\", width: \"17px\" }}></span>Serious\r\n          </div>\r\n          <div>\r\n          <span style={{ backgroundColor: \"#ca32ad\", height: \"14px\", width: \"14px\" }}></span>Moderate\r\n          </div>\r\n          <div>\r\n          &nbsp;<span style={{ backgroundColor: \"#a13ed5\", height: \"11px\", width: \"11px\" }}></span>Limited\r\n          </div>\r\n          <div>\r\n            &nbsp;<span style={{ backgroundColor: \"#6a5dfc\", height: \"8px\", width: \"8px\" }}></span>Mild\r\n          </div>\r\n          <div >\r\n            <span style={{ backgroundColor: \"orange\" }} ></span>Active\r\n          </div>\r\n        </div> */}\r\n\r\n        <Row>\r\n          <Col className=\"box px-0 mx-0 mb-4\" >\r\n          <div id=\"\" className=\"legend py-0\" >\r\n            <div className=\"mb-2 mt-0\">Extreme</div>\r\n          <div >\r\n         <span style={{ border: \"3px solid #ff8300\", height: \"22px\", width: \"22px\", backgroundColor: \"#ff125e\"}} ></span>\r\n          </div>\r\n          <div>\r\n        <span style={{ backgroundColor: \"#e72585\", height: \"19px\", width: \"19px\" }}></span>\r\n          </div>\r\n          <div>\r\n          <span style={{ backgroundColor: \"#ca32ad\", height: \"16px\", width: \"16px\" }}></span>\r\n          </div>\r\n          <div>\r\n       <span style={{ backgroundColor: \"#a13ed5\", height: \"13px\", width: \"13px\" }}></span>\r\n          </div>\r\n          <div>\r\n         <span style={{ backgroundColor: \"#6a5dfc\", height: \"11px\", width: \"11px\" }}></span>\r\n          </div>\r\n          {/* <div >\r\n            <span style={{ backgroundColor: \"orange\" }} ></span>\r\n          </div> */}\r\n              <div className=\"mb-0 mt-1\">Mild</div>\r\n          </div>\r\n          </Col>\r\n  \r\n\r\n        </Row>\r\n\r\n        {/* <Button\r\n          className=\"button\"\r\n          id=\"Afghanistan\"\r\n          onClick={toggleAsia}\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Afghanistan</h6>\r\n        </Button> */}\r\n        <Button\r\n          className=\"button\"\r\n          id=\"asia\"\r\n          onClick={toggleAsia}\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Asia</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleEurope}\r\n          id=\"europe\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Europe</h6>\r\n        </Button>\r\n     \r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleNorthAmerica}\r\n          id=\"northamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>North America</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleAfrica}\r\n          // size=\"md\"\r\n          id=\"africa\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Africa</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleSouthAmerica}\r\n          id=\"southamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>South America</h6>\r\n        </Button>\r\n\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleOceania}\r\n          id=\"oceania\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Oceania</h6>\r\n        </Button>\r\n        {/* <Button\r\n          className=\"button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Global</h6>\r\n        </Button> */}\r\n     \r\n\r\n        <div id=\"\" className=\"\" style={{ color: \"grey\", lineHeight: 1 }}>\r\n          {/* <p href=\"https://inblockdesign.com\" >   <i className=\"fa fa-info-circle\"></i> Inblock</p> */}\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"65px\", marginBottom: \"0px\" }}\r\n            className=\"pb-0\"\r\n          >\r\n            Inblock\r\n          </p>\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n            className=\"pt-0\"\r\n          >\r\n            Design <i className=\"fa fa-info-circle\"></i>{\" \"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport \"./Map2.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\nimport { Button } from 'react-bootstrap';\r\nimport { Chart } from \"react-chartjs-2\";\r\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\r\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nconst Map2 = ({ region, cont }) => {\r\n  const mapboxElRef = useRef(null);\r\n\r\n  const fetcher = async (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude,\r\n            ],\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n            mort: point.stats.deaths / point.stats.confirmed,\r\n          },\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  //   const [data1, setCountries] = useState([])\r\n\r\n  //   useEffect(() => {\r\n  //     const getCountriesData = async () => {\r\n  //       await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n  //         .then(response => response.json())\r\n  //         .then(data => {\r\n  //           const data1 = data.map((point, index) => ({\r\n  //             type: \"Feature\",\r\n  //             geometry: {\r\n  //                 type: \"Point\",\r\n  //                 coordinates: [\r\n  //                     point.countryInfo.long,\r\n  //                     point.countryInfo.lat\r\n  //                 ],\r\n  //               },\r\n  //               properties: {\r\n  //                 id: index,\r\n  //                 country: point.country,\r\n  //                 cases: point.casesPerOneMillion,\r\n  //                 deaths: point.deathsPerOneMillion,\r\n  //                 active: point.activePerOneMillion,\r\n  //                 mort: point.deathsPerOneMillion / point.casesPerOneMillion\r\n  //               },\r\n  //           }));\r\n  //           setCountries(data1);\r\n  //         });\r\n  //     };\r\n  //     getCountriesData();\r\n  //   }, []);\r\n  // ;\r\n\r\n  //   console.log(data1)\r\n\r\n  //   const data1 = countries.map((itm, index) => ({\r\n  //     ...data.find((item) => item.properties.country === itm.country && item),\r\n  //     ...itm,\r\n  //   }));\r\n\r\n  //   const continentCountries = countries.filter(\r\n  //     (country) => country.continent === region\r\n  //   );\r\n\r\n  //   const countryNames = continentCountries.map(\r\n  //     (selectedCountry) => selectedCountry.country\r\n  //   );\r\n\r\n  //   const data2 = data1.filter((item) => countryNames.includes(item.country));\r\n\r\n  //   console.log(data2, \"data2\");\r\n  //   console.log(data1, \"data1\");\r\n  //   console.log(data, \"data\");\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [131, -28],\r\n        zoom: 3.5,\r\n        pitch: 10,\r\n        // projection: 'globe'\r\n      });\r\n\r\n      // Update map on first load\r\n      updateMap();\r\n\r\n      // updateMap function - Updates data and marks cases on the map\r\n\r\n      function updateMap() {\r\n        // Update data\r\n        console.log(\"Updating Map with realtime data\");\r\n\r\n        // Fetch data from API\r\n        fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n          .then((response) => response.json())\r\n          .then((rsp) => {\r\n            // Displaying data\r\n            console.log(rsp);\r\n            // const data = rsp;\r\n\r\n            // map.addSource(\"ok\", {\r\n            //   type: \"geojson\",\r\n            //   data: {\r\n            //     type: \"FeatureCollection\",\r\n            //     features: data,\r\n            //   },\r\n            // });\r\n\r\n\r\n            // map.addLayer({\r\n            //   id: \"ok\",\r\n            //   source: \"ok\",\r\n            //     filter: [\"!=\", \"cluster\", true],\r\n            //   type: \"circle\",\r\n            //   paint: {\r\n            //     \"circle-color\": \"red\",\r\n            //     \"circle-opacity\": 1,\r\n            //     \"circle-radius\": 50,\r\n            //   },\r\n            // });\r\n\r\n\r\n            rsp.forEach((country) => {\r\n              // Latitude\r\n              const latitude = country.countryInfo.lat;\r\n              // Longitude\r\n              const longitude = country.countryInfo.long;\r\n              // Confirmed cases today\r\n              const flag = country.countryInfo.flag;\r\n              const title = country.country;\r\n\r\n              const todayCases = (country.todayCases).toFixed(0);\r\n              const todayDeaths = (country.todayDeaths).toFixed(0);\r\n              const todayRecovered = (country.todayRecovered).toFixed(0);\r\n              const critical = (country.critical).toFixed(0);\r\n\r\n              const active = (country.activePerOneMillion / 1000).toFixed(2);\r\n              const deaths = (country.deathsPerOneMillion / 1000).toFixed(2);\r\n              const cases = (country.casesPerOneMillion / 1000).toFixed(2);\r\n              const tests = (country.testsPerOneMillion / 1000).toFixed(0);\r\n              // const tests = (country.tests / 1000).toFixed(0);\r\n              const mortality = (deaths/cases * 100).toFixed(2);\r\n              const activity = (active/cases * 100).toFixed(2);\r\n              const positive = (cases/tests * 100).toFixed(2);\r\n\r\n              const population = (country.population/1000000).toFixed(1);\r\n             \r\n              const el = document.createElement(\"div\");\r\n              const elcases = document.createElement(\"div\");\r\n              const el3 = document.createElement(\"div\");\r\n              // el.innerHTML = `i`;\r\n\r\n        \r\n              active < .05\r\n              ? (el.className = \"\") \r\n              : active < 50\r\n              ? (el.className = \"active1\")              \r\n              : active < 100\r\n              ? (el.className = \"active2\")\r\n              : active < 150\r\n              ? (el.className = \"active3\")\r\n              : active < 350\r\n              ? (el.className = \"active4\")\r\n              : (el.className = \"active5\");\r\n\r\n              cases <= 50 \r\n              ? (elcases.className = \"cases1\")              \r\n              : cases <= 100\r\n              ? (elcases.className = \"cases2\")\r\n              : cases <= 150\r\n              ? (elcases.className = \"cases3\")\r\n              : cases <= 350\r\n              ? (elcases.className = \"cases4\")\r\n              : (elcases.className = \"cases5\");\r\n         \r\n                tests < 500\r\n                ? (el3.className = \"tests1\")              \r\n                : tests < 1000\r\n                ? (el3.className = \"tests2\")\r\n                : tests < 1500\r\n                ? (el3.className = \"tests3\")\r\n                : tests < 3500\r\n                ? (el3.className = \"tests4\")\r\n                : (el3.className = \"tests5\");\r\n\r\n             \r\n                new mapboxgl.Marker(el3)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n\r\n           \r\n\r\n                new mapboxgl.Marker(el)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n\r\n            \r\n                new mapboxgl.Marker(elcases)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n             \r\n\r\n\r\n                // el.addEventListener(\"mouseenter\", function () {\r\n                //   // Change the cursor style as a UI indicator.\r\n                //   map.getCanvas().style.cursor = \"pointer\";\r\n                // })\r\n\r\n                // el3.addEventListener(\"mouseenter\", function () {\r\n                //   // Change the cursor style as a UI indicator.\r\n                //   map.getCanvas().style.cursor = \"pointer\";\r\n                // })\r\n\r\n              elcases.addEventListener(\"mouseenter\", function () {\r\n                // Change the cursor style as a UI indicator.\r\n                map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            \r\n\r\n            \r\n                 // \r\n                //  <button class=\"close\"><h6>x</h6></button>\r\n                // <p>Population: <b>${numberWithCommas(population)}m </b>&nbsp;</p>\r\n                // <p>Recovered: <b>+${numberWithCommas(todayRecovered)}</b>&nbsp;</p>\r\n                const popup = \"mouseenter\" === true ? \"\" : new mapboxgl.Popup({\r\n                  offset: 5,\r\n                  closeButton: true,\r\n                  closeOnClick: true,\r\n                  closeOnMove: false,\r\n                  className: \"popup2 animated fadeInUp\",\r\n                })\r\n             \r\n                  popup.setLngLat([longitude, latitude])\r\n                  .setHTML(\r\n                    `<div class=\"right\">\r\n                  \r\n                    <p><img src=${flag} alt=\"flag\" /></p>\r\n                    <p><b>${title}</b>&nbsp;<span>Today</span>&nbsp;&nbsp;</p>\r\n                  \r\n                    <p class=\"cases\">Cases: <b>+${numberWithCommas(todayCases)}</b>&nbsp;</p>\r\n                    <p class=\"deaths\">Deaths: <b>+${numberWithCommas(todayDeaths)}</b>&nbsp;</p>\r\n                 \r\n                    <p>Critical: <b>${numberWithCommas(critical)} </b>&nbsp;&nbsp;</p>\r\n\r\n                    <p class=\"cases\">Cases/1k: <b>${numberWithCommas(cases)}</b>&nbsp;</p>\r\n                    <p class=\"deaths\">Deaths/1k: <b>${numberWithCommas(deaths)}</b>&nbsp;</p>\r\n                    <p class=\"active\">Active/1k: <b>${numberWithCommas(active)}</b>&nbsp;</p>\r\n                    <p class=\"tests\">Tests/1k: <b >${numberWithCommas(tests)}</b>&nbsp;&nbsp;&nbsp;</p>\r\n                    \r\n                 \r\n                    <p class=\"deaths\">Mortality: <b>${numberWithCommas(mortality)}%</b>&nbsp;</p>\r\n                    <p class=\"active\">Active: <b>${numberWithCommas(activity)}%</b>&nbsp;</p>\r\n                    <p class=\"tests\">Positive: <b>${numberWithCommas(positive)}%</b>&nbsp;</p>\r\n\r\n                  \r\n                \r\n             \r\n                    </div>`\r\n                  )\r\n                  .addTo(map);\r\n            \r\n\r\n                elcases.addEventListener(\"click\", function () {\r\n                  map.getCanvas().style.cursor = \"\";\r\n                  popup.remove();\r\n                });\r\n              });\r\n            });\r\n          });\r\n      }\r\n\r\n\r\n\r\n      // // Updates data after 20000ms\r\n      // let interval = 20000;\r\n\r\n      // // Calls updateMap function after set intervals\r\n      // setInterval(updateMap, interval);\r\n\r\n      document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3,\r\n          center: [3.2, 1.8],\r\n          essential: true,\r\n        });\r\n      });\r\n      document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 4,\r\n          center: [6, 47],\r\n          essential: true,\r\n        });\r\n      });\r\n      document\r\n        .getElementById(\"northamerica\")\r\n        .addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [-120, 35],\r\n            essential: true,\r\n          });\r\n        });\r\n      document\r\n        .getElementById(\"southamerica\")\r\n        .addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.5,\r\n            center: [-74, -4],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n      document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3.1,\r\n          center: [100, 17],\r\n          essential: true,\r\n        });\r\n      });\r\n      document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3.7,\r\n          center: [131, -28],\r\n          essential: true,\r\n        });\r\n      });\r\n\r\n      /**\r\n       * Assign a unique id to each store. You'll use this `id`\r\n       * later to associate each point on the map with a listing\r\n       * in the sidebar.\r\n       */\r\n\r\n      data.forEach((point, i) => {\r\n        point.properties.id = i;\r\n      });\r\n\r\n      // Holds visible airport features for filtering\r\n      let points = [];\r\n\r\n      // Create a popup, but don't add it to the map yet.\r\n      const popup = new mapboxgl.Popup({\r\n        closeButton: false,\r\n        className: \"popup animated fadeIn\",\r\n      });\r\n\r\n      const filterEl = document.getElementById(\"feature-filter\");\r\n      const listingEl = document.getElementById(\"feature-listing\");\r\n\r\n      function renderListings(features) {\r\n        const empty = document.createElement(\"p\");\r\n        // Clear any existing listings\r\n        listingEl.innerHTML = `<div style={{color: \"grey\"}}>SELECT A LOCATION</div>`;\r\n        if (features.length) {\r\n          for (const feature of features) {\r\n            const label =\r\n              feature.properties.province !== \"null\"\r\n                ? `${feature.properties.province}, ${feature.properties.country}. (hover to view more...)`\r\n                : `${feature.properties.country}. (hover to view more...)`;\r\n\r\n            // itemLink.href = feature.properties.wikipedia;\r\n            // itemLink.target = '_blank';\r\n\r\n            /* Add the link to the individual listing created above. */\r\n            const itemLink = listingEl.appendChild(document.createElement(\"a\"));\r\n            itemLink.href = \"#\";\r\n            itemLink.className = \"item\";\r\n            itemLink.id = `link-${feature.properties.id}`;\r\n            itemLink.innerHTML =\r\n              feature.properties.province !== \"null\"\r\n                ? `<b>${feature.properties.province}, ${feature.properties.country}.</b> View details...</b>`\r\n                : `<b>${feature.properties.country}.</b> View details...`;\r\n\r\n            // itemLink.textContent = label;\r\n            /* Add dbetails to the individual listing. */\r\n            // const details = listingEl.appendChild(\r\n            //   document.createElement(\"div\")\r\n            // );\r\n            //  details.innerHTML = `${point.properties.province}`;\r\n            // if (feature.properties.province) {\r\n            //   details.innerHTML += `${feature.properties.country}`;\r\n            // }\r\n\r\n            itemLink.addEventListener(\"click\", function () {\r\n              for (const feature of features) {\r\n                if (this.id === `link-${feature.properties.id}`) {\r\n                  flyToStore(feature);\r\n                  createPopUp(feature);\r\n                }\r\n              }\r\n              const activeItem = document.getElementsByClassName(\"active\");\r\n              if (activeItem[0]) {\r\n                activeItem[0].classList.remove(\"active\");\r\n              }\r\n              this.parentNode.classList.add(\"active\");\r\n            });\r\n\r\n            function flyToStore(currentFeature) {\r\n              map.flyTo({\r\n                center: currentFeature.geometry.coordinates,\r\n                zoom: 5,\r\n              });\r\n            }\r\n\r\n            itemLink.addEventListener(\"mouseover\", () => {\r\n              // Highlight corresponding feature on the map\r\n              popup\r\n                .setLngLat(feature.geometry.coordinates)\r\n                .setText(label)\r\n                .addTo(map);\r\n            });\r\n            listingEl.appendChild(itemLink);\r\n          }\r\n\r\n          // Show the filter input\r\n          filterEl.parentNode.style.display = \"block\";\r\n        } else if (features.length === 0 && filterEl.value !== \"\") {\r\n          empty.textContent = \"No results found\";\r\n          listingEl.appendChild(empty);\r\n        } else {\r\n          empty.textContent = \"Drag the map to populate results\";\r\n          listingEl.appendChild(empty);\r\n\r\n          // Hide the filter input\r\n          filterEl.parentNode.style.display = \"none\";\r\n\r\n          // remove features filter\r\n          map.setFilter(\"Cases\", [\"has\", \"id\"]);\r\n        }\r\n      }\r\n\r\n      function normalize(string) {\r\n        return string.trim().toLowerCase();\r\n      }\r\n\r\n      // Because features come from tiled vector data,\r\n      // feature geometries may be split\r\n      // or duplicated across tile boundaries.\r\n      // As a result, features may appear\r\n      // multiple times in query results.\r\n      function getUniqueFeatures(features, comparatorProperty) {\r\n        const uniqueIds = new Set();\r\n        const uniqueFeatures = [];\r\n        for (const feature of features) {\r\n          const id = feature.properties[comparatorProperty];\r\n          if (!uniqueIds.has(id)) {\r\n            uniqueIds.add(id);\r\n            uniqueFeatures.push(feature);\r\n          }\r\n        }\r\n        return uniqueFeatures;\r\n      }\r\n\r\n      //DOT\r\n      const size = 150;\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement(\"canvas\");\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext(\"2d\");\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(160, 160, 160, ${0.4 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(0, 0, this.width, this.height).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        },\r\n      };\r\n\r\n      map.on(\"load\", () => {\r\n        /**\r\n         * This is where your '.addLayer()' used to be, instead\r\n         * add only the source without styling a layer\r\n         */\r\n        const cases1 = [\"<\", [\"get\", \"cases\"], 50000];\r\n        const cases2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 50000],\r\n          [\"<\", [\"get\", \"cases\"], 100000],\r\n        ];\r\n        const cases3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 100000],\r\n          [\"<\", [\"get\", \"cases\"], 400000],\r\n        ]; //800,000\r\n        const cases4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 400000],\r\n          [\"<\", [\"get\", \"cases\"], 1600000],\r\n        ]; //32,000,000\r\n        const cases5 = [\">=\", [\"get\", \"cases\"], 1600000];\r\n\r\n        const deaths1 = [\"<\", [\"get\", \"deaths\"], 2500];\r\n        const deaths2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 2500],\r\n          [\"<\", [\"get\", \"deaths\"], 5000],\r\n        ];\r\n        const deaths3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 5000],\r\n          [\"<\", [\"get\", \"deaths\"], 20000],\r\n        ]; //8,000\r\n        const deaths4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 20000],\r\n          [\"<\", [\"get\", \"deaths\"], 80000],\r\n        ]; // 175,000\r\n        const deaths5 = [\">=\", [\"get\", \"deaths\"], 80000];\r\n\r\n        const mr1 = [\"<\", [\"get\", \"mort\"], 0.003];\r\n        const mr2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.003],\r\n          [\"<\", [\"get\", \"mort\"], 0.005],\r\n        ];\r\n        const mr3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.005],\r\n          [\"<\", [\"get\", \"mort\"], 0.02],\r\n        ]; //.011 amr\r\n        const mr4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.02],\r\n          [\"<\", [\"get\", \"mort\"], 0.05],\r\n        ]; //.18\r\n        const mr5 = [\">=\", [\"get\", \"mort\"], 0.05];\r\n\r\n        const colors = [\"#6a5dfc\", \"#a13ed5\", \"#ca32ad\", \"#e72585\", \"#ff125e\"];\r\n        // const colors2 = [\"#ff7200\", \"#ff8300\",\"#ff9400\",\"#ffa400\", \"#ffb300\"];\r\n\r\n        //DOT\r\n        map.addImage(\"pulsing-dot\", pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource(\"dot-point\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n        });\r\n        map.addLayer({\r\n          id: \"layer-with-pulsing-dot\",\r\n          type: \"symbol\",\r\n          source: \"dot-point\",\r\n          layout: {\r\n            \"icon-image\": \"pulsing-dot\",\r\n          },\r\n        });\r\n\r\n        map.addSource(\"points\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n          cluster: true,\r\n          clusterRadius: 50,\r\n          clusterProperties: {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            deaths1: [\"+\", [\"case\", deaths1, 1, 0]],\r\n            deaths2: [\"+\", [\"case\", deaths2, 1, 0]],\r\n            deaths3: [\"+\", [\"case\", deaths3, 1, 0]],\r\n            deaths4: [\"+\", [\"case\", deaths4, 1, 0]],\r\n            deaths5: [\"+\", [\"case\", deaths5, 1, 0]],\r\n            cases1: [\"+\", [\"case\", cases1, 1, 0]],\r\n            cases2: [\"+\", [\"case\", cases2, 1, 0]],\r\n            cases3: [\"+\", [\"case\", cases3, 1, 0]],\r\n            cases4: [\"+\", [\"case\", cases4, 1, 0]],\r\n            cases5: [\"+\", [\"case\", cases5, 1, 0]],\r\n            mr1: [\"+\", [\"case\", mr1, 1, 0]],\r\n            mr2: [\"+\", [\"case\", mr2, 1, 0]],\r\n            mr3: [\"+\", [\"case\", mr3, 1, 0]],\r\n            mr4: [\"+\", [\"case\", mr4, 1, 0]],\r\n            mr5: [\"+\", [\"case\", mr5, 1, 0]],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"Mortality\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n\r\n          paint: {\r\n            \"circle-color\": \"grey\",\r\n            //    [\r\n            //     \"case\",\r\n            //     mr1,\r\n            //     colors[0],\r\n            //     mr2,\r\n            //     colors[1],\r\n            //     mr3,\r\n            //     colors[2],\r\n            //     mr4,\r\n            //     colors[3],\r\n            //     colors[4],\r\n            //   ],\r\n            \"circle-opacity\": 0.2,\r\n         \r\n            // 'circle-radius': 18,\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"mort\"],\r\n              0.0001,\r\n              10,\r\n              0.2,\r\n              50,\r\n            ],\r\n          },\r\n        });\r\n\r\n  \r\n\r\n        map.addLayer({\r\n          id: \"Deaths\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n          paint: {\r\n            // \"circle-color\": \r\n            \"circle-color\": \"black\",\r\n            //  [\r\n            //   \"case\",\r\n            //   deaths1,\r\n            //   colors[0],\r\n            //   deaths2,\r\n            //   colors[1],\r\n            //   deaths3,\r\n            //   colors[2],\r\n            //   deaths4,\r\n            //   colors[3],\r\n            //   colors[4],\r\n            // ],\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"deaths\"],\r\n              10,\r\n              5,\r\n              1000000,\r\n              36,\r\n            ],\r\n          },\r\n        });\r\n\r\n\r\n        map.addLayer({\r\n          id: \"Cases\",\r\n          source: \"points\",\r\n          //   filter: [\"!=\", \"cluster\", true],\r\n          type: \"circle\",\r\n          paint: {\r\n            \"circle-color\": [\r\n              \"case\",\r\n              cases1,\r\n              colors[0],\r\n              cases2,\r\n              colors[1],\r\n              cases3,\r\n              colors[2],\r\n              cases4,\r\n              colors[3],\r\n              colors[4],\r\n            ],\r\n            \"circle-opacity\": 0.25,\r\n            \r\n    \r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"cases\"],\r\n              1,\r\n              10,\r\n              10000000,\r\n              50,\r\n            ],\r\n          },\r\n        });\r\n\r\n     \r\n\r\n\r\n        //START DOUGHNUT\r\n\r\n        // map.addLayer({\r\n        //   id: \"clusters\",\r\n        //   type: \"symbol\",\r\n        //   source: \"points\",\r\n        //   filter: [\"!=\", \"cluster\", true],\r\n        //   layout: {\r\n        //     \"text-field\": [\r\n        //       \"number-format\",\r\n        //       [\"get\", \"points\"],\r\n        //       { \"min-fraction-digits\": 1, \"max-fraction-digits\": 1 },\r\n        //     ],\r\n        //     \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n        //     \"text-size\": 10,\r\n        //     visibility: \"visible\",\r\n        //   },\r\n        //   paint: {\r\n        //     \"text-color\": [\r\n        //       \"case\",\r\n        //       [\"<\", [\"get\", \"cases\"], 3],\r\n        //       \"black\",\r\n        //       \"white\",\r\n        //     ],\r\n        //   },\r\n        // });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures(\"points\");\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el,\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on(\"render\", () => {\r\n          if (!map.isSourceLoaded(\"points\")) return;\r\n          updateMarkers();\r\n        });\r\n\r\n        // code for creating an SVG donut chart from feature properties\r\n        function createDonutChart(props) {\r\n          const offsets = [];\r\n          const counts = [\r\n            props.deaths1,\r\n            props.deaths2,\r\n            props.deaths3,\r\n            props.deaths4,\r\n            props.deaths5,\r\n          ];\r\n          const counts2 = [\r\n            props.cases1,\r\n            props.cases2,\r\n            props.cases3,\r\n            props.cases4,\r\n            props.cases5,\r\n          ];\r\n\r\n          let total = 0;\r\n          for (const count of counts) {\r\n            offsets.push(total);\r\n            total += count;\r\n          }\r\n          let total2 = 0;\r\n          for (const count2 of counts2) {\r\n            offsets.push(total2);\r\n            total2 += count2;\r\n          }\r\n          const fontSize =\r\n            total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n          const r =\r\n            total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n          const r0 = Math.round(r * 0.6);\r\n          const w = r * 2;\r\n\r\n          const fontSize2 =\r\n            total2 >= 1000 ? 22 : total2 >= 100 ? 20 : total2 >= 10 ? 18 : 16;\r\n          const r2 =\r\n            total2 >= 1000 ? 50 : total2 >= 100 ? 32 : total2 >= 10 ? 24 : 18;\r\n          const r02 = Math.round(r2 * 0.6);\r\n          const w2 = r2 * 2;\r\n\r\n          let html = `<div>\r\n          <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n          let html2 = `<div>\r\n          <svg \"class=\"zoom\" width=\"${w2}\" height=\"${w2}\" viewbox=\"0 0 ${w2} ${w2}\" text-anchor=\"middle\" style=\"font: ${fontSize2}px ; display: \"block\"; >`;\r\n\r\n          for (let i = 0; i < counts.length; i++) {\r\n            html += donutSegment(\r\n              offsets[i] / total,\r\n              (offsets[i] + counts[i]) / total,\r\n              r,\r\n              r0,\r\n              colors[i]\r\n            );\r\n          }\r\n\r\n          for (let i = 0; i < counts2.length; i++) {\r\n            html += donutSegment(\r\n              offsets[i] / total2,\r\n              (offsets[i] + counts2[i]) / total2,\r\n              r,\r\n              r0,\r\n              colors[i]\r\n            );\r\n          }\r\n          html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n          <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n          ${total.toLocaleString()}\r\n          </text>\r\n          </svg>\r\n          </div>`;\r\n\r\n          const el = document.createElement(\"div\");\r\n          el.innerHTML = html;\r\n          return el.firstChild;\r\n        }\r\n\r\n        function donutSegment(start, end, r, r0, color) {\r\n          if (end - start === 1) end -= 0.00001;\r\n          const a0 = 2 * Math.PI * (start - 0.25);\r\n          const a1 = 2 * Math.PI * (end - 0.25);\r\n          const x0 = Math.cos(a0),\r\n            y0 = Math.sin(a0);\r\n          const x1 = Math.cos(a1),\r\n            y1 = Math.sin(a1);\r\n          const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n          // draw an SVG path\r\n          return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${\r\n            r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${\r\n            r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${\r\n            r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n        }\r\n\r\n        //END DOUGHNUT\r\n\r\n        // inspect a cluster on click\r\n        map.on(\"click\", \"Cases\", function (e) {\r\n          const coordinates = e.features[0].geometry.coordinates.slice();\r\n          map.flyTo({ center: coordinates, zoom: 8 });\r\n        });\r\n\r\n\r\n\r\n        //TOGGLE\r\n        // After the last frame rendered before the map enters an \"idle\" state.\r\n        map.on(\"idle\", () => {\r\n          // If these two layers were not added to the map, abort\r\n          if (\r\n            !map.getLayer(\"Cases\") ||\r\n            !map.getLayer(\"Deaths\") ||\r\n            !map.getLayer(\"Mortality\")\r\n          ) {\r\n            return;\r\n          }\r\n\r\n          // Enumerate ids of the layers.\r\n          const toggleableLayerIds = [\"Cases\", \"Deaths\", \"Mortality\"];\r\n\r\n          // Set up the corresponding toggle button for each layer.\r\n          for (const id of toggleableLayerIds) {\r\n            // Skip layers that already have a button set up.\r\n            if (document.getElementById(id)) {\r\n              continue;\r\n            }\r\n\r\n            // Create a link.\r\n            const link = document.createElement(\"a\");\r\n            link.id = id;\r\n            link.href = \"#\";\r\n            link.textContent = id;\r\n            link.className = \"active\";\r\n\r\n            // Show or hide layer when the toggle is clicked.\r\n            link.onclick = function (e) {\r\n              const clickedLayer = this.textContent;\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n\r\n              const visibility = map.getLayoutProperty(\r\n                clickedLayer,\r\n                \"visibility\"\r\n              );\r\n\r\n              // Toggle layer visibility by changing the layout object's visibility property.\r\n              if (visibility === \"visible\") {\r\n                map.setLayoutProperty(clickedLayer, \"visibility\", \"none\");\r\n                this.className = \"\";\r\n              } else {\r\n                this.className = \"active\";\r\n                map.setLayoutProperty(clickedLayer, \"visibility\", \"visible\");\r\n              }\r\n            };\r\n            const layers = document.getElementById(\"menu\");\r\n            layers.appendChild(link);\r\n          }\r\n        }); // map(idle) End\r\n\r\n        //Add navigation controls to the top right of the canvas\r\n        //   map.addControl(new mapboxgl.NavigationControl());\r\n\r\n        // Add navigation to center the map on your geo location\r\n        const geocoder = new MapboxGeocoder({\r\n          accessToken: mapboxgl.accessToken,\r\n          mapboxgl: mapboxgl,\r\n        });\r\n\r\n        document.getElementById(\"geocoder\").appendChild(geocoder.onAdd(map));\r\n\r\n        map.addControl(\r\n          new mapboxgl.GeolocateControl({\r\n            fitBoundsOptions: { maxZoom: 6 },\r\n          })\r\n        );\r\n\r\n        map.on(\"movestart\", () => {\r\n          // reset features filter as the map starts moving\r\n          map.setFilter(\"Cases\", [\"has\", \"id\"]);\r\n        });\r\n\r\n        map.on(\"moveend\", () => {\r\n          const features = map.queryRenderedFeatures({ layers: [\"Cases\"] });\r\n\r\n          if (features) {\r\n            const uniqueFeatures = getUniqueFeatures(features, \"id\");\r\n            // Populate features for the listing overlay.\r\n            renderListings(uniqueFeatures);\r\n\r\n            // Clear the input container\r\n            filterEl.value = \"\";\r\n\r\n            // Store the current features in sn `airports` variable to\r\n            // later use for filtering on `keyup`.\r\n            points = uniqueFeatures;\r\n            console.log(points, \"points\");\r\n          }\r\n        });\r\n\r\n        var i = 0;\r\n\r\n        map.on(\"mousemove\", \"Cases\", (e) => {\r\n          // Change the cursor style as a UI indicator.\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          // Populate the popup and set its coordinates based on the feature.\r\n          const feature = e.features[0];\r\n\r\n          const { cases, deaths, country, province } = e.features[0].properties;\r\n\r\n          const colorCase = [];\r\n          const statusCase = [];\r\n          const classText = [];\r\n          if (cases < 50000) {\r\n            colorCase.push(\"#6a5dfc\");\r\n            statusCase.push(\"Mild\");\r\n            classText.push(\"mild\");\r\n          }\r\n          if (cases >= 50000 && cases < 100000) {\r\n            colorCase.push(\"#a13ed5\");\r\n            statusCase.push(\"Limited\");\r\n            classText.push(\"limited\");\r\n          }\r\n          if (cases >= 100000 && cases < 400000) {\r\n            colorCase.push(\"#ca32ad\");\r\n            statusCase.push(\"Moderate\");\r\n            classText.push(\"moderate\");\r\n          }\r\n          if (cases >= 400000 && cases < 16000000) {\r\n            colorCase.push(\"#e72585\");\r\n            statusCase.push(\"Serious\");\r\n            classText.push(\"serious\");\r\n          }\r\n          if (cases >= 16000000) {\r\n            colorCase.push(\"#ff125e\");\r\n            statusCase.push(\"Extreme\");\r\n            classText.push(\"extreme\");\r\n            //   pink\r\n          }\r\n\r\n          const colorDeath = [];\r\n          const statusDeath = [];\r\n          const classText2 = [];\r\n          if (deaths < 2500) {\r\n            colorDeath.push(\"#6a5dfc\");\r\n            statusDeath.push(\"Mild\");\r\n            classText2.push(\"mild\");\r\n            //   blue\r\n          }\r\n          if (deaths >= 2500 && deaths < 5000) {\r\n            colorDeath.push(\"#a13ed5\");\r\n            statusDeath.push(\"Limited\");\r\n            classText2.push(\"limited\");\r\n          }\r\n          if (deaths >= 5000 && deaths < 20000) {\r\n            colorDeath.push(\"#ca32ad\");\r\n            statusDeath.push(\"Moderate\");\r\n            classText2.push(\"moderate\");\r\n          }\r\n          if (deaths >= 20000 && deaths < 80000) {\r\n            colorDeath.push(\"#e72585\");\r\n            statusDeath.push(\"Serious\");\r\n            classText2.push(\"serious\");\r\n          }\r\n          if (deaths >= 80000) {\r\n            colorDeath.push(\"#ff125e\");\r\n            statusDeath.push(\"Extreme\");\r\n            classText2.push(\"extreme\");\r\n            //   pink\r\n          }\r\n\r\n          //POPUP\r\n          const countryISO =\r\n            lookup.byCountry(feature.properties.country)?.iso2 ||\r\n            lookup.byInternet(feature.properties.country)?.iso2;\r\n          const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n          const provinceHTML =\r\n            feature.properties.province !== \"null\"\r\n              ? `<p>Province: <b>${feature.properties.province}</b></p>`\r\n              : \"\";\r\n          const mortalityRate = (\r\n            (feature.properties.deaths / feature.properties.cases) *\r\n            100\r\n          ).toFixed(2);\r\n          const countryFlagHTML = Boolean(countryISO)\r\n            ? `<img src=\"${countryFlag}\"></img>`\r\n            : \"\";\r\n\r\n          const HTML = ` \r\n        \r\n          <p>Country: <b>${country}</b></p>\r\n          ${provinceHTML}\r\n          <p>Cases: <b>${numberWithCommas(\r\n            cases\r\n          )}</b><span class=\"${classText}\">(${statusCase})</span></p>\r\n          <p>Deaths: <b>${numberWithCommas(\r\n            deaths\r\n          )}</b><span class=\"${classText2}\"}>(${statusDeath})</span></p>\r\n          <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n         \r\n          `;\r\n\r\n          popup\r\n            .setLngLat(feature.geometry.coordinates)\r\n            .setHTML(\r\n              '<canvas className=\"info\" id=\"foo' +\r\n                feature.properties.country +\r\n                '\"></canvas>' +\r\n                HTML\r\n            )\r\n            .addTo(map);\r\n\r\n          var ctx = document.getElementById(\"foo\" + country).getContext(\"2d\");\r\n\r\n          // document\r\n          // .getElementById(ctx)\r\n          // .addEventListener(\"click\", function () {\r\n          //   map.flyTo({\r\n          //     zoom: 3,\r\n          //     center: [3.2, 1.8],\r\n          //     essential: true,\r\n          //   });\r\n          // });\r\n\r\n          console.log(ctx);\r\n          var chart = new Chart(ctx, {\r\n            type: \"doughnut\",\r\n            options: {\r\n              elements: {\r\n                arc: {\r\n                  borderColor: \"#212529\",\r\n                  borderWidth: 1,\r\n                },\r\n              },\r\n\r\n              responsive: true,\r\n              maintainAspectRatio: true,\r\n              legend: {\r\n                display: false,\r\n                position: \"\",\r\n              },\r\n              title: {\r\n                display: false,\r\n                text: \"\",\r\n              },\r\n              animation: {\r\n                animateScale: true,\r\n                animateRotate: true,\r\n              },\r\n              tooltips: {\r\n                backgroundColor: \"#212529\",\r\n                borderColor: \"turquoise\",\r\n                borderWidth: 1,\r\n                cornerRadius: 2,\r\n                displayColors: true,\r\n                bodyFontSize: 12,\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n                callbacks: {\r\n                  label: function (item, data) {\r\n                    console.log(data.labels, item);\r\n                    return (\r\n                      data.datasets[item.datasetIndex].label +\r\n                      \": \" +\r\n                      data.labels[item.index] +\r\n                      \": \" +\r\n                      data.datasets[item.datasetIndex].data[item.index]\r\n                    );\r\n                  },\r\n                },\r\n              },\r\n            },\r\n            data: {\r\n              labels: [\"Cases\", \"Deaths\"],\r\n              datasets: [\r\n                {\r\n                  label: \"Distribution\",\r\n                  backgroundColor: [colorDeath, colorCase],\r\n                  borderColor: colorCase,\r\n                  // data: caseChart,\r\n                  // data: [12, 34, 16, 52, 13]\r\n                  data: [deaths * 2, cases],\r\n                },\r\n              ],\r\n            },\r\n          });\r\n          i++;\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"Cases\", () => {\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        filterEl.addEventListener(\"keyup\", (e) => {\r\n          const value = normalize(e.target.value);\r\n\r\n          // Filter visible features that match the input value.\r\n          const filtered = [];\r\n          for (const feature of points) {\r\n            const name = normalize(feature.properties.country);\r\n            const code = normalize(feature.properties.province);\r\n            if (name.includes(value) || code.includes(value)) {\r\n              filtered.push(feature);\r\n            }\r\n          }\r\n\r\n          // Populate the sidebar with filtered results\r\n          renderListings(filtered);\r\n\r\n          // Set the filter to populate features into the layer.\r\n          if (filtered.length) {\r\n            map.setFilter(\"Cases\", [\r\n              \"match\",\r\n              [\"get\", \"id\"],\r\n              filtered.map((feature) => {\r\n                return feature.properties.province;\r\n              }),\r\n              true,\r\n              false,\r\n            ]);\r\n          }\r\n        });\r\n\r\n        // Call this function on initialization\r\n        // passing an empty array to render an empty state\r\n        renderListings([]);\r\n      });\r\n\r\n      //Create a Mapbox GL JS `Popup`.\r\n\r\n      function createPopUp(currentFeature) {\r\n        const popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n        if (popUps[0]) popUps[0].remove();\r\n      }\r\n    }\r\n  }, [data]);\r\n  //useEffect End\r\n\r\n  return (\r\n    <div className=\"mapContainer\">\r\n      {/* <div className=\"sb\">\r\n      \r\n        \r\n      </div> */}\r\n\r\n\r\n      <div id=\"map\" className=\"mapBox map\" ref={mapboxElRef} />\r\n\r\n    </div>\r\n  );\r\n};\r\n//Map End\r\nexport default Map2;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=180\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  // console.log(data[178], 'DATA178')\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          width={300}\r\n          height={150}\r\n        //   options={options}\r\n\r\n        options={{\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"bottom\",\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  display: true,\r\n                  // stacked: true,\r\n                //   type: \"logarithmic\",\r\n                  display: false,\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  // display: false,\r\n                },\r\n              ],\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n            },\r\n          }}\r\n          data={{\r\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                borderColor: \"rgba(75,192,192,1)\",\r\n                // data: data,\r\n                data: [data[30], data[60], data[90], data[120], data[150], data[178]],\r\n              \r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default LineGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport TabsComponent from \"../misc/TabsComponent\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport CountUp from \"react-countup\";\r\nimport BarGraph from \"../misc/BarGraph\";\r\nimport LineGraph from \"./LineGraph\";\r\n\r\nconst Menu = ({\r\n  region,\r\n  index,\r\n  population,\r\n  global,\r\n  state,\r\n  tests,\r\n  countries,\r\n  continents,\r\n  handleClose,\r\n  populationGlobal,\r\n  testsG,\r\n  globalCases,\r\n  globalDeaths,\r\n  globalActive,\r\n  globalCritical,\r\n  globalTests,\r\n  globalRecovered,\r\n  continentNames,\r\n  casesMillion,\r\n  deathsMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  recoveredMillion,\r\n  testsMillion,\r\n  todayGlobalCases,\r\n  todayGlobalDeaths,\r\n}) => {\r\n  const casesPerContinent = casesMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const deathsPerContinent = deathsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const activePerContinent = activeMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const criticalPerContinent = criticalMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const testsPerContinent = testsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const recoveredPerContinent = recoveredMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  // console.log(casesPerContinent, \"casesPerContinent\");\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(3);\r\n  const activeGlobal = (globalActive / 1000).toFixed(2);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(4);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n  const recoveredGlobal = (globalRecovered / 1000).toFixed(1);\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(\r\n    (country) => country.continent === region\r\n  );\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries\r\n    .filter(\r\n      (country) => country.continent === region && country.population > 100000\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country.substring(0, 12));\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  // Create strata for classifting cases for doughnut charts\r\n  const cases1 = continents.filter(\r\n    (selectedContinent) => selectedContinent.casesPerOneMillion / 1000 < 50\r\n  );\r\n  const cases2 = continents.filter(\r\n    (selectedContinent) =>\r\n      selectedContinent.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedContinent.casesPerOneMillion / 1000 < 100\r\n  );\r\n  const cases3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const cases4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const cases5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Deaths\r\n  const deaths1 = continents.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 < 0.5\r\n  );\r\n  const deaths2 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 0.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1\r\n  );\r\n  const deaths3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1.5\r\n  );\r\n  const deaths4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 2.5\r\n  );\r\n  const deaths5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 > 2.5\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continents.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 25\r\n  );\r\n  const active5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 25\r\n  );\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) {\r\n      colorCases.push(\"#444e86\");\r\n    }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) {\r\n      colorCases.push(\"#955196\");\r\n    }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) {\r\n      colorCases.push(\"#ffa600\");\r\n    }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 300) {\r\n      colorCases.push(\"#ff6e54\");\r\n    }\r\n    if (casesPerContinent[i] >= 300) {\r\n      colorCases.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 2.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < 3) {\r\n      colorActive.push(\"#444e86\");\r\n    }\r\n    if (activePerOneMillion[i] >= 3 && activePerOneMillion[i] < 5) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activePerOneMillion[i] >= 5 && activePerOneMillion[i] < 8) {\r\n      colorActive.push(\"#ffa600\");\r\n    }\r\n    if (activePerOneMillion[i] >= 8 && activePerOneMillion[i] < 15) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activePerOneMillion[i] >= 15) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      backgroundcolor.push(\"#444e86\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      backgroundcolor.push(\"#955196\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      backgroundcolor.push(\"#ffa600\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      backgroundcolor.push(\"#ff6e54\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      backgroundcolor.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"Cases\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\" }} className=\"px-3\">\r\n            <Col\r\n              className=\"subtitle\"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n              }}\r\n            >\r\n              <Row className=\"mb-2\">\r\n                <Col className=\"box pt-2 mr-2\">\r\n                  <h1>\r\n                    {\" \"}\r\n                    <CountUp\r\n                      start={casesGlobal - 3}\r\n                      end={casesGlobal - 0}\r\n                      duration={0.3}\r\n                      separator=\",\"\r\n                      decimals={1}\r\n                    />\r\n                    {casesGlobal[0] / 1000 >= casesGlobal[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}{\" \"}\r\n                    {/* <h5 className=\"\">Cases/1k</h5> */}\r\n                  </h1>\r\n                </Col>\r\n\r\n                <Col className=\"\">\r\n                  <Row style={{}} className=\"box pt-1 \">\r\n                    {\" \"}\r\n                    <h3 className=\"\">{testsGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Tests/1k</h6>\r\n                  </Row>\r\n                  <Row style={{}} className=\"box mt-2 pt-1\">\r\n                    {\" \"}\r\n                    <h3>{activeGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Active/1k</h6>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <BarGraph /> */}\r\n              <Row className=\"box px-3\">\r\n                <div\r\n                  className=\"pt-1 pb-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Cases Per Continent\r\n                </div>\r\n\r\n                <Bar\r\n                  // pointStyle=\"star\"\r\n                  height={150}\r\n                  width={300}\r\n                  options={{\r\n                    legend: {\r\n                      display: true,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    //   scales:{\r\n                    //     xAxes:[{\r\n                    //        ticks:{\r\n                    //        display: false\r\n                    //       }\r\n                    //     }]\r\n                    // },\r\n\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          // ticks: {\r\n                          //   min: 0,\r\n                          //   max: 3,\r\n                          //   stepWidth: 2,\r\n                          //   stepSize: 2,\r\n                          // },\r\n                          ticks: {\r\n                            display: false,\r\n                          },\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          // type: \"logarithmic\",\r\n                          ticks: {\r\n                            // min: 0,\r\n                            // max: 3,\r\n                            // stepWidth: 100,\r\n                            stepSize: 1000,\r\n                          },\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: continentNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerContinent,\r\n                        backgroundColor: colorCases,\r\n                        stack: \"0\",\r\n                      },\r\n\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerContinent,\r\n                        backgroundColor: \"teal\",\r\n                        stack: \"0\",\r\n                      },\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerContinent,\r\n                        backgroundColor: \"orange\",\r\n                        stack: \"0\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col>\r\n                  {/* <Row className=\"box mb-2\">\r\n            <div\r\n                className=\"py-2 ml-4\"\r\n              >\r\n                Global Statistics\r\n              </div>\r\n              </Row> */}\r\n\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Active\r\n                      {((activeGlobal / casesGlobal) * 100).toFixed(2) <=\r\n                      2.5 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (activeMillion[index] / casesMillion[index]) * 100 >=\r\n                        4.5 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {((activeGlobal / casesGlobal) * 100).toFixed(2)}%\r\n                      </strong>\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Today\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        +\r\n                        {numberWithCommas(\r\n                          (todayGlobalCases / 1000).toFixed(0) + \"k\"\r\n                        )}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"subtitle mt-2\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Positive\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {numberWithCommas(\r\n                          ((casesGlobal / testsGlobal) * 100).toFixed(2) + \"%\"\r\n                        )}\r\n                      </strong>\r\n                      {/* <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            testsG,\r\n                          casesGlobal,\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut> */}\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Tests\r\n                      {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          POOR\r\n                        </Badge>\r\n                      ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          GOOD\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong className=\"\">\r\n                        {(testsG / populationGlobal).toFixed(2)}pp\r\n                        {/* <i className=\"fa fa-male\"></i> */}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n\r\n                <Col\r\n                  className=\"box ml-2 px-0\"\r\n                  style={{ color: \"#fff\", fontSize: \"14px\", maxWidth: \"50%\" }}\r\n                >\r\n                  {/* <div\r\n                className=\"pt-2 pb-4 ml-2\"\r\n              \r\n              >\r\n                Continent Analysis\r\n              </div> */}\r\n                  <Doughnut\r\n                    // width={200}\r\n                    height={250}\r\n                    data={{\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            cases1.length,\r\n                            cases2.length,\r\n                            cases3.length,\r\n                            cases4.length,\r\n                            cases5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Cases\",\r\n                          stack: \"0\",\r\n                        },\r\n                        {\r\n                          data: [\r\n                            active1.length,\r\n                            active2.length,\r\n                            active3.length,\r\n                            active4.length,\r\n                            active5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Active\",\r\n                          stack: \"0\",\r\n                        },\r\n                      ],\r\n\r\n                      labels: [\r\n                        \"Lowest\",\r\n                        \"Lower\",\r\n                        \"Average\",\r\n                        \"Higher\",\r\n                        \"Highest\",\r\n                      ],\r\n                    }}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          // borderWidth: 0.5,\r\n                          // borderColor: \"turquoise\",\r\n                          borderColor: \"#212529\",\r\n                          borderWidth: 1,\r\n                        },\r\n                      },\r\n                      responsive: true,\r\n                      maintainAspectRatio: true,\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                      title: {\r\n                        display: false,\r\n                        text: \"\",\r\n                      },\r\n                      animation: {\r\n                        animateScale: true,\r\n                        animateRotate: true,\r\n                      },\r\n                      tooltips: {\r\n                        backgroundColor: \"#212529\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        cornerRadius: 2,\r\n                        displayColors: true,\r\n                        bodyFontSize: 12,\r\n                        labels: {\r\n                          usePointStyle: true,\r\n                        },\r\n                        callbacks: {\r\n                          label: function (item, data) {\r\n                            console.log(data.labels, item);\r\n                            return (\r\n                              data.datasets[item.datasetIndex].label +\r\n                              \": \" +\r\n                              data.labels[item.index] +\r\n                              \": \" +\r\n                              data.datasets[item.datasetIndex].data[item.index]\r\n                            );\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  ></Doughnut>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box mt-2 px-0\">\r\n                {/* <Col className=\"box \" style={{maxWidth: \"50%\"}}> */}\r\n                <div\r\n                  className=\"py-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Cases Trend\r\n                </div>\r\n                {/* <LineGraph casesType={casesType} /> */}\r\n                {/* </Col> */}\r\n                {/* <Col className=\"box ml-2\" style={{maxWidth: \"50%\"}}>\r\n            </Col> */}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Deaths\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\" }} className=\"px-3\">\r\n            <Col\r\n              className=\"subtitle\"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n              }}\r\n            >\r\n              <Row className=\"mb-2\">\r\n                <Col className=\"box pt-2 mr-2\">\r\n                  <h1>\r\n                    {\" \"}\r\n                    <CountUp\r\n                      start={deathsGlobal - 3}\r\n                      end={deathsGlobal - 0}\r\n                      duration={0.3}\r\n                      separator=\",\"\r\n                      decimals={1}\r\n                    />\r\n                    {deathsGlobal[0] / 1000 >= deathsGlobal[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}{\" \"}\r\n                    <h5 className=\"\">Deaths/1k</h5>\r\n                  </h1>\r\n                </Col>\r\n\r\n                <Col className=\"\">\r\n                  <Row style={{}} className=\"box pt-1 \">\r\n                    {\" \"}\r\n                    <h3 className=\"\">{recoveredGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Recovered/1k</h6>\r\n                  </Row>\r\n                  <Row style={{}} className=\"box mt-2 pt-1\">\r\n                    {\" \"}\r\n                    <h3>{criticalGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Critical/1k</h6>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <BarGraph /> */}\r\n              <Row className=\"box px-3\">\r\n                <div\r\n                  className=\"pt-1 pb-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Deaths Per Continent\r\n                </div>\r\n\r\n                <Bar\r\n                  // pointStyle=\"star\"\r\n                  height={150}\r\n                  width={300}\r\n                  options={{\r\n                    legend: {\r\n                      display: true,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    //   scales:{\r\n                    //     xAxes:[{\r\n                    //        ticks:{\r\n                    //        display: false\r\n                    //       }\r\n                    //     }]\r\n                    // },\r\n\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          // ticks: {\r\n                          //   min: 0,\r\n                          //   max: 3,\r\n                          //   stepWidth: 2,\r\n                          //   stepSize: 2,\r\n                          // },\r\n                          ticks: {\r\n                            display: false,\r\n                          },\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          // type: \"logarithmic\",\r\n                          ticks: {\r\n                            // min: 0,\r\n                            // max: 3,\r\n                            // stepWidth: 100,\r\n                            stepSize: 1000,\r\n                          },\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: continentNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Deaths\",\r\n                        data: deathsPerContinent,\r\n                        backgroundColor: colorCases,\r\n                        stack: \"0\",\r\n                      },\r\n\r\n                      // {\r\n                      //   label: \"Tests\",\r\n                      //   data: recoveredPerContinent,\r\n                      //   backgroundColor: 'teal',\r\n                      //   stack: \"0\",\r\n                      // },\r\n                      {\r\n                        label: \"Critical\",\r\n                        data: criticalPerContinent,\r\n                        backgroundColor: \"orange\",\r\n                        stack: \"0\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col>\r\n                  {/* <Row className=\"box mb-2\">\r\n            <div\r\n                className=\"py-2 ml-4\"\r\n              >\r\n                Global Statistics\r\n              </div>\r\n              </Row> */}\r\n\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Critical\r\n                      {((criticalGlobal / casesGlobal) * 100).toFixed(2) <=\r\n                      0.025 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalGlobal / casesGlobal) * 100 >= 0.045 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {((criticalGlobal / casesGlobal) * 100).toFixed(2)}%\r\n                      </strong>\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Today\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        +\r\n                        {numberWithCommas(\r\n                          (todayGlobalDeaths / 1000).toFixed(0) + \"k\"\r\n                        )}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"subtitle mt-2\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Positive\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {numberWithCommas(\r\n                          ((casesGlobal / testsGlobal) * 100).toFixed(2) + \"%\"\r\n                        )}\r\n                      </strong>\r\n                      {/* <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            testsG,\r\n                          casesGlobal,\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut> */}\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Tests\r\n                      {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          POOR\r\n                        </Badge>\r\n                      ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          GOOD\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong className=\"\">\r\n                        {(testsG / populationGlobal).toFixed(2)}pp\r\n                        {/* <i className=\"fa fa-male\"></i> */}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n\r\n                <Col\r\n                  className=\"box ml-2 px-0\"\r\n                  style={{ color: \"#fff\", fontSize: \"14px\", maxWidth: \"50%\" }}\r\n                >\r\n                  {/* <div\r\n                className=\"pt-2 pb-4 ml-2\"\r\n              \r\n              >\r\n                Continent Analysis\r\n              </div> */}\r\n                  <Doughnut\r\n                    // width={200}\r\n                    height={250}\r\n                    data={{\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            deaths1.length,\r\n                            deaths2.length,\r\n                            deaths3.length,\r\n                            deaths4.length,\r\n                            deaths5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Deaths\",\r\n                          stack: \"0\",\r\n                        },\r\n                        {\r\n                          data: [\r\n                            active1.length,\r\n                            active2.length,\r\n                            active3.length,\r\n                            active4.length,\r\n                            active5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Active\",\r\n                          stack: \"0\",\r\n                        },\r\n                      ],\r\n\r\n                      labels: [\r\n                        \"Lowest\",\r\n                        \"Lower\",\r\n                        \"Average\",\r\n                        \"Higher\",\r\n                        \"Highest\",\r\n                      ],\r\n                    }}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          // borderWidth: 0.5,\r\n                          // borderColor: \"turquoise\",\r\n                          borderColor: \"#212529\",\r\n                          borderWidth: 1,\r\n                        },\r\n                      },\r\n                      responsive: true,\r\n                      maintainAspectRatio: true,\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                      title: {\r\n                        display: false,\r\n                        text: \"\",\r\n                      },\r\n                      animation: {\r\n                        animateScale: true,\r\n                        animateRotate: true,\r\n                      },\r\n                      tooltips: {\r\n                        backgroundColor: \"#212529\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        cornerRadius: 2,\r\n                        displayColors: true,\r\n                        bodyFontSize: 12,\r\n                        labels: {\r\n                          usePointStyle: true,\r\n                        },\r\n                        callbacks: {\r\n                          label: function (item, data) {\r\n                            console.log(data.labels, item);\r\n                            return (\r\n                              data.datasets[item.datasetIndex].label +\r\n                              \": \" +\r\n                              data.labels[item.index] +\r\n                              \": \" +\r\n                              data.datasets[item.datasetIndex].data[item.index]\r\n                            );\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  ></Doughnut>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box mt-2 px-0\">\r\n                {/* <Col className=\"box \" style={{maxWidth: \"50%\"}}> */}\r\n                <div\r\n                  className=\"py-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Cases Trend\r\n                </div>\r\n                <LineGraph casesType={casesType} />\r\n                {/* </Col> */}\r\n                {/* <Col className=\"box ml-2\" style={{maxWidth: \"50%\"}}>\r\n            </Col> */}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    // {\r\n    //   id: 2,\r\n    //   title: \"Deaths\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row\r\n    //         className={\"box m-1 py-1\"}\r\n    //         style={{\r\n    //           color: \"#fff\",\r\n    //           display: \"flex\",\r\n    //           alignItems: \"center\",\r\n    //           flexDirection: \"column\",\r\n    //           justifyContent: \"center\",\r\n    //         }}\r\n    //       >\r\n    //         <h1>\r\n    //           {\" \"}\r\n    //           <CountUp\r\n    //             start={deathsGlobal - 1}\r\n    //             end={deathsGlobal}\r\n    //             duration={0.3}\r\n    //             separator=\",\"\r\n    //             decimals={2}\r\n    //           />\r\n    //              {deathsGlobal[0] / 1000 <= deathsGlobal[5] / 1000 ? (\r\n    //                   <i\r\n    //                   style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n    //                   className=\"fa fa-arrow-up\"\r\n    //                 ></i>\r\n    //               ) : (\r\n    //                 <i\r\n    //                 style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n    //                 className=\"fa fa-arrow-down\"\r\n    //               ></i>\r\n    //               )}\r\n    //         </h1>\r\n    //         <h5 className=\"\"> Deaths / 1000 </h5>\r\n    //       </Row>\r\n\r\n    //       <Row className=\"box p-2 mt-2 mx-2\">\r\n    //         <div\r\n    //           className=\"pt-1 pb-1\"\r\n    //           style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //         >\r\n    //           Global Deaths\r\n    //         </div>\r\n    //         <Bar\r\n    //           pointStyle=\"star\"\r\n    //           height={150}\r\n    //           width={300}\r\n    //           options={{\r\n    //             legend: {\r\n    //               display: false,\r\n    //               position: \"bottom\",\r\n    //               labels: {\r\n    //                 usePointStyle: true,\r\n    //               },\r\n    //             },\r\n    //             elements: {\r\n    //               point: {\r\n    //                 radius: 25,\r\n    //                 hoverRadius: 35,\r\n    //                 pointStyle: \"rectRounded\",\r\n    //               },\r\n    //             },\r\n    //             scales: {\r\n    //               xAxes: [\r\n    //                 {\r\n    //                   stacked: true,\r\n    //                 },\r\n    //               ],\r\n    //               yAxes: [\r\n    //                 {\r\n    //                   stacked: true,\r\n    //                   radius: 25,\r\n    //                 },\r\n    //               ],\r\n    //             },\r\n    //           }}\r\n    //           data={{\r\n    //             labels: continentNames,\r\n    //             datasets: [\r\n    //               {\r\n    //                 label: \"Deaths/1000\",\r\n    //                 data: deathsPerContinent,\r\n    //                 backgroundColor: colorCases,\r\n    //                 stack: \"0\",\r\n    //               },\r\n    //               // {\r\n    //               //   label: \"Deaths/1000\",\r\n    //               //   data: deathsPerContinent,\r\n    //               //   backgroundColor: colorsPie,\r\n    //               //   stack: \"0\",\r\n    //               // },\r\n    //               // {\r\n    //               //   label: \"Active/1000\",\r\n    //               //   data: activePerContinent,\r\n    //               //   backgroundColor: colorsPie,\r\n    //               //   stack: \"0\",\r\n    //               // },\r\n    //             ],\r\n    //           }}\r\n    //         />\r\n    //       </Row>\r\n\r\n    //       <Row>\r\n    //         <Col>\r\n    //           <div\r\n    //             className=\"pt-3 pb-3 ml-4\"\r\n    //             style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //           >\r\n    //             Death Statistics\r\n    //           </div>\r\n    //           <Row className=\"subtitle ml-1\">\r\n    //             <Col className=\"box px-2 py-3 mr-1\">\r\n    //               Critical\r\n    //               {((criticalGlobal / casesGlobal) * 100).toFixed(2) <= 2.5 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n    //                 4.5 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">\r\n    //                 {globalCritical*1000}\r\n    //               </strong>\r\n    //             </Col>\r\n    //             <Col className=\"box px-3 pt-3 pb-4  ml-1\">\r\n    //               Today\r\n    //               {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n    //               0.005 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n    //                 0.015 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">\r\n    //                 +{numberWithCommas(todayGlobalDeaths)}\r\n    //               </strong>\r\n    //             </Col>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle ml-0\">\r\n    //             <Col className=\"box p-2  mr-1 mt-3\">\r\n    //               <Doughnut\r\n    //                 width={170}\r\n    //                 options={{\r\n    //                   elements: {\r\n    //                     arc: {\r\n    //                       borderWidth: 0,\r\n    //                     },\r\n    //                   },\r\n    //                   legend: {\r\n    //                     display: false,\r\n    //                     position: \"\",\r\n    //                   },\r\n    //                 }}\r\n    //                 data={{\r\n    //                   labels: [\"Tested\", \"Untested\"],\r\n    //                   datasets: [\r\n    //                     {\r\n    //                       data: [\r\n    //                         tests[index] / population[index],\r\n    //                         1 - tests[index] / population[index],\r\n    //                       ],\r\n    //                       backgroundColor: colorCases,\r\n    //                     },\r\n    //                   ],\r\n    //                 }}\r\n    //               ></Doughnut>\r\n    //             </Col>\r\n    //             <Col className=\"box px-3 py-3 ml-1 mt-3\">\r\n    //               Tests{\" \"}\r\n    //               {(tests[index] / population[index]) * 100 <= 100 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   POOR\r\n    //                 </Badge>\r\n    //               ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   GOOD\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">{\" \"}\r\n    //                 {(testsG / populationGlobal).toFixed(2)} pp\r\n    //                 {/* <i className=\"fa fa-male\"></i> */}\r\n    //               </strong>\r\n    //             </Col>\r\n    //           </Row>\r\n    //         </Col>\r\n\r\n    //         <Col>\r\n    //           <div\r\n    //             className=\"pt-3 pb-3 ml-4\"\r\n    //             style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //           >\r\n    //             Deaths Analysis\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={300}\r\n    //             height={300}\r\n    //             options={{\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Deaths\",\r\n    //                 \"Lower Deaths\",\r\n    //                 \"Average Deaths\",\r\n    //                 \"Higher Deaths\",\r\n    //                 \"Highest Deaths\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     deaths1.length,\r\n    //                     deaths2.length,\r\n    //                     deaths3.length,\r\n    //                     deaths4.length,\r\n    //                     deaths5.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           ></Doughnut>\r\n    //         </Col>\r\n    //       </Row>\r\n    //       <Row className=\"subtitle box ml-0 mr-2 mt-3\">\r\n    //         <div\r\n    //           className=\"pt-1 pb-1 ml-0\"\r\n    //           style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //         >\r\n    //           Deaths Trend\r\n    //         </div>\r\n    //         <Line\r\n    //           width={160}\r\n    //           height={60}\r\n    //           options={{\r\n    //             legend: {\r\n    //               display: false,\r\n    //               position: \"bottom\",\r\n    //             },\r\n    //           }}\r\n    //           data={{\r\n    //             labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //             datasets: [\r\n    //               {\r\n    //                 label: \"Deaths / 1000\",\r\n    //                 data: deathsMillion,\r\n    //                 fill: true,\r\n    //                 backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                 borderColor: \"rgba(75,192,192,1)\",\r\n    //               },\r\n    //             ],\r\n    //           }}\r\n    //         />\r\n\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n\r\n    // {\r\n    //   id: 3,\r\n    //   title: \"Active\",\r\n    //   icon: \"tabitem__icon fa fa-network-wired\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row>\r\n    //         <Col className=\"pr-0\">\r\n    //           <HorizontalBar\r\n    //             height={830}\r\n    //             width={200}\r\n    //             options={{\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //               // title: {\r\n    //               //   display: true,\r\n    //               //   text: 'Mortality in ' + region,\r\n    //               //   fontSize: 13,\r\n\r\n    //               // },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: countryNames,\r\n    //               datasets: [\r\n    //                 {\r\n    //                   label: \"Cases/1000\",\r\n    //                   data: activePerOneMillion,\r\n    //                   backgroundColor: colorActive,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //         <Col className=\"px-0\">\r\n    //           {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n    //           {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n    //           <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n    //             <h1>\r\n    //               {activeGlobal}{\" \"}\r\n    //               <FontAwesomeIcon color=\"green\" icon={faArrowDown} />\r\n    //             </h1>\r\n\r\n    //             <h5>/1000 Active</h5>\r\n    //           </Row>\r\n\r\n    //           {/* </Row> */}\r\n    //           <Row className=\"subtitle px-3 pt-2\">\r\n    //             <Line\r\n    //               width={160}\r\n    //               height={100}\r\n    //               options={{\r\n    //                 // title: {\r\n    //                 //     display: true,\r\n    //                 //     text: 'Trends in ' + region,\r\n    //                 //     fontSize: 13,\r\n    //                 //     postion: 'bottom'\r\n    //                 // },\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"bottom\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"First dataset\",\r\n    //                     data: activePerOneMillion,\r\n    //                     fill: true,\r\n    //                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                     borderColor: \"rgba(75,192,192,1)\",\r\n    //                   },\r\n    //                   // {\r\n    //                   //   label: \"Second dataset\",\r\n    //                   //   data: [33, 25, 35, 51, 54, 76],\r\n    //                   //   fill: false,\r\n    //                   //   borderColor: \"#742774\"\r\n    //                   // }\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n    //           </Row>\r\n    //           <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n    //           <Row className=\"subtitle m-1 pt-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Active\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (casesMillion[index] / activeMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(0)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/active</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Critical\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (criticalMillion[index] / activeMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/active</div>\r\n    //             </Col>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle m-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Deaths\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n    //               </div>{\" \"}\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (deathsMillion[index] / activeMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/active</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Tests{\" \"}\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n    //               <div>/person</div>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n    //             Countries in {region}\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={170}\r\n    //             options={{\r\n    //               // maintainAspectRatio: true,\r\n    //               // title: {\r\n    //               //     display: true,\r\n    //               //     text: 'Countries in ' + region,\r\n    //               //     fontSize: 13\r\n    //               // },\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Active\",\r\n    //                 \"Lower Active\",\r\n    //                 \"Average Active\",\r\n    //                 \"Higher Active\",\r\n    //                 \"Highest Active\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     active1.length,\r\n    //                     active2.length,\r\n    //                     active3.length,\r\n    //                     active4.length,\r\n    //                     active5.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n    // {\r\n    //   id: 4,\r\n    //   title: \"Critical\",\r\n    //   icon: \"tabitem__icon fa fa-network-wired\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row>\r\n    //         <Col className=\"pr-0\">\r\n    //           <HorizontalBar\r\n    //             height={830}\r\n    //             width={200}\r\n    //             options={{\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //               // title: {\r\n    //               //   display: true,\r\n    //               //   text: 'Mortality in ' + region,\r\n    //               //   fontSize: 13,\r\n\r\n    //               // },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: countryNames,\r\n    //               datasets: [\r\n    //                 {\r\n    //                   label: \"Cases/1000\",\r\n    //                   data: casesPerOneMillion,\r\n    //                   backgroundColor: colorCases,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //         <Col className=\"px-0\">\r\n    //           {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n    //           {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n    //           <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n    //             <h1>\r\n    //               {(criticalGlobal / 1).toFixed(1)}{\" \"}\r\n    //               <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n    //             </h1>\r\n\r\n    //             <h5>/1000 Critical</h5>\r\n    //           </Row>\r\n\r\n    //           {/* </Row> */}\r\n    //           <Row className=\"subtitle px-3 pt-2\">\r\n    //             <Line\r\n    //               width={160}\r\n    //               height={100}\r\n    //               options={{\r\n    //                 // title: {\r\n    //                 //     display: true,\r\n    //                 //     text: 'Trends in ' + region,\r\n    //                 //     fontSize: 13,\r\n    //                 //     postion: 'bottom'\r\n    //                 // },\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"bottom\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"First dataset\",\r\n    //                     data: casesPerOneMillion,\r\n    //                     fill: true,\r\n    //                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                     borderColor: \"rgba(75,192,192,1)\",\r\n    //                   },\r\n    //                   // {\r\n    //                   //   label: \"Second dataset\",\r\n    //                   //   data: [33, 25, 35, 51, 54, 76],\r\n    //                   //   fill: false,\r\n    //                   //   borderColor: \"#742774\"\r\n    //                   // }\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n    //           </Row>\r\n    //           <div\r\n    //             style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}\r\n    //           >\r\n    //             Statistics\r\n    //           </div>\r\n    //           <Row className=\"subtitle m-1 pt-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Active\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (activeMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Critical\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (criticalMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle m-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Deaths\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n    //               </div>{\" \"}\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (deathsMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Tests{\" \"}\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n    //               <div>/person</div>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n    //             Countries in {region}\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={170}\r\n    //             options={{\r\n    //               // maintainAspectRatio: true,\r\n    //               // title: {\r\n    //               //     display: true,\r\n    //               //     text: 'Countries in ' + region,\r\n    //               //     fontSize: 13\r\n    //               // },\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Cases\",\r\n    //                 \"Lower Cases\",\r\n    //                 \"Average Cases\",\r\n    //                 \"Higher Cases\",\r\n    //                 \"Highest Cases\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     lowest.length,\r\n    //                     lower.length,\r\n    //                     average.length,\r\n    //                     higher.length,\r\n    //                     highest.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n    // {\r\n    //   id: 5,\r\n    //   title: \"Tests\",\r\n    //   icon: \"tabitem__icon fa fa-network-wired\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row>\r\n    //         <Col className=\"pr-0\">\r\n    //           <HorizontalBar\r\n    //             height={830}\r\n    //             width={200}\r\n    //             options={{\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //               // title: {\r\n    //               //   display: true,\r\n    //               //   text: 'Mortality in ' + region,\r\n    //               //   fontSize: 13,\r\n\r\n    //               // },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: countryNames,\r\n    //               datasets: [\r\n    //                 {\r\n    //                   label: \"Cases/1000\",\r\n    //                   data: casesPerOneMillion,\r\n    //                   backgroundColor: colorCases,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //         <Col className=\"px-0\">\r\n    //           {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n    //           {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n    //           <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n    //             <h1>\r\n    //               {(testsGlobal / 1).toFixed(1)}{\" \"}\r\n    //               <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n    //             </h1>\r\n\r\n    //             <h5>/1000 Tests</h5>\r\n    //           </Row>\r\n\r\n    //           {/* </Row> */}\r\n    //           <Row className=\"subtitle px-3 pt-2\"></Row>\r\n    //           <div\r\n    //             style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}\r\n    //           >\r\n    //             Statistics\r\n    //           </div>\r\n    //           <Row className=\"subtitle m-1 pt-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Active\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (activeMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               Critical\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (criticalMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle m-1\">\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Deaths\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n    //               </div>{\" \"}\r\n    //               <h3>\r\n    //                 {(\r\n    //                   (deathsMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </h3>\r\n    //               <div>/cases</div>\r\n    //             </Col>\r\n    //             <Col className=\"box\" style={{ color: \"teal\" }}>\r\n    //               {\" \"}\r\n    //               Tests{\" \"}\r\n    //               <div className=\"icon\">\r\n    //                 <FontAwesomeIcon\r\n    //                   color=\"rgb(212, 23, 83)\"\r\n    //                   icon={faArrowDown}\r\n    //                 />\r\n    //               </div>\r\n    //               <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n    //               <div>/person</div>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n    //             Countries in {region}\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={170}\r\n    //             options={{\r\n    //               // maintainAspectRatio: true,\r\n    //               // title: {\r\n    //               //     display: true,\r\n    //               //     text: 'Countries in ' + region,\r\n    //               //     fontSize: 13\r\n    //               // },\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Cases\",\r\n    //                 \"Lower Cases\",\r\n    //                 \"Average Cases\",\r\n    //                 \"Higher Cases\",\r\n    //                 \"Highest Cases\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     lowest.length,\r\n    //                     lower.length,\r\n    //                     average.length,\r\n    //                     higher.length,\r\n    //                     highest.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n  ];\r\n\r\n  const TabsMenu = () => {\r\n    // function usePrevious(value) {\r\n    //   const ref = useRef();\r\n    //   useEffect(() => {\r\n    //     ref.current = value; //assign the value of ref to the argument\r\n    //   }, [value]); //this code will run when the value of 'value' changes\r\n    //   return ref.current; //in the end, return the current ref value.\r\n    // }\r\n\r\n    const [tab, setTab] = useState(1);\r\n    // const prevCount = usePrevious(active);\r\n\r\n    const TabItem = ({\r\n      icon = \"\",\r\n      title = \"\",\r\n\r\n      onItemClicked = () =>\r\n        console.error(\"You passed no action to the component\"),\r\n      isActive = false,\r\n    }) => {\r\n      return (\r\n        <div\r\n          className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n          onClick={onItemClicked}\r\n        >\r\n          <p style={{ display: \"flex\" }} className=\"tabitem__title\">\r\n            {title}\r\n            {icon}{\" \"}\r\n          </p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Row className=\"pl-3 pr-1\">\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItem\r\n              key={title}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setTab(id)}\r\n              isActive={tab === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return tab === id ? content : \"\";\r\n          })}\r\n        </div>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={state ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\" style={{width: \"300px\"}}>\r\n          <Container>\r\n            {/* <div className={!open ? \"hidden\" : \"visible\"}> */}\r\n            <Row className=\"title\">\r\n              <Col xs={9} className=\"my-2 pl-3\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                >\r\n                  {\" \"}\r\n                  {region}\r\n                </Animated>\r\n              </Col>\r\n\r\n              <Col className=\"my-2 pr-2\">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    // onClick={toggleAsia}\r\n                    onClick={handleClose}\r\n                    // size=\"lg\"\r\n                    variant=\"outline-info\"\r\n                    // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                    className=\"close button\"\r\n                  >\r\n                    <h6>x</h6>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <TabsMenu\r\n              countries={countries}\r\n              index={index}\r\n              region={region}\r\n              casesMillion={casesMillion}\r\n              activeMillion={activeMillion}\r\n              criticalMillion={criticalMillion}\r\n              deathsMillion={deathsMillion}\r\n              tests={tests}\r\n              tabItems={tabItems}\r\n            />\r\n            {/* </div> */}\r\n            <div className=\"map-overlay\">\r\n              <div className=\"title mt-3 mb-3 ml-3\">Search</div>\r\n              <div id=\"geocoder\" className=\"geocoder\"></div>\r\n\r\n              <div className=\"title mt-5 mb-2 ml-3\">Filter</div>\r\n              <div id=\"menu\" className=\"pl-2\"></div>\r\n              <fieldset className=\"\">\r\n                <input\r\n                  id=\"feature-filter\"\r\n                  type=\"text\"\r\n                  placeholder=\"Filter Locations...\"\r\n                />\r\n              </fieldset>\r\n\r\n              <div id=\"feature-listing\" className=\"listing\"></div>\r\n              {/* <div id=\"listings\" className=\"listings\"></div> */}\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n];\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nconst DoughnutCases = ({\r\n  casesMillion,\r\n  activeMillion,\r\n  index,\r\n  colorsPie,\r\n  continentCountries,\r\n  colorActive,\r\n  region\r\n}) => {\r\n  // Create strata for Cases\r\n  const cases1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 < 50\r\n  );\r\n  const cases2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 100\r\n  );\r\n  const cases3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const cases4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const cases5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 35\r\n  );\r\n  const active5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 35\r\n  );\r\n\r\n  return (\r\n<>\r\n      <div\r\n        className=\"\"\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          color: \"#ccc\",\r\n        }}\r\n      >\r\n        {activeMillion[index] / 1000 < 5 ? (\r\n          <h6>Mild</h6>\r\n        ) : activeMillion[index] / 1000 < 10 ? (\r\n          <h6 >Limited</h6>\r\n        ) : activeMillion[index] / 1000 < 15 ? (\r\n          <h6>Moderate</h6>\r\n        ) : activeMillion[index] / 1000 < 35 ? (\r\n          <h6>Serious</h6>\r\n        ) : (\r\n          <h6>Extreme</h6>\r\n        )}\r\n      </div>\r\n\r\n      {/* <div className=\"py-2 \" style={{ color: \"#ccc\", fontSize: \"14px\" }}>\r\n       {region} Analysis: {continentCountries.length}\r\n      </div> */}\r\n\r\n      <Row className=\"px-2 pt-2\" >\r\n      <h6 className=\"pb-0\">Current Status of {region}. </h6>  \r\n     \r\n                </Row>\r\n      <div style={{ zIndex: 1 }}>\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  cases1.length,\r\n                  cases2.length,\r\n                  cases3.length,\r\n                  cases4.length,\r\n                  cases5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Cases\",\r\n                stack: \"0\",\r\n              },\r\n              {\r\n                data: [\r\n                  active1.length,\r\n                  active2.length,\r\n                  active3.length,\r\n                  active4.length,\r\n                  active5.length,\r\n                ],\r\n                backgroundColor: [\"#ffb300\",\"#ffa400\",\"#ff9400\",\"#ff8300\",\"#ff7200\"],\r\n                label: \"Active\",\r\n                stack: \"0\",\r\n              },\r\n            ],\r\n\r\n            labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n          }}\r\n          options={{\r\n            elements: {\r\n              arc: {\r\n                // borderWidth: 0.5,\r\n                // borderColor: \"turquoise\",\r\n                borderColor: \"#212529\",\r\n                borderWidth: 1,\r\n              },\r\n            },\r\n            responsive: true,\r\n            maintainAspectRatio: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"\",\r\n            },\r\n            title: {\r\n              display: false,\r\n              text: \"\",\r\n            },\r\n            animation: {\r\n              animateScale: true,\r\n              animateRotate: true,\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n              callbacks: {\r\n                label: function (item, data) {\r\n                  console.log(data.labels, item);\r\n                  return (\r\n                    data.datasets[item.datasetIndex].label +\r\n                    \": \" +\r\n                    data.labels[item.index] +\r\n                    \": \" +\r\n                    data.datasets[item.datasetIndex].data[item.index]\r\n                  );\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        ></Doughnut>\r\n     \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DoughnutCases;\r\n\r\nlet colorsCases = [\r\n \" #006390\",\r\n \" #7668b4\",\r\n \" #ffa500\",\r\n \" #ff6a67\",\r\n \"#d75ea4\",\r\n];\r\nlet colorsActive = [\"#0082be\", \"#ad93f9\", \"#ffa500\", \"#ff7872\", \"#ff76c8\"];\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DoughnutDeaths = ({\r\n  deathsMillion,\r\n  index,\r\n  colorsPie,\r\n  continentCountries,\r\n}) => {\r\n  // Create Strata for Deaths\r\n  const deaths1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 < 0.5\r\n  );\r\n  const deaths2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 0.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1\r\n  );\r\n  const deaths3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1.5\r\n  );\r\n  const deaths4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 3.5\r\n  );\r\n  const deaths5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 > 3.5\r\n  );\r\n\r\n  // Create Strata for Critical\r\n  const critical1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.criticalPerOneMillion / 1000 < 0.005\r\n  );\r\n  const critical2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.005 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.01\r\n  );\r\n  const critical3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.01 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.015\r\n  );\r\n  const critical4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.015 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.035\r\n  );\r\n  const critical5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.criticalPerOneMillion / 1000 > 0.035\r\n  );\r\n\r\n  return (\r\n    <Row\r\n      className={\"box mt-2 pb-3\"}\r\n      style={{\r\n        color: \"#ccc\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"pt-5\"\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        {deathsMillion[index] / 1000 < 0.5 ? (\r\n          <h6>Mild</h6>\r\n        ) : deathsMillion[index] / 1000 < 1 ? (\r\n          <h6>Limited</h6>\r\n        ) : deathsMillion[index] / 1000 < 1.5 ? (\r\n          <h6>Moderate</h6>\r\n        ) : deathsMillion[index] / 1000 < 3.5 ? (\r\n          <h6>Serious</h6>\r\n        ) : (\r\n          <h6>Extreme</h6>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"py-2 \" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n        Country Analysis\r\n      </div>\r\n      <div style={{ zIndex: 1 }}>\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  deaths1.length,\r\n                  deaths2.length,\r\n                  deaths3.length,\r\n                  deaths4.length,\r\n                  deaths5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Deaths\",\r\n                stack: \"0\",\r\n              },\r\n\r\n              {\r\n                data: [\r\n                  critical1.length,\r\n                  critical2.length,\r\n                  critical3.length,\r\n                  critical4.length,\r\n                  critical5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Critical\",\r\n                stack: \"0\",\r\n              },\r\n            ],\r\n            labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n          }}\r\n          options={{\r\n            elements: {\r\n              arc: {\r\n                borderWidth: 0.5,\r\n                borderColor: \"turquoise\",\r\n              },\r\n            },\r\n            responsive: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"\",\r\n            },\r\n            title: {\r\n              display: false,\r\n              text: \"\",\r\n            },\r\n            animation: {\r\n              animateScale: true,\r\n              animateRotate: true,\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n              callbacks: {\r\n                label: function (item, data) {\r\n                  console.log(data.labels, item);\r\n                  return (\r\n                    data.datasets[item.datasetIndex].label +\r\n                    \": \" +\r\n                    data.labels[item.index] +\r\n                    \": \" +\r\n                    data.datasets[item.datasetIndex].data[item.index]\r\n                  );\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        ></Doughnut>\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DoughnutDeaths;\r\n\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport React, { useRef } from \"react\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\n\r\nimport { getElementAtEvent, HorizontalBar } from \"react-chartjs-2\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\n\r\n// import {Chart} from 'chart.js';\r\n// import ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\n// Chart.register(ChartDataLabels);\r\n\r\n// Chart.defaults.set('plugins.datalabels', {\r\n//   color: '#FE777B'\r\n// });\r\n\r\nconst HorizontalChart = ({\r\n  props,\r\n  countryNames,\r\n  activePerOneMillion,\r\n  casesPerOneMillion,\r\n  testsPerOneMillion,\r\n  criticalPerOneMillion,\r\n  deathsPerOneMillion,\r\n  recoveredPerOneMillion,\r\n  colorCases,\r\n  colorActivity,\r\n  colorDeaths,\r\n  index,\r\n  mortalityRate,\r\n  continentCountries,\r\n  // continentCountrys,\r\n  // sorted,\r\n  // handleSort,\r\n  // handleSortActive,\r\n  // handleSortTests\r\n}) => {\r\n  // const chartRef = useRef();\r\n\r\n  const [continentCountrys, setSampleData] = useState(\r\n    continentCountries.sort((a, b) =>\r\n      a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1\r\n    )\r\n  );\r\n  const [sorted1, setSorted1] = useState();\r\n  const [sorted2, setSorted2] = useState();\r\n  const [sorted3, setSorted3] = useState();\r\n  const [sorted4, setSorted4] = useState();\r\n\r\n  useEffect(() => {\r\n    setSampleData(continentCountrys);\r\n    setSorted1(!sorted1);\r\n    setSorted2(!sorted2);\r\n    setSorted3(!sorted3);\r\n    setSorted4(!sorted4);\r\n  }, []);\r\n\r\n  function handleSortActive() {\r\n    const sortedData = sorted1\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.activePerOneMillion < b.activePerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.activePerOneMillion > b.activePerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted1(!sorted1);\r\n  }\r\n\r\n  function handleSort() {\r\n    const sortedData = sorted2\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.casesPerOneMillion > b.casesPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted2(!sorted2);\r\n  }\r\n\r\n  function handleSortTests() {\r\n    const sortedData = sorted3\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.testsPerOneMillion < b.testsPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.testsPerOneMillion > b.testsPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted3(!sorted3);\r\n  }\r\n\r\n\r\n  function handleSortDeaths() {\r\n    const sortedData = sorted4\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.deathsPerOneMillion < b.deathsPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.deathsPerOneMillion > b.deathsPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted4(!sorted4);\r\n  }\r\n  // console.log(deathsPerOneMillion[index], 'deathsPerOneMillion')\r\n  // const deaths = deathsPerOneMillion.sort((a, b) => (a.deathsPerOneMillion < b.deathsPerOneMillion ? 1 : -1))\r\n\r\n  const countryName = continentCountrys.map(\r\n    (selectedCountry) => selectedCountry.country\r\n  );\r\n\r\n  // console.log(countryName, continentCountrys, \"countryName\");\r\n\r\n  const casesPerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n\r\n  const testsPerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  const activePerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n\r\n  const deathsPerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(3)\r\n  );\r\n\r\n  const recoveredPerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.recoveredPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  const criticalPerMil = continentCountrys.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(3)\r\n  );\r\n\r\n  const colorCasez = [];\r\n  for (let i = 0; i < casesPerMil.length; i++) {\r\n    if (casesPerMil[i] < 50) {\r\n      colorCasez.push(\"#885dfc\");\r\n    }\r\n    if (casesPerMil[i] >= 50 && casesPerMil[i] < 100) {\r\n      colorCasez.push(\"#a13ed5\");\r\n    }\r\n    if (casesPerMil[i] >= 100 && casesPerMil[i] < 150) {\r\n      colorCasez.push(\"#ca32ad\");\r\n    }\r\n    if (casesPerMil[i] >= 150 && casesPerMil[i] < 350) {\r\n      colorCasez.push(\"#e72585\");\r\n    }\r\n    if (casesPerMil[i] >= 350) {\r\n      colorCasez.push(\"#ff125e\");\r\n    }\r\n  }\r\n\r\n  const max = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.casesPerOneMillion)\r\n  );\r\n\r\n  // console.log(max, \"MAX\");\r\n\r\n  const maxName = continentCountries\r\n    .filter(\r\n      (country) =>\r\n        // country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.casesPerOneMillion === max\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const colorActiv = [];\r\n  for (let i = 0; i < activePerMil.length; i++) {\r\n    if (activePerMil[i] < 5) {\r\n      colorActiv.push(\"#ffb300\");\r\n    }\r\n    if (activePerMil[i] >= 5 && activePerMil[i] < 10) {\r\n      colorActiv.push(\"#ffa400\");\r\n    }\r\n    if (activePerMil[i] >= 10 && activePerMil[i] < 15) {\r\n      colorActiv.push(\"#ff9400\");\r\n    }\r\n    if (activePerMil[i] >= 15 && activePerMil[i] < 35) {\r\n      colorActiv.push(\"#ff8300\");\r\n    }\r\n    if (activePerMil[i] >= 35) {\r\n      colorActiv.push(\"#ff7200\");\r\n    }\r\n  }\r\n \r\n  // const onClick = (event) => {\r\n  //   const elem = getElementAtEvent(chartRef.current, event);\r\n  //   props.onHandleBarClickEvent(elem[0].index, elem[0].datasetIndex);\r\n  // };\r\n\r\n  return (\r\n    <Row\r\n      className={\"box\"}\r\n      style={{\r\n        color: \"#fff\",\r\n        display: \"flex\",\r\n        // justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Row className=\"\">\r\n   \r\n        <strong style={{ color: \"\", fontSize: \"14px\" }} className=\"pt-1 \">\r\n        {/* <Button    size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            style={{ color: \"#fff\" }}\r\n            className=\"sort p-1 mt-0\">SORT</Button> */}\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mt-0\"\r\n            onClick={handleSortActive}\r\n            style={{ color: \"#fff\" }}\r\n          >\r\n            {sorted1 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Active\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mt-0 mx-0\"\r\n            onClick={handleSort}\r\n            style={{ color: \"#fff\" }}\r\n            // style={{ color: \"\", borderColor: \"#e72585\"}}\r\n          >\r\n            {sorted2 ? (\r\n              <i className=\"fa fa-arrow-up icon\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-down icon\"></i>\r\n            )}\r\n            &nbsp;Cases\r\n          </Button>\r\n          {/* <span >&nbsp;Tests</span> */}\r\n          {/* <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort mt-0\"\r\n            onClick={handleSortTests}\r\n            style={{ color: \"#fff\" }}\r\n            // style={{color: \"\", borderColor: \"turquoise\"}}\r\n          >\r\n            {sorted3 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Tests\r\n          </Button> */}\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mt-0\"\r\n            onClick={handleSortDeaths}\r\n            style={{ color: \"#fff\" }}\r\n            // style={{color: \"\", borderColor: \"turquoise\"}}\r\n          >\r\n            {sorted4 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Death\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mt-0\"\r\n            onClick={handleSortTests}\r\n            style={{ color: \"#fff\" }}\r\n            // style={{color: \"\", borderColor: \"turquoise\"}}\r\n          >\r\n            {sorted3 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Tests\r\n          </Button>\r\n        </strong>\r\n      </Row>\r\n\r\n      {/* <Row className=\"box subtitle px-4 pb-1 pt-2 mt-2\">\r\n                <a id={maxName}>\r\n                  {maxName}&nbsp;\r\n                  {numberWithCommas((max / 1000).toFixed(1))} &nbsp;\r\n                  <h6 >\r\n                    Most Cases/1k &nbsp;\r\n                  </h6>\r\n                </a>\r\n              </Row> */}\r\n      {/* <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxActiveName}&nbsp;\r\n                {numberWithCommas((maxActive / 1000).toFixed(1))} &nbsp;\r\n                <h6 style={{ color: colorActive[index] }}>\r\n                  Most Active/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxTestsName}&nbsp;\r\n                {numberWithCommas((maxTests / 1000).toFixed(0))} &nbsp;\r\n                <h6 style={{ color: \"teal\" }}>Most Tests/1k &nbsp;</h6>\r\n              </Row> */}\r\n\r\n      <HorizontalBar\r\n        // options={options}\r\n        // onClick={onClick}\r\n        // ref={chartRef}\r\n        data={{\r\n          labels: countryName,\r\n          type: \"bar\",\r\n\r\n          datasets: [\r\n            // {\r\n\r\n            //   datalabels: {\r\n            //   listeners: {\r\n            //     click: function(context, event) {\r\n            //       // Receives `click` events only for labels of the first dataset.\r\n            //       // The clicked label index is available in `context.dataIndex`.\r\n            //       console.log('label ' + context.dataIndex + ' has been clicked!');\r\n            //       console.log('mouse is at position x:', event.x, 'and y:', event.y);\r\n\r\n            //       if (event.native.ctrlKey) {\r\n            //         console.log('control key is pressed!');\r\n            //       }\r\n            //     }\r\n            //   }\r\n            // }\r\n\r\n            // },\r\n\r\n            {\r\n              label: \"Deaths\",\r\n              data: deathsPerMil,\r\n              backgroundColor: \"#646464\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            // {\r\n            //   label: \"Critical\",\r\n            //   data: criticalPerMil,\r\n            //   backgroundColor: \"#d61e73\",\r\n            //   borderColor: \"#212529\",\r\n            //   borderWidth: 1,\r\n            //   stack: \"0\",\r\n            // },\r\n            {\r\n              label: \"Active\",\r\n              data: activePerMil,\r\n              backgroundColor: colorActiv,\r\n              // \"rgba(255,100,10,0.99)\",\r\n\r\n              //   backgroundColor: \"#d61e73\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Cases\",\r\n              data: casesPerMil,\r\n              backgroundColor: colorCasez,\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            // {\r\n            //   label: \"Recov'd\",\r\n            //   data: recoveredPerMil,\r\n            //   backgroundColor: \"green\",\r\n            //   borderColor: \"#212529\",\r\n            //   borderWidth: 1,\r\n            //   stack: \"0\",\r\n            // },\r\n\r\n            {\r\n              label: \"Tests\",\r\n              data: testsPerMil,\r\n              backgroundColor: \"teal\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            // {\r\n            //   label: \"Mortality\",\r\n            //   data: mortalityRate,\r\n            //   backgroundColor: \"#d61e73\",\r\n            //   borderColor: \"#212529\",\r\n            //   borderWidth: 1,\r\n            //   stack: \"0\",\r\n            // },\r\n          ],\r\n        }}\r\n        height={countryNames.length * 25}\r\n        options={{\r\n          onClick: function (evt, element) {\r\n            if (element.length > 0) {\r\n              const id = element[0]._model.label;\r\n              console.log(element, id);\r\n              // you can also get dataset of your selected element\r\n              // console.log(data.datasets[element[0]._datasetIndex])\r\n              return (\r\n                <Row className=\"subtitle box\">\r\n                  <div id={id}>{id}hiiiiiiiii</div>\r\n                </Row>\r\n              );\r\n            }\r\n          },\r\n\r\n          // plugins: {\r\n          //   datalabels: {\r\n          //     listeners: {\r\n          //       enter: function(context, event) {\r\n          //         // Receives `enter` events for any labels of any dataset. Indices of the\r\n          //         // clicked label are: `context.datasetIndex` and `context.dataIndex`.\r\n          //         // For example, we can modify keep track of the hovered state and\r\n          //         // return `true` to update the label and re-render the chart.\r\n          //         context.hovered = true;\r\n          //         return true;\r\n          //       },\r\n          //       leave: function(context, event) {\r\n          //         // Receives `leave` events for any labels of any dataset.\r\n          //         context.hovered = false;\r\n          //         return true;\r\n          //       }\r\n          //     },\r\n          //     color: function(context) {\r\n          //       // Change the label text color based on our new `hovered` context value.\r\n          //       return context.hovered ? \"blue\" : \"gray\";\r\n          //     }\r\n          //   }\r\n          // },\r\n\r\n          tooltips: {\r\n            // callbacks: {\r\n            //   label: function (item, data) {\r\n            //     // console.log( data.labels[item.index]);\r\n            //     const id = item.label;\r\n            //     console.log(id);\r\n            //     return (\r\n            //       data.datasets[item.datasetIndex].label +\r\n            //       \": \" +\r\n            //       data.labels[item.index] +\r\n            //       \": \" +\r\n            //       data.datasets[item.datasetIndex].data[item.index]\r\n            //     );\r\n            //   },\r\n            // },\r\n            // position: 'nearest',\r\n            yPadding: 10,\r\n            xPadding: 10,\r\n            xAlign: \"right\",\r\n            cornerRadius: 2,\r\n            backgroundColor: \"#212529\",\r\n\r\n            borderColor: \"turquoise\",\r\n            borderWidth: 1,\r\n            displayColors: true,\r\n            bodyFontSize: 12,\r\n\r\n            labels: {\r\n              usePointStyle: true,\r\n            },\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          hover: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              fontSize: 10,\r\n              fontColor: \"#fff\",\r\n              padding: 5,\r\n            },\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 10,\r\n              top: 0,\r\n              bottom: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                display: false,\r\n                type: \"logarithmic\",\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* {countryNames.length < 15 && (\r\n          <>\r\n            <div\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              className=\"pt-2 pb-3\"\r\n            >\r\n              Active Cases\r\n            </div>\r\n            <div className=\"pt-2 pb-2\"></div>\r\n            <HorizontalBar\r\n              height={countryNames.length * 50}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                legend: {\r\n                  display: false,\r\n                  position: \"\",\r\n                },\r\n                layout: {\r\n                  padding: {\r\n                    left: 20,\r\n                    right: 0,\r\n                    top: 0,\r\n                    bottom: 0,\r\n                  },\r\n                },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Active/1000\",\r\n                    data: activePerOneMillion,\r\n                    backgroundColor: colorActive,\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </>\r\n        )} */}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default HorizontalChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { HorizontalBar, Line, Doughnut } from \"react-chartjs-2\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport DoughnutCases from \"./DoughnutCases\";\r\nimport DoughnutDeaths from \"./DoughnutDeaths\";\r\nimport HorizontalChart from \"./HorizontalChart\";\r\n\r\n\r\n\r\n\r\n\r\nconst Menu = ({\r\n  countries,\r\n  region,\r\n  index,\r\n  open,\r\n  casesMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  deathsMillion,\r\n  testsMillion,\r\n  recoveredMillion,\r\n  cases,\r\n  tests,\r\n  deaths,\r\n  critical,\r\n  active,\r\n  recovered,\r\n  population,\r\n  todayCases,\r\n  todayDeaths,\r\n  todayRecovered,\r\n  handleClose,\r\n  toggleGlobal,\r\n}) => {\r\n\r\n  console.log(testsMillion, 'testsMillion')\r\n  // Filter Countries in Region\r\n  const continentCountries = countries\r\n  // console.log(countries, 'countries');\r\n    // .sort((a, b) => (a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1))\r\n\r\n    .filter((country) => country.continent === region);\r\n  // Map Country Names && country.population > 1000000\r\n\r\n  const countryNames = continentCountries\r\n  \r\n    // .filter(\r\n    //   (country) => country.continent === region\r\n      \r\n    // )\r\n\r\n    .map((selectedCountry) => selectedCountry.country);\r\n    // console.log(countryNames, 'countryNames')\r\n    // console.log(continentCountries, 'continentCountries');\r\n\r\n    const [continentCountrys, setSampleData] = useState(continentCountries);\r\n    const [sorted, setSorted] = useState(false);\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //   setSampleData(continentCountrys);\r\n    //   setSorted(!sorted);\r\n    // }, []);\r\n\r\n    // function handleSort() {\r\n    //   const sortedData = sorted\r\n    //     ? [...continentCountries].sort((a, b) => {\r\n    //         return a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1;\r\n    //       })\r\n    //     : [...continentCountries].sort((a, b) => {\r\n    //         return a.casesPerOneMillion > b.casesPerOneMillion ? 1 : -1;\r\n    //       });\r\n  \r\n    //   setSampleData(sortedData);\r\n    //   setSorted(!sorted);\r\n    // }\r\n  \r\n    // function handleSortActive() {\r\n    //   const sortedData = sorted\r\n    //     ? [...continentCountries].sort((a, b) => {\r\n    //         return a.activePerOneMillion < b.activePerOneMillion ? 1 : -1;\r\n    //       })\r\n    //     : [...continentCountries].sort((a, b) => {\r\n    //         return a.activePerOneMillion > b.activePerOneMillion ? 1 : -1;\r\n    //       });\r\n  \r\n    //   setSampleData(sortedData);\r\n    //   setSorted(!sorted);\r\n    // }\r\n  \r\n    // function handleSortTests() {\r\n    //   const sortedData = sorted\r\n    //     ? [...continentCountries].sort((a, b) => {\r\n    //         return a.testsPerOneMillion < b.testsPerOneMillion ? 1 : -1;\r\n    //       })\r\n    //     : [...continentCountries].sort((a, b) => {\r\n    //         return a.testsPerOneMillion > b.testsPerOneMillion ? 1 : -1;\r\n    //       });\r\n  \r\n    //   setSampleData(sortedData);\r\n    //   setSorted(!sorted);\r\n    // }\r\n    // const countryNamesDeaths = continentCountries.sort((a, b) => (a.deathsPerOneMillion < b.deathsPerOneMillion ? 1 : -1))\r\n\r\n\r\n    // .map((selectedCountry) => selectedCountry.country);\r\n\r\n// const HandleSort = () => {\r\n//   const continentCountriesSorted = continentCountries.sort((a, b) => (a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1))\r\n//   .map((selectedCountry) => [selectedCountry.country, selectedCountry.casesPerOneMillion]);\r\n//   console.log(continentCountriesSorted, 'contSort');\r\n//   return (\r\n//     <>\r\n//     <Button >Sort</Button>\r\n//     <div className=\"subtitle box\" style={{width: \"200px\"}}>{continentCountriesSorted}</div>\r\n//     </>\r\n//   );\r\n \r\n// }\r\n    \r\n\r\n\r\n  \r\n   \r\n\r\n    // const continentCountriesSorted = \r\n    // continentCountries\r\n    // .sort((a, b) => (a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1))\r\n    // .filter((country) => country.continent === region)\r\n    // .map((selectedCountry) => selectedCountry.country);\r\n\r\n    // console.log(continentCountriesSorted, 'contientCountriesSorted');\r\n\r\n    // // .filter(\r\n    //   (country) => country.continent === region\r\n      \r\n    // )\r\n    // \r\n  \r\n\r\n  // .filter((country) => country.country.length <= 12)\r\n  //   console.log(continentCountries);\r\n\r\n  // const sortCountries = ({ continentCountries }) => {\r\n  //   const sortedCountries = \r\n  //   continentCountries.sort((a, b) => (a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1))\r\n  //     .filter((country) => country.continent === region)\r\n  //     .map((selectedCountry) => selectedCountry.country);\r\n  //     return sortedCountries;\r\n  // };\r\n\r\n  //Max Stats\r\n  const max = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.casesPerOneMillion)\r\n  );\r\n\r\n  // console.log(max, \"MAX\");\r\n\r\n  const maxName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.casesPerOneMillion === max\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxActive = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.activePerOneMillion)\r\n  );\r\n  // console.log(continentCountries);\r\n\r\n  const maxActiveName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.activePerOneMillion === maxActive\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxTests = Math.max(\r\n    ...continentCountries.map((item) => item.testsPerOneMillion)\r\n  );\r\n\r\n  const maxTestsName = continentCountries\r\n    .filter(\r\n      (country) =>\r\n        //   country.country.length <= 12 &&\r\n        country.testsPerOneMillion === maxTests\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxCritical = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.criticalPerOneMillion)\r\n  );\r\n  const maxCriticalName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.criticalPerOneMillion === maxCritical\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxDeaths = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.deathsPerOneMillion)\r\n  );\r\n  const maxDeathsName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.deathsPerOneMillion === maxDeaths\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxRecovered = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.recoveredPerOneMillion)\r\n  );\r\n  const maxRecoveredName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.recoveredPerOneMillion === maxRecovered\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  //   console.log(deathsPerOneMillion, \"deathsPerOneMillion\");\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n\r\n  const mortalityMillion = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsMillion / selectedCountry.casesMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  // console.log(deathsPerOneMillion, 'deathsPerOneMillion')\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(0)\r\n  );\r\n  const recoveredPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.recoveredPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  //Color Schemes\r\n  const colorMortality = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      colorMortality.push(\"#5748ff\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      colorMortality.push(\"#a13ed5\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      colorMortality.push(\"#ca32ad\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      colorMortality.push(\"#e72585\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      colorMortality.push(\"#ff125e\");\r\n    }\r\n  }\r\n  // \"#5748ff\", \"#a13ed5\", \"#ca32ad\", \"#e72585\", \"#ff125e\"\r\n  // const colorCases = [];\r\n  // for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n  //   if (casesPerOneMillion[i] < 50) {\r\n  //     colorCases.push(\"#5748ff\");\r\n  //   }\r\n  //   if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) {\r\n  //     colorCases.push(\"#a13ed5\");\r\n  //   }\r\n  //   if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) {\r\n  //     colorCases.push(\"#ca32ad\");\r\n  //   }\r\n  //   if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) {\r\n  //     colorCases.push(\"#e72585\");\r\n  //   }\r\n  //   if (casesPerOneMillion[i] >= 350) {\r\n  //     colorCases.push(\"#ff125e\");\r\n  //   }\r\n  // }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 3.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 3.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorCase = [];\r\n  for (let i = 0; i < casesMillion.length; i++) {\r\n    if (casesMillion[i] / 1000 < 50) {\r\n      colorCase.push(\"#6a5dfc\");\r\n      //   blue\r\n    }\r\n    if (casesMillion[i] / 1000 >= 50 && casesMillion[i] / 1000 < 100) {\r\n      colorCase.push(\"#a13ed5\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 100 && casesMillion[i] / 1000 < 150) {\r\n      colorCase.push(\"#ca32ad\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 150 && casesMillion[i] / 1000 < 350) {\r\n      colorCase.push(\"#e72585\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 350) {\r\n      colorCase.push(\"#ff125e\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  // \"#6a5dfc\",\r\n  // \"#a13ed5\",\r\n  // \"#ca32ad\",\r\n  // \"#e72585\",\r\n  // \"#ff125e\",\r\n\r\n  const colorDeath = [];\r\n  for (let i = 0; i < deathsMillion.length; i++) {\r\n    if (deathsMillion[i] / 1000 < 0.5) {\r\n      colorDeath.push(\"#5d67a1\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 0.5 && deathsMillion[i] / 1000 < 1.0) {\r\n      colorDeath.push(\"#955196\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.0 && deathsMillion[i] / 1000 < 1.5) {\r\n      colorDeath.push(\"#ffa600\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.5 && deathsMillion[i] / 1000 < 3.5) {\r\n      colorDeath.push(\"#cf8c11\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 3.5) {\r\n      colorDeath.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActivity = [];\r\n  for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n    if (casesPerOneMillion[i] < 50) {\r\n      colorActivity.push(\"#00a5f1\");\r\n      //   blue\r\n    }\r\n    if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) {\r\n      colorActivity.push(\"#ad93f9\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) {\r\n      colorActivity.push(\"#ffa600\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) {\r\n      colorActivity.push(\"#ff7972\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 350) {\r\n      colorActivity.push(\"#ff76c8\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activeMillion.length; i++) {\r\n    if (activeMillion[i] / 1000 < 5) {\r\n      colorActive.push(\"#5d67a1\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 5 && activeMillion[i] / 1000 < 10) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 10 && activeMillion[i] / 1000 < 15) {\r\n      colorActive.push(\"#cf8c11\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 15 && activeMillion[i] / 1000 < 35) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 35) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  // const displayData = ({countries}) => {\r\n  //   if (!countries.length)\r\n  //     return (\r\n  //       <tr>\r\n  //         <td>{(\"noResults\")}</td>\r\n  //       </tr>\r\n  //     );\r\n\r\n  //   return countries.map((country, index) => {\r\n  //     return (\r\n  //       <tbody key={country.country} style={{color: \"#fff\"}}>\r\n\r\n  //         <tr>\r\n\r\n  //           <td>\r\n  //             {/* <img\r\n  //               src={country[\"countryInfo\"][\"flag\"]}\r\n  //               alt=\"\"\r\n  //               width=\"30px\"\r\n  //               height=\"20px\"\r\n  //               className=\"mr-2 d-none d-sm-inline\"\r\n  //             ></img> */}\r\n  //             {country.country}\r\n  //           </td>\r\n  //           <td>{numberWithCommas(country[\"cases\"])}</td>\r\n  //           <td>{numberWithCommas(country[\"deaths\"])}</td>\r\n  //           <td>{numberWithCommas(country[\"recovered\"])}</td>\r\n  //           {/* <td>{numberWithCommas(country[\"todayCases\"])}</td> */}\r\n  //           {/* <td>{numberWithCommas(country[\"todayDeaths\"])}</td> */}\r\n  //         </tr>\r\n  //       </tbody>\r\n  //     );\r\n  //   });\r\n  // };\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"\",\r\n      icon: \"\",\r\n      content: (\r\n        <>\r\n       \r\n        {/* <HandleSort /> */}\r\n       \r\n          <Row style={{ height: \"95vh\", border: \"\" }} className=\"pl-2 pr-2\">\r\n            {/* COLUMN ONE */}\r\n        \r\n            <Col className=\"subtitle\" style={{ maxWidth: \"100%\",   overflowY: \"scroll\",  \r\n                height: \"100%\", }}>\r\n \r\n              <Row\r\n                className=\"box-left mb-2 pt-4 pb-4 \"\r\n                style={{\r\n                  color: \"#ccc\",\r\n                 \r\n                  //   border: \"2px solid\",\r\n                  //   borderColor: colorCase[index],\r\n                  //   borderRadius: \"5px\",\r\n                }}\r\n              >\r\n             \r\n                <div className=\"pr-3 pl-0\" style={{}}>\r\n                  <h1 className=\"mb-0\">\r\n                    {(casesMillion[index] / 1000).toFixed(1)}\r\n                    {casesPerOneMillion[0] / 1000 <=\r\n                    casesPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: colorCase[index] }}>Total Cases/1k</h6>\r\n                  {casesMillion[index] / 1000 <= 50 ? (\r\n                  <Badge\r\n                    variant=\"success\"\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    MILD\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 100 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    LIMITED\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 150 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    MODERATE\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 350 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    SERIOUS\r\n                  </Badge>\r\n                ) : (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    EXTREME\r\n                  </Badge>\r\n                )}\r\n                </div>\r\n                <Animated animationIn=\"fadeInUp\" isVisible={true}>\r\n                  <div style={{ color: \"#fff\" }}>Today&nbsp;</div>\r\n                  <strong className=\"mb-0\">\r\n                    +\r\n                    {numberWithCommas(\r\n                      (todayCases[index] / 1000).toFixed(1) + \"k\"\r\n                    )}\r\n                  </strong>\r\n                </Animated>\r\n              \r\n              </Row>\r\n              {/* <Row\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  border: \"1px solid\",\r\n                  borderColor: \"#2a3d3d\",\r\n                  borderRadius: \"5px\",\r\n                  paddingLeft: \"10px\",\r\n                }}\r\n              >\r\n                <HorizontalBar\r\n                  height={13}\r\n                  width={100}\r\n                  options={{\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        fontSize: 12,\r\n                      },\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          display: false,\r\n                          stacked: true,\r\n                          type: \"logarithmic\",\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [region],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        // backgroundColor: \"#d61e73\",\r\n                        backgroundColor: colorActive[index],\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [activeMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n\r\n                      {\r\n                        label: \"Cases\",\r\n                        backgroundColor: colorCase[index],\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [casesMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        backgroundColor: \"teal\",\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [testsMillion[index] / 10000],\r\n                        stack: 0,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row> */}\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\"box pb-4 pt-3 px-2 mr-2\">\r\n                  <div style={{ color: \"slategrey\" }}>Mortality&nbsp;</div>\r\n                  <strong className=\"\">\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box pb-4 pt-3 px-2 mr-2\">\r\n                  <div style={{ color: \"#ff9400\" }}>Active&nbsp;</div>\r\n                  <strong className=\"\">\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n\r\n                <Col className=\"box pb-4 pt-3 px-2\">\r\n                  <div className=\"\" style={{ color: \"teal\" }}>\r\n                    Positive&nbsp;\r\n                  </div>\r\n                  <strong>\r\n                    {numberWithCommas(\r\n                      (\r\n                        (casesMillion[index] / testsMillion[index]) *\r\n                        100\r\n                      ).toFixed(2) + \"%\"\r\n                    )}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box pt-1 mt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={120}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"#ff8300\",\r\n                      },\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorCase[index],\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n              <Col className=\"box px-2 pt-4 pb-3 mr-2\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(deathsMillion[index] / 1000).toFixed(2)}\r\n                    {deathsPerOneMillion[0] / 1000 <=\r\n                    deathsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"slategrey\" }}>Deaths/1k</h6>\r\n                </Col>\r\n                <Col className=\"box px-2 pt-4 pb-3 mr-2\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(activeMillion[index] / 1000).toFixed(2)}\r\n                    {activePerOneMillion[0] / 1000 <=\r\n                    activePerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"#ff9400\" }}>Active/1k</h6>\r\n\r\n                  <h6>\r\n                    {/* {\" \"}\r\n                    {activeMillion[index] / 1000 <= 5 ? (\r\n                      <Badge\r\n                        variant=\"success\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        MILD\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 10 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        LIMITED\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 15 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        MODERATE\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 35 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        SERIOUS\r\n                      </Badge>\r\n                    ) : (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        EXTREME\r\n                      </Badge>\r\n                    )} */}\r\n                  </h6>\r\n                </Col>\r\n                <Col className=\"box px-2 pt-4 pb-3\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(testsMillion[index] / 1000).toFixed(0)}\r\n                    {testsPerOneMillion[0] / 1000 <=\r\n                    testsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"teal\" }}>Tests/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row\r\n      className={\"box mt-2 pb-1\"}\r\n\r\n      style={{\r\n        color: \"#ccc\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      //  width: \"75%\"\r\n      }}\r\n    >\r\n\r\n              <DoughnutCases\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                index={index}\r\n                colorsPie={colorsPie}\r\n                continentCountries={continentCountries}\r\n                region={region}\r\n              />\r\n            \r\n\r\n\r\n\r\n\r\n\r\n              <Row className=\"subtitle mt-2 pt-1 px-2\">\r\n           \r\n                {/* {casesMillion[index] / 1000 < 50 ? (\r\n                  <h6>&nbsp;Mild</h6>\r\n                ) : casesMillion[index] / 1000 < 100 ? (\r\n                  <h6>&nbsp;Limited</h6>\r\n                ) : casesMillion[index] / 1000 < 150 ? (\r\n                  <h6>&nbsp;Moderate</h6>\r\n                ) : casesMillion[index] / 1000 < 350 ? (\r\n                  <h6>&nbsp;Serious</h6>\r\n                ) : (\r\n                  <h6>&nbsp;Extreme</h6>\r\n                )}\r\n\r\n                <h6>&nbsp;cases and </h6> */}\r\n     \r\n                {activeMillion[index] / 1000 < 5 ? (\r\n                  <h6>&nbsp;Mild </h6>\r\n                ) : activeMillion[index] / 1000 < 10 ? (\r\n                  <h6>&nbsp;Limited </h6>\r\n                ) : activeMillion[index] / 1000 < 15 ? (\r\n                  <h6>&nbsp;Moderate </h6>\r\n                ) : activeMillion[index] / 1000 < 35 ? (\r\n                  <h6>&nbsp;Serious </h6>\r\n                ) : (\r\n                  <h6>&nbsp;Extreme </h6>\r\n                )}\r\n                <h6>&nbsp;active cases with&nbsp;</h6>\r\n\r\n                {testsMillion[index] / 1000 < 100 ? (\r\n                  <h6>very low</h6>\r\n                ) : testsMillion[index] / 1000 < 1000 ? (\r\n                  <h6>limited</h6>\r\n                ) : testsMillion[index] / 1000 < 1500 ? (\r\n                  <h6>moderate</h6>\r\n                ) : testsMillion[index] / 1000 < 3500 ? (\r\n                  <h6>high</h6>\r\n                ) : (\r\n                  <h6>very high</h6>\r\n                )}\r\n                <h6>&nbsp;testing.</h6>\r\n              </Row>\r\n              </Row>\r\n\r\n              {/* <Row className=\"subtitle mt-2 \">\r\n                <Col className=\"box py-3 px-2 mr-2\" >\r\n            \r\n                </Col>\r\n          \r\n                <Col className=\"box py-3 px-2\">\r\n                  <div style={{ color: \"teal\" }}>Tests&nbsp;</div>\r\n                  <strong className=\"mb-0\">\r\n                    {(tests[index] / population[index]).toFixed(2)}pp\r\n                  </strong>\r\n                </Col>\r\n\r\n\r\n\r\n                </Row> */}\r\n\r\n<Row id=\"bar-chart\"  >\r\n            {/* COLUMN TWO */}\r\n\r\n            <Col\r\n              className=\"mt-2\"\r\n           \r\n              style={{\r\n                // overflowY: \"scroll\",\r\n                // height: \"100%\",\r\n                maxWidth: \"100%\",\r\n                // marginRight: \"5px\",\r\n              }}\r\n            >\r\n              {/* <Form.Group\r\n                className=\"mb-3\"\r\n                controlId=\"formBasicEmail\"\r\n                value={q}\r\n                onChange={(e) => setQ(e.target.value)}\r\n              >\r\n                <Form.Control type=\"email\" placeholder=\"Search\" />\r\n              </Form.Group> */}\r\n              {/* <Button onClick={sortCountries}>Sort</Button> */}\r\n             {/* <Row className=\"subtitle box\"> <Sort continentCountries={continentCountries}/></Row> */}\r\n\r\n              <HorizontalChart\r\n                countryNames={countryNames}\r\n                activePerOneMillion={activePerOneMillion}\r\n                colorActivity={colorActivity}\r\n                casesPerOneMillion={casesPerOneMillion}\r\n                // colorCases={colorCases}\r\n                testsPerOneMillion={testsPerOneMillion}\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                testsMillion={testsMillion}\r\n                index={index}\r\n                region={region}\r\n                colorCase={colorCase}\r\n                continentCountries={continentCountries}\r\n                continentCountrys={continentCountrys}\r\n                sorted={sorted}\r\n              />\r\n\r\n              {/* <Row className=\"box subtitle px-4 pb-1 pt-2 mt-2\">\r\n                <a id={maxName}>\r\n                  {maxName}&nbsp;\r\n                  {numberWithCommas((max / 1000).toFixed(1))} &nbsp;\r\n                  <h6 style={{ color: colorCase[index] }}>\r\n                    Most Cases/1k &nbsp;\r\n                  </h6>\r\n                </a>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxActiveName}&nbsp;\r\n                {numberWithCommas((maxActive / 1000).toFixed(1))} &nbsp;\r\n                <h6 style={{ color: colorActive[index] }}>\r\n                  Most Active/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxTestsName}&nbsp;\r\n                {numberWithCommas((maxTests / 1000).toFixed(0))} &nbsp;\r\n                <h6 style={{ color: \"teal\" }}>Most Tests/1k &nbsp;</h6>\r\n              </Row> */}\r\n           \r\n            </Col>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </Row>\r\n\r\n\r\n            </Col>\r\n\r\n       \r\n\r\n          \r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"\",\r\n      // icon: <a id='check1'></a>,\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\", border: \"\" }} className=\"px-3\">\r\n            {/* COLUMN ONE */}\r\n            <Col className=\"subtitle\" style={{ maxWidth: \"50%\" }}>\r\n             \r\n              <Row\r\n                className=\"box mb-2\"\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  //   border: \"2px solid\",\r\n                  //   borderColor: colorCase[index],\r\n                  //   borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <div className=\" px-3\" style={{}}>\r\n                  <h1 className=\"mb-0\">\r\n                    {/* <CountUp\r\n                  start={(casesMillion[index] / 1000).toFixed(1) - 5}\r\n                  end={(casesMillion[index] / 1000).toFixed(1)}\r\n                  duration={0.2}\r\n                  separator=\",\"\r\n                  decimals={1}\r\n                /> */}\r\n                    {(deathsMillion[index] / 1000).toFixed(2)}\r\n                    {deathsPerOneMillion[0] / 1000 <=\r\n                    deathsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorDeath[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorDeath[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: colorDeath[index] }}>Deaths/1k</h6>\r\n                </div>\r\n              </Row>\r\n              <Row\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  border: \"1px solid\",\r\n                  borderColor: \"#2a3d3d\",\r\n                  borderRadius: \"5px\",\r\n                  paddingLeft: \"10px\",\r\n                }}\r\n              >\r\n                <HorizontalBar\r\n                  height={12}\r\n                  width={100}\r\n                  options={{\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        fontSize: 12,\r\n                      },\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          display: false,\r\n                          stacked: true,\r\n                          type: \"logarithmic\",\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [region],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Critical\",\r\n                        backgroundColor: \"#d61e73\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [criticalMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n\r\n                      {\r\n                        label: \"Deaths\",\r\n                        backgroundColor: colorDeath[index],\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [deathsMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n                      {\r\n                        label: \"Recovered\",\r\n                        backgroundColor: \"teal\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [recoveredMillion[index] / 10000],\r\n                        stack: 0,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col\r\n                  className=\"box p-1 mr-1\"\r\n                  //   style={{ border: \"2px solid #e83e8c\", borderRadius: \"5px\" }}\r\n                >\r\n                  <h4 className=\"mb-0\">\r\n                    {(criticalMillion[index] / 1).toFixed(2)}\r\n                    {criticalPerOneMillion[0] / 1 <=\r\n                    criticalPerOneMillion[5] / 1 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#e83e8c\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#e83e8c\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"#e83e8c\" }}>Critical</h6>\r\n                </Col>\r\n                <Col\r\n                  className=\"box p-1\"\r\n                  //   style={{ border: \"2px solid teal\", borderRadius: \"5px\" }}\r\n                >\r\n                  <h4 className=\"mb-0\">\r\n                    {(recoveredMillion[index] / 1000).toFixed(0)}\r\n                    {recoveredPerOneMillion[0] / 1000 <=\r\n                    recoveredPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"teal\" }}>Recovered/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <h6>\r\n                {\" \"}\r\n                {(activeMillion[index] / 1000).toFixed(2)}Active/1,000\r\n              </h6>{\" \"}\r\n              <h6>{(testsMillion[index] / 1000).toFixed(2)}Tests/1,000</h6> */}\r\n\r\n              <Row className=\"subtitle box pt-1 mt-2\">\r\n                {/* <div\r\n                className=\"pt-1 pb-1 ml-0\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Cases Trend\r\n              </div> */}\r\n                <Line\r\n                  width={160}\r\n                  height={120}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Critical\",\r\n                        data: criticalPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"#e83e8c\",\r\n                      },\r\n                      {\r\n                        label: \"Deaths\",\r\n                        data: deathsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorDeath[index],\r\n                      },\r\n                      {\r\n                        label: \"Recovered\",\r\n                        data: recoveredPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <DoughnutDeaths\r\n                deathsMillion={deathsMillion}\r\n                criticalMillion={criticalMillion}\r\n                recoveredMillion={recoveredMillion}\r\n                index={index}\r\n                colorsPie={colorsPie}\r\n                continentCountries={continentCountries}\r\n                colorActive={colorActive}\r\n              />\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\"box py-4\" xs={6}>\r\n                  <span style={{ color: \"#d61e73\" }}>Critical&nbsp;</span>\r\n                  {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n                  2.5 ? (\r\n                    <Badge\r\n                      variant=\"success\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1 }}\r\n                    >\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n                    4.5 ? (\r\n                    <Badge\r\n                      variant=\"danger\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1 }}\r\n                    >\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    {(\r\n                      (criticalMillion[index] / deathsMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box py-4 px-4\" xs={6}>\r\n                  <span style={{ color: colorDeath[index] }}>Today&nbsp;</span>\r\n                  {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    +{numberWithCommas((todayDeaths[index] / 1).toFixed(0))}\r\n                  </strong>\r\n                </Col>\r\n\r\n                <Col className=\"box py-4\" xs={6}>\r\n                  <span style={{ color: \"teal\" }}>Recovered &nbsp;</span>\r\n                  <span>\r\n                    {(recovered[index] / cases[index]) * 100 <= 100 ? (\r\n                      <Badge\r\n                        variant=\"danger\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{ zIndex: 1 }}\r\n                      >\r\n                        POOR\r\n                      </Badge>\r\n                    ) : (recovered[index] / cases[index]) * 100 >= 250 ? (\r\n                      <Badge\r\n                        variant=\"success\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{ zIndex: 1 }}\r\n                      >\r\n                        GOOD\r\n                      </Badge>\r\n                    ) : (\r\n                      \" \"\r\n                    )}\r\n                  </span>\r\n                  <strong className=\"mb-0\">\r\n                    {(recovered[index] / cases[index]).toFixed(2)}pp\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box pt-2\" style={{ color: \"teal\" }} xs={6}>\r\n                  {(recovered[index] / cases[index]).toFixed(0) <= 0.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 1.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 2.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 3.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                    </>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <div\r\n              className=\"pt-3 pb-2 ml-4\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Cases Statistics\r\n            </div> */}\r\n            </Col>\r\n\r\n            {/* COLUMN TWO */}\r\n\r\n            <Col\r\n              className=\"ml-2 \"\r\n              style={{\r\n                height: \"97%\",\r\n                overflowY: \"scroll\",\r\n\r\n                maxWidth: \"50%\",\r\n                // marginRight: \"5px\",\r\n              }}\r\n            >\r\n              <Row className=\"box subtitle px-4\">\r\n                <strong>\r\n                  {maxDeathsName}&nbsp;\r\n                  {numberWithCommas((maxDeaths / 1000).toFixed(2))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: colorDeath[index] }}>\r\n                  Most Deaths/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2\">\r\n                <strong>\r\n                  {maxCriticalName}&nbsp;\r\n                  {numberWithCommas((maxCritical / 1000).toFixed(2))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: \"#d61e73\" }}>Most Critical/1k &nbsp;</h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-3 mt-2\">\r\n                <strong>\r\n                  {maxRecoveredName}&nbsp;\r\n                  {numberWithCommas((maxRecovered / 1000).toFixed(0))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: \"teal\" }}>Most Recovered/1k &nbsp;</h6>\r\n              </Row>\r\n              <HorizontalChart\r\n                countryNames={countryNames}\r\n                criticalPerOneMillion={criticalPerOneMillion}\r\n                //   colorCritical={colorCritical}\r\n                deathsPerOneMillion={deathsPerOneMillion}\r\n                colorDeaths={colorDeaths}\r\n                recoveredPerOneMillion={recoveredPerOneMillion}\r\n                deathsMillion={deathsMillion}\r\n                criticalMillion={criticalMillion}\r\n                recoveredMillion={recoveredMillion}\r\n                index={index}\r\n                region={region}\r\n                colorCase={colorCase}\r\n                colorActivity={colorActivity}\r\n                continentCountrys={continentCountrys}\r\n                sorted={sorted}\r\n              />\r\n\r\n              {/* <Row\r\n      className={\"box mt-2\"}\r\n      style={{\r\n        color: \"#fff\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">\r\n        Country Stats / 1k\r\n      </div>\r\n\r\n      <HorizontalBar\r\n        height={countryNames.length * 40}\r\n        options={{\r\n\r\n          tooltips: {\r\n            yPadding: 10,\r\n            xPadding: 10,\r\n            xAlign: \"right\",\r\n            cornerRadius: 2,\r\n            backgroundColor: \"#212529\",\r\n\r\n            borderColor: \"turquoise\",\r\n            borderWidth: 1,\r\n            displayColors: true,\r\n            bodyFontSize: 12,\r\n\r\n            labels: {\r\n              usePointStyle: true,\r\n              labelFontColor: \"orange\",\r\n              pointColor: \"red\",\r\n            },\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          hover: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          legend: {\r\n            display: false,\r\n            position: \"bottom\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              fontSize: 12,\r\n              fontColor: \"#fff\",\r\n            },\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 10,\r\n              top: 0,\r\n              bottom: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                display: false,\r\n                type: \"logarithmic\",\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n        data={{\r\n          labels: countryNames,\r\n          datasets: [\r\n      \r\n            {\r\n              label: \"Critical\",\r\n              data: criticalPerOneMillion,\r\n              backgroundColor: \"#d61e73\",\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Deaths\",\r\n              data: deathsPerOneMillion,\r\n              backgroundColor: colorDeaths,\r\n              stack: \"0\",\r\n            },\r\n\r\n            {\r\n              label: \"Recovered\",\r\n              data: recoveredPerOneMillion,\r\n              backgroundColor: \"teal\",\r\n              stack: \"0\",\r\n            },\r\n          ],\r\n       \r\n        }}\r\n      />\r\n    </Row> */}\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      title: \"\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\", border: \"\" }} className=\"px-3\">\r\n            {/* COLUMN ONE */}\r\n            <Col className=\"subtitle\" style={{ maxWidth: \"50%\" }}>\r\n              <Row\r\n                className=\"box mb-2 pt-3 pb-3 \"\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  //   border: \"2px solid\",\r\n                  //   borderColor: colorCase[index],\r\n                  //   borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <div className=\"pr-3 pl-0\" style={{}}>\r\n                  <h1 className=\"mb-0\">\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                    {mortalityRate[0] / 1000 <= mortalityRate[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"currentcolor\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"currentcolor\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: \"currentcolor\" }}>Mortality</h6>\r\n                </div>\r\n                <Animated animationIn=\"fadeInUp\" isVisible={true}>\r\n                  <div style={{ color: colorMortality[index] }}>\r\n                    Today&nbsp;\r\n                  </div>\r\n                  <strong className=\"mb-0\">\r\n                    +\r\n                    {numberWithCommas(\r\n                      ((todayDeaths[index] / todayCases[index]) * 1000).toFixed(\r\n                        2\r\n                      ) + \"%\"\r\n                    )}\r\n                  </strong>\r\n                </Animated>\r\n                {((deathsMillion[index] / casesMillion[index]) * 100).toFixed(\r\n                  2\r\n                ) <= 0.5 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: \"#5d67a1\" }}\r\n                  >\r\n                    MILD\r\n                  </Badge>\r\n                ) : (\r\n                    (deathsMillion[index] / casesMillion[index]) *\r\n                    100\r\n                  ).toFixed(2) <= 1 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: \"#955196\" }}\r\n                  >\r\n                    LIMITED\r\n                  </Badge>\r\n                ) : (\r\n                    (deathsMillion[index] / casesMillion[index]) *\r\n                    100\r\n                  ).toFixed(2) <= 1.5 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: \"#ffa400\" }}\r\n                  >\r\n                    MODERATE\r\n                  </Badge>\r\n                ) : (\r\n                    (deathsMillion[index] / casesMillion[index]) *\r\n                    100\r\n                  ).toFixed(2) <= 2 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: \"#ff6e54\" }}\r\n                  >\r\n                    SERIOUS\r\n                  </Badge>\r\n                ) : (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: \"#dd5182\" }}\r\n                  >\r\n                    EXTREME\r\n                  </Badge>\r\n                )}\r\n              </Row>\r\n\r\n              <Row\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  border: \"1px solid\",\r\n                  borderColor: \"#2a3d3d\",\r\n                  borderRadius: \"5px\",\r\n                  paddingLeft: \"10px\",\r\n                }}\r\n              >\r\n                <HorizontalBar\r\n                  height={13}\r\n                  width={100}\r\n                  options={{\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        fontSize: 12,\r\n                      },\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          display: false,\r\n                          stacked: true,\r\n                          type: \"logarithmic\",\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [region],\r\n                    datasets: [\r\n                      // {\r\n                      //   label: \"Active\",\r\n                      //   // backgroundColor: \"#d61e73\",\r\n                      //   backgroundColor: colorActive[index],\r\n                      //   borderColor: \"#212529\",\r\n                      //   borderWidth: 1,\r\n                      //   data: [activeMillion[index] / 1000],\r\n                      //   stack: 0,\r\n                      // },\r\n\r\n                      {\r\n                        label: \"Mortality\",\r\n                        backgroundColor: colorMortality[index],\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: mortalityRate[index],\r\n                        stack: 0,\r\n                      },\r\n                      // {\r\n                      //   label: \"Tests\",\r\n                      //   backgroundColor: \"teal\",\r\n                      //   borderColor: \"#212529\",\r\n                      //   borderWidth: 1,\r\n                      //   data: [testsMillion[index] / 10000],\r\n                      //   stack: 0,\r\n                      // },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\"box pb-4 pt-3 px-2 mr-2\">\r\n                  <div style={{ color: colorActive[index] }}>Active&nbsp;</div>\r\n                  <strong className=\"\">\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n\r\n                <Col className=\"box pb-4 pt-3 px-2\">\r\n                  <div className=\"\" style={{ color: \"teal\" }}>\r\n                    Positive&nbsp;\r\n                  </div>\r\n                  <strong>\r\n                    {numberWithCommas(\r\n                      (\r\n                        (casesMillion[index] / testsMillion[index]) *\r\n                        100\r\n                      ).toFixed(2) + \"%\"\r\n                    )}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box pt-1 mt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={120}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorActive[index],\r\n                      },\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorCase[index],\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col className=\"box px-2 pt-4 pb-3 mr-2\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(activeMillion[index] / 1000).toFixed(2)}\r\n                    {activePerOneMillion[0] / 1000 <=\r\n                    activePerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorActive[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorActive[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: colorActive[index] }}>Active/1k</h6>\r\n\r\n                  <h6>\r\n                    {\" \"}\r\n                    {activeMillion[index] / 1000 <= 5 ? (\r\n                      <Badge\r\n                        variant=\"success\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        MILD\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 10 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        LIMITED\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 15 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        MODERATE\r\n                      </Badge>\r\n                    ) : activeMillion[index] / 1000 <= 35 ? (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        SERIOUS\r\n                      </Badge>\r\n                    ) : (\r\n                      <Badge\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{\r\n                          zIndex: 1,\r\n                          backgroundColor: colorActive[index],\r\n                        }}\r\n                      >\r\n                        EXTREME\r\n                      </Badge>\r\n                    )}\r\n                  </h6>\r\n                </Col>\r\n                <Col className=\"box px-2 pt-4 pb-3\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(testsMillion[index] / 1000).toFixed(0)}\r\n                    {testsPerOneMillion[0] / 1000 <=\r\n                    testsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"teal\" }}>Tests/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n              <DoughnutCases\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                index={index}\r\n                colorsPie={colorsPie}\r\n                continentCountries={continentCountries}\r\n              />\r\n\r\n              <Row className=\"box subtitle mt-2 pt-1\">\r\n                {casesMillion[index] / 1000 < 50 ? (\r\n                  <h6>&nbsp;Mild</h6>\r\n                ) : casesMillion[index] / 1000 < 100 ? (\r\n                  <h6>&nbsp;Limited</h6>\r\n                ) : casesMillion[index] / 1000 < 150 ? (\r\n                  <h6>&nbsp;Moderate</h6>\r\n                ) : casesMillion[index] / 1000 < 350 ? (\r\n                  <h6>&nbsp;Serious</h6>\r\n                ) : (\r\n                  <h6>&nbsp;Extreme</h6>\r\n                )}\r\n\r\n                <h6>&nbsp;cases and </h6>\r\n\r\n                {activeMillion[index] / 1000 < 5 ? (\r\n                  <h6>&nbsp;mild </h6>\r\n                ) : activeMillion[index] / 1000 < 10 ? (\r\n                  <h6>&nbsp;limited </h6>\r\n                ) : activeMillion[index] / 1000 < 15 ? (\r\n                  <h6>&nbsp;moderate </h6>\r\n                ) : activeMillion[index] / 1000 < 35 ? (\r\n                  <h6>&nbsp;serious </h6>\r\n                ) : (\r\n                  <h6>&nbsp;extreme </h6>\r\n                )}\r\n                <h6>&nbsp;activity with&nbsp;</h6>\r\n\r\n                {testsMillion[index] / 1000 < 100 ? (\r\n                  <h6>very low</h6>\r\n                ) : testsMillion[index] / 1000 < 1000 ? (\r\n                  <h6>limited</h6>\r\n                ) : testsMillion[index] / 1000 < 1500 ? (\r\n                  <h6>moderate</h6>\r\n                ) : testsMillion[index] / 1000 < 3500 ? (\r\n                  <h6>high</h6>\r\n                ) : (\r\n                  <h6>very high</h6>\r\n                )}\r\n                <h6>&nbsp;testing.</h6>\r\n              </Row>\r\n            </Col>\r\n\r\n            {/* COLUMN TWO */}\r\n\r\n            <Col\r\n              className=\"ml-2 \"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n                maxWidth: \"50%\",\r\n                // marginRight: \"5px\",\r\n              }}\r\n            >\r\n              <Row className=\"box subtitle px-4 pb-1 pt-2\">\r\n                <a id={maxName}>\r\n                  {maxName}&nbsp;\r\n                  {numberWithCommas((max / 1000).toFixed(1))} &nbsp;\r\n                  <h6 style={{ color: colorCase[index] }}>\r\n                    Most Cases/1k &nbsp;\r\n                  </h6>\r\n                </a>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxActiveName}&nbsp;\r\n                {numberWithCommas((maxActive / 1000).toFixed(1))} &nbsp;\r\n                <h6 style={{ color: colorActive[index] }}>\r\n                  Most Active/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n                {maxTestsName}&nbsp;\r\n                {numberWithCommas((maxTests / 1000).toFixed(0))} &nbsp;\r\n                <h6 style={{ color: \"teal\" }}>Most Tests/1k &nbsp;</h6>\r\n              </Row>\r\n              <HorizontalChart\r\n                countryNames={countryNames}\r\n                //   activePerOneMillion={activePerOneMillion}\r\n                //   colorActivity={colorActivity}\r\n                //   casesPerOneMillion={casesPerOneMillion}\r\n                //   colorCases={colorCases}\r\n                //   testsPerOneMillion={testsPerOneMillion}\r\n                mortalityRate={mortalityRate}\r\n                //   casesMillion={casesMillion}\r\n                //   activeMillion={activeMillion}\r\n                //   testsMillion={testsMillion}\r\n                index={index}\r\n                region={region}\r\n           \r\n                //   colorCase={colorCase}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n    // {\r\n    //   id: 3,\r\n    //   title: \"Mortality\",\r\n    //   // icon: <a id='check1'></a>,\r\n    //   content: (\r\n    //     <>\r\n    //       <Row style={{ height: \"86vh\" }}>\r\n    //         <Col className=\"mr-3 mt-2\">\r\n    //           <Row className=\"box p-2 ml-1 mb-0\" style={{ color: \"#ccc\" }}>\r\n    //             <h1 className=\"mb-0\">\r\n    //               {((deathsMillion[index] / casesMillion[index]) * 100).toFixed(\r\n    //                 2\r\n    //               )}\r\n    //               {mortalityRate[0] / 1000 <= mortalityRate[5] / 1000 ? (\r\n    //                 <i\r\n    //                   style={{ fontSize: \"0.7em\", color: \"green\" }}\r\n    //                   className=\"fa fa-arrow-up\"\r\n    //                 ></i>\r\n    //               ) : (\r\n    //                 <i\r\n    //                   style={{ fontSize: \"0.7em\", color: \"red\" }}\r\n    //                   className=\"fa fa-arrow-down\"\r\n    //                 ></i>\r\n    //               )}\r\n    //             </h1>\r\n\r\n    //             <h5>Deaths / Cases</h5>\r\n    //           </Row>\r\n\r\n    //           <Row\r\n    //             className={\"box ml-1 mt-3 pb-2\"}\r\n    //             style={{\r\n    //               color: \"#ccc\",\r\n    //               display: \"flex\",\r\n    //               justifyContent: \"center\",\r\n    //               alignItems: \"center\",\r\n    //             }}\r\n    //           >\r\n    //             <div\r\n    //               className=\"pt-5\"\r\n    //               style={{\r\n    //                 position: \"absolute\",\r\n    //                 display: \"flex\",\r\n    //                 justifyContent: \"center\",\r\n    //                 alignItems: \"center\",\r\n    //                 color: \"grey\",\r\n    //               }}\r\n    //             >\r\n    //               {deathsMillion[index] / casesMillion[index] < 0.005 ? (\r\n    //                 <h6>Mild</h6>\r\n    //               ) : deathsMillion[index] / casesMillion[index] < 0.001 ? (\r\n    //                 <h6>Contained</h6>\r\n    //               ) : deathsMillion[index] / casesMillion[index] < 0.015 ? (\r\n    //                 <h6>Moderate</h6>\r\n    //               ) : deathsMillion[index] / casesMillion[index] < 0.02 ? (\r\n    //                 <h6>Serious</h6>\r\n    //               ) : (\r\n    //                 <h6>Extreme</h6>\r\n    //               )}\r\n    //             </div>\r\n\r\n    //             <div\r\n    //               className=\"py-2 \"\r\n    //               style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //             >\r\n    //               Country Analysis\r\n    //             </div>\r\n\r\n    //             {/* <Doughnut\r\n    //               width={170}\r\n    //               options={{\r\n    //                 elements: {\r\n    //                   arc: {\r\n    //                     borderWidth: 0,\r\n    //                   },\r\n    //                 },\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\r\n    //                   \"Lowest Mortality\",\r\n    //                   \"Lower Mortality\",\r\n    //                   \"Average Mortality\",\r\n    //                   \"Higher Mortality\",\r\n    //                   \"Highest Mortality\",\r\n    //                 ],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     data: [\r\n    //                       lowest.length,\r\n    //                       lower.length,\r\n    //                       average.length,\r\n    //                       higher.length,\r\n    //                       highest.length,\r\n    //                     ],\r\n    //                     backgroundColor: colorsPie,\r\n    //                   },\r\n    //                 ],\r\n    //               }}\r\n    //             ></Doughnut> */}\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle box pt-1 ml-1 mt-3\">\r\n    //             <div\r\n    //               className=\"pt-1 pb-1 ml-0\"\r\n    //               style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //             >\r\n    //               Mortality Trend\r\n    //             </div>\r\n    //             <Line\r\n    //               width={160}\r\n    //               height={110}\r\n    //               options={{\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"bottom\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"Cases / 1000\",\r\n    //                     data: mortalityRate,\r\n    //                     fill: true,\r\n    //                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                     borderColor: \"rgba(75,192,192,1)\",\r\n    //                   },\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n    //           </Row>\r\n\r\n    //           <div\r\n    //             className=\"pt-3 pb-3 ml-4\"\r\n    //             style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //           >\r\n    //             Mortality Statistics\r\n    //           </div>\r\n    //           <Row\r\n    //             className=\"subtitle ml-1\"\r\n    //             style={{ border: \"1px solid #2a3d3d\", borderRadius: \"5px\" }}\r\n    //           >\r\n    //             <Col className=\"px-2 pt-3 pb-4 mr-1\">\r\n    //               Recovery\r\n    //               {(activeMillion[index] / casesMillion[index]) * 100 <= 2.5 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (activeMillion[index] / casesMillion[index]) * 100 >=\r\n    //                 4.5 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">\r\n    //                 {(\r\n    //                   (recoveredMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </strong>\r\n    //             </Col>\r\n    //             <Col className=\"px-3 pt-3 pb-1 ml-1\">\r\n    //               Today\r\n    //               {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n    //               0.005 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n    //                 0.015 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">\r\n    //                 +{(todayRecovered[index] / 1000).toFixed(0) + \"k\"}\r\n    //               </strong>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <Row className=\"subtitle ml-0\">\r\n    //             <Col className=\"box p-2  mr-1 mt-3\">\r\n    //               {/* Deaths\r\n    //               {(deathsMillion[index] / casesMillion[index]) * 100 <= 1.0 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (deathsMillion[index] / casesMillion[index]) * 100 >=\r\n    //                 2.0 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (deathsMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div> */}\r\n    //               <Doughnut\r\n    //                 width={170}\r\n    //                 options={{\r\n    //                   elements: {\r\n    //                     arc: {\r\n    //                       borderWidth: 0,\r\n    //                     },\r\n    //                   },\r\n    //                   legend: {\r\n    //                     display: false,\r\n    //                     position: \"\",\r\n    //                   },\r\n    //                 }}\r\n    //                 data={{\r\n    //                   labels: [\"Tested\", \"Untested\"],\r\n    //                   datasets: [\r\n    //                     {\r\n    //                       data: [\r\n    //                         tests[index] / population[index],\r\n    //                         1 - tests[index] / population[index],\r\n    //                       ],\r\n    //                       backgroundColor: colorCases,\r\n    //                     },\r\n    //                   ],\r\n    //                 }}\r\n    //               ></Doughnut>\r\n    //             </Col>\r\n    //             <Col className=\"box px-4 py-3 ml-1 mt-3\">\r\n    //               Vac'd\r\n    //               {(tests[index] / population[index]) * 100 <= 100 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <strong className=\"mb-0\">\r\n    //                 {(tests[index] / population[index]).toFixed(2) * 100}%\r\n    //               </strong>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <Row className=\" ml-0\"></Row>\r\n    //         </Col>\r\n\r\n    //         {/* COLUMN TWO */}\r\n    //         <Col\r\n    //           className=\"\"\r\n    //           style={{\r\n    //             height: \"100%\",\r\n    //             overflowY: \"scroll\",\r\n    //           }}\r\n    //         >\r\n    //           <Row\r\n    //             className={\"box mr-0 mt-2\"}\r\n    //             style={{\r\n    //               color: \"#fff\",\r\n    //               display: \"flex\",\r\n    //               justifyContent: \"center\",\r\n    //               alignItems: \"center\",\r\n    //             }}\r\n    //           >\r\n    //             <div\r\n    //               style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //               className=\"pt-2\"\r\n    //             >\r\n    //               Mortality Per Country\r\n    //             </div>\r\n\r\n    //             <HorizontalBar\r\n    //               height={countryNames.length * 50}\r\n\r\n    //               options={{\r\n    //                 onClick: function (evt, element) {\r\n    //                   if (element.length > 0) {\r\n    //                     console.log(element, element[0]._datasetIndex);\r\n    //                   }\r\n    //                 },\r\n    //                 maintainAspectRatio: true,\r\n    //                 hover: {\r\n    //                   mode: \"index\",\r\n    //                   intersect: false,\r\n    //                 },\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"\",\r\n    //                 },\r\n    //                 layout: {\r\n    //                   padding: {\r\n    //                     left: 20,\r\n    //                     right: 0,\r\n    //                     top: 0,\r\n    //                     bottom: 0,\r\n    //                   },\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: countryNames,\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"Mortality/1000\",\r\n    //                     data: mortalityRate,\r\n    //                     backgroundColor: backgroundcolor,\r\n    //                   },\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n\r\n    //             {countryNames.length < 15 && (\r\n    //               <>\r\n    //                 <div\r\n    //                   style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //                   className=\"pt-2 pb-3\"\r\n    //                 >\r\n    //                   Recovered Per Country\r\n    //                 </div>\r\n    //                 <div className=\"pt-2 pb-2\"></div>\r\n    //                 <HorizontalBar\r\n    //                   height={countryNames.length * 50}\r\n    //                   options={{\r\n    //                     maintainAspectRatio: true,\r\n    //                     legend: {\r\n    //                       display: false,\r\n    //                       position: \"\",\r\n    //                     },\r\n    //                     layout: {\r\n    //                       padding: {\r\n    //                         left: 20,\r\n    //                         right: 0,\r\n    //                         top: 0,\r\n    //                         bottom: 0,\r\n    //                       },\r\n    //                     },\r\n    //                   }}\r\n    //                   data={{\r\n    //                     labels: countryNames,\r\n    //                     datasets: [\r\n    //                       {\r\n    //                         label: \"Active/1000\",\r\n    //                         data: recoveredPerOneMillion,\r\n    //                         backgroundColor: colorActive,\r\n    //                       },\r\n    //                     ],\r\n    //                   }}\r\n    //                 />\r\n    //               </>\r\n    //             )}\r\n    //           </Row>\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n\r\n    // {\r\n    //   id: 4,\r\n    //   title: \"Mortality\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row style={{ height: \"88vh\" }}>\r\n    //         <Col className=\"px-0 ml-3\">\r\n    //           <Row className=\"box p-2 my-2 mr-2 ml-1\" style={{ color: \"#ddd\" }}>\r\n    //             <h1>{mortalityRate[index]}%</h1>\r\n\r\n    //             <h6>Case Mortality</h6>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle px-3 pt-2\">\r\n    //             <Line\r\n    //               width={160}\r\n    //               height={100}\r\n    //               options={{\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"bottom\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"First dataset\",\r\n    //                     data: mortalityRate,\r\n    //                     fill: true,\r\n    //                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                     borderColor: \"rgba(75,192,192,1)\",\r\n    //                   },\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n    //           </Row>\r\n    //           <div\r\n    //             className=\"py-3 ml-4\"\r\n    //             style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //           >\r\n    //             Statistics\r\n    //           </div>\r\n    //           <Row className=\"subtitle ml-0 mr-2\">\r\n    //             <Col className=\"box p-2 py-4 mr-1\">\r\n    //               Active\r\n    //               {(activeMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               2.5 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (activeMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 4.5 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (activeMillion[index] / deathsMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //             <Col className=\"box p-2 py-4 ml-1\">\r\n    //               Critical\r\n    //               {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               0.005 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 0.015 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (criticalMillion[index] / deathsMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <Row className=\"subtitle ml-0 mr-2\">\r\n    //             <Col className=\"box p-2 py-4 mr-1 mt-3\">\r\n    //               Deaths\r\n    //               {(deathsMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               1.0 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (deathsMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 2.0 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (deathsMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //             <Col className=\"box p-2 py-0 ml-1 mt-3\">\r\n    //               {/* Tested\r\n    //               {(tests[index] / population[index]) * 100 <= 100 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   POOR\r\n    //                 </Badge>\r\n    //               ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   GOOD\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(tests[index] / population[index]).toFixed(1) * 100}%\r\n    //               </div> */}\r\n    //               <Doughnut\r\n    //                 width={170}\r\n    //                 options={{\r\n    //                   elements: {\r\n    //                     arc: {\r\n    //                       borderWidth: 0,\r\n    //                     },\r\n    //                   },\r\n    //                   legend: {\r\n    //                     display: false,\r\n    //                     position: \"\",\r\n    //                   },\r\n    //                 }}\r\n    //                 data={{\r\n    //                   labels: [\"Tested\", \"Untested\"],\r\n    //                   datasets: [\r\n    //                     {\r\n    //                       data: [testsMillion[index], 1000000],\r\n    //                       backgroundColor: colorsPie,\r\n    //                     },\r\n    //                   ],\r\n    //                 }}\r\n    //               ></Doughnut>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n    //             Mortality Analysis\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={170}\r\n    //             options={{\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Deaths\",\r\n    //                 \"Lower Deaths\",\r\n    //                 \"Average Deaths\",\r\n    //                 \"Higher Deaths\",\r\n    //                 \"Highest Deaths\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     mild.length,\r\n    //                     contained.length,\r\n    //                     moderate.length,\r\n    //                     serious.length,\r\n    //                     extreme.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //           <div className=\"py-3\"></div>\r\n    //         </Col>\r\n\r\n    //         <Col\r\n    //           className=\"box  mb-5 mt-2 pr-3\"\r\n    //           style={{ height: \"100%\", overflowY: \"scroll\" }}\r\n    //         >\r\n    //           <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-0\">\r\n    //             Mortality Per Country\r\n    //           </div>\r\n    //           <HorizontalBar\r\n    //             height={countryNames.length * 40}\r\n    //             options={{\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: countryNames,\r\n    //               datasets: [\r\n    //                 {\r\n    //                   label: \"Mortality/1000\",\r\n    //                   data: mortalityRate,\r\n    //                   backgroundColor: backgroundcolor,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n\r\n    // {\r\n    //     id: 5,\r\n    //     title: 'Tests',\r\n    //     icon: 'tabitem__icon fa fa-network-wired',\r\n    //     content: <>\r\n    //         <Row>\r\n    //             <Col className=\"pr-0\">\r\n    //                 <HorizontalBar\r\n    //                     height={830}\r\n    //                     width={200}\r\n    //                     options={{\r\n    //                         legend: {\r\n    //                             display: false,\r\n    //                             position: ''\r\n    //                         },\r\n    //                         // title: {\r\n    //                         //   display: true,\r\n    //                         //   text: 'Mortality in ' + region,\r\n    //                         //   fontSize: 13,\r\n\r\n    //                         // },\r\n    //                     }}\r\n    //                     data={{\r\n    //                         labels: countryNames,\r\n    //                         datasets: [\r\n    //                             {\r\n    //                                 label: \"Cases/1000\",\r\n    //                                 data: casesPerOneMillion,\r\n    //                                 backgroundColor: colorCases,\r\n    //                             }\r\n    //                         ]\r\n    //                     }}\r\n    //                 />\r\n    //             </Col>\r\n    //             <Col className=\"px-0\">\r\n\r\n    //                 {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n    //                 {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n    //                 <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n    //                     <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n    //                     <h5 >/1000 Tests</h5>\r\n    //                 </Row>\r\n\r\n    //                 {/* </Row> */}\r\n    //                 <Row className=\"subtitle px-3 pt-2\">\r\n    //                     <Line\r\n    //                         width={160}\r\n    //                         height={100}\r\n    //                         options={{\r\n    //                             // title: {\r\n    //                             //     display: true,\r\n    //                             //     text: 'Trends in ' + region,\r\n    //                             //     fontSize: 13,\r\n    //                             //     postion: 'bottom'\r\n    //                             // },\r\n    //                             legend: {\r\n    //                                 display: false,\r\n    //                                 position: 'bottom'\r\n    //                             }\r\n    //                         }}\r\n    //                         data={{\r\n    //                             labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                             datasets: [\r\n    //                                 {\r\n    //                                     label: \"First dataset\",\r\n    //                                     data: casesPerOneMillion,\r\n    //                                     fill: true,\r\n    //                                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                                     borderColor: \"rgba(75,192,192,1)\"\r\n    //                                 },\r\n    //                                 // {\r\n    //                                 //   label: \"Second dataset\",\r\n    //                                 //   data: [33, 25, 35, 51, 54, 76],\r\n    //                                 //   fill: false,\r\n    //                                 //   borderColor: \"#742774\"\r\n    //                                 // }\r\n    //                             ]\r\n    //                         }}\r\n    //                     />\r\n    //                 </Row>\r\n    //                 <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n    //                 <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n    //                 </Row>\r\n\r\n    //                 <Row className=\"subtitle m-1\" >\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n    //                 </Row>\r\n    //                 <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n    //                 <Doughnut\r\n    //                     width={170}\r\n    //                     options={{\r\n    //                         // maintainAspectRatio: true,\r\n    //                         // title: {\r\n    //                         //     display: true,\r\n    //                         //     text: 'Countries in ' + region,\r\n    //                         //     fontSize: 13\r\n    //                         // },\r\n    //                         elements: {\r\n    //                             arc: {\r\n    //                                 borderWidth: 0\r\n    //                             }\r\n    //                         },\r\n    //                         legend: {\r\n    //                             display: false,\r\n    //                             position: ''\r\n    //                         },\r\n    //                     }}\r\n    //                     data={{\r\n    //                         labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n    //                         datasets: [\r\n    //                             {\r\n    //                                 data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n    //                                 backgroundColor: colorsPie,\r\n    //                             }\r\n    //                         ]\r\n    //                     }}\r\n    //                 />\r\n    //             </Col>\r\n    //         </Row>\r\n    //     </>\r\n    //     ,\r\n    // },\r\n  ];\r\n\r\n  const TabsMenu = () => {\r\n    // function usePrevious(value) {\r\n    //   const ref = useRef();\r\n    //   useEffect(() => {\r\n    //     ref.current = value; //assign the value of ref to the argument\r\n    //   }, [value]); //this code will run when the value of 'value' changes\r\n    //   return ref.current; //in the end, return the current ref value.\r\n    // }\r\n\r\n    const [tab, setTab] = useState(1);\r\n    // const prevCount = usePrevious(active);\r\n\r\n    const TabItem = ({\r\n      icon = \"\",\r\n      title = \"\",\r\n\r\n      onItemClicked = () =>\r\n        console.error(\"You passed no action to the component\"),\r\n      isActive = false,\r\n    }) => {\r\n      return (\r\n        <div\r\n          className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n          onClick={onItemClicked}\r\n        >\r\n          <p style={{ display: \"flex\" }} className=\"tabitem__title\">\r\n            {title}\r\n            {icon}{\" \"}\r\n          </p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      // <Row className=\"pl-3 pr-1\">\r\n      <>\r\n        <div className=\"tabs\" >\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItem\r\n              key={id}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setTab(id)}\r\n              isActive={tab === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return tab === id ? content : \"\";\r\n          })}\r\n        </div>\r\n        </>\r\n      // </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={open ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\">\r\n          <Container>\r\n            {/* <div className={!open ? \"hidden\" : \"visible\"}> */}\r\n            <Row className=\"title mt-1\">\r\n              <Col xs=\"auto\" className=\"pb-1 pl-3 pr-0\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                  className=\"\"\r\n                >\r\n                  {\" \"}\r\n                  {region}&nbsp; \r\n                  {/* <i className=\"fa fa-bar-chart ml-6 mb-2 mild\"></i> */}\r\n       \r\n        <Button\r\n               style={{}}\r\n          className=\"button close mt-2 mb-1 \"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5> <i className=\"fa fa-filter\"></i></h5>\r\n        </Button>\r\n           {/* <Button\r\n               style={{}}\r\n          className=\"button close mt-2 mb-1 \"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5><a href=\"bar-chart\"> <i className=\"fa fa-bar-chart\"></i></a></h5>\r\n        </Button> */}\r\n\r\n                </Animated>\r\n              </Col>\r\n              \r\n\r\n              <Col className=\" pr-2 pl-0\">\r\n                \r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  \r\n                  <Button\r\n                    // onClick={toggleAsia}\r\n                    onClick={handleClose}\r\n                    // size=\"lg\"\r\n                    variant=\"outline-info\"\r\n                    // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                    className=\"close button mt-2\"\r\n                  >\r\n                      <h5> <i className=\"fa fa-close\"></i></h5>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            {/* <Button id='asia'>click</Button> */}\r\n          \r\n            <TabsMenu\r\n              countries={countries}\r\n              key={index}\r\n              index={index}\r\n              region={region}\r\n              casesMillion={casesMillion}\r\n              activeMillion={activeMillion}\r\n              criticalMillion={criticalMillion}\r\n              deathsMillion={deathsMillion}\r\n              tests={tests}\r\n              tabItems={tabItems}\r\n            />\r\n            {/* </div> */}\r\n        \r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\r\n\r\n \"#6a5dfc\",\r\n  \"#a13ed5\",\r\n  \"#ca32ad\",\r\n  \"#e72585\",\r\n  \"#ff125e\",\r\n  // \"rgb(212, 23, 83)\",\r\n  // \"rgb(45, 182, 130)\",\r\n];\r\n\r\nlet colorsSpec = [\"#0c99a0\", \" #0095d1\", \"#6880e6\", \" #d451bd\", \"  #ff1d5e\"];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map2 from \"./components/Map2\";\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport \"./App.css\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\nconst initialState = {\r\n  global: false,\r\n  open: false,\r\n  region: \"\",\r\n  index: \"\",\r\n};\r\n\r\nconst App = () => {\r\n  //Fetch Continents Data\r\n  const [globaldata, setGlobal] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(GLOBAL_URL);\r\n        const globaldata = await result.json();\r\n        setGlobal([globaldata]);\r\n        // console.log(globaldata, \"globalDATA\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  //Map Continents Data\r\n  const getGlobal = (key) => {\r\n    return globaldata.map((data) => data[key]);\r\n  };\r\n\r\n  const globalCases = getGlobal(\"casesPerOneMillion\");\r\n  const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n  const globalActive = getGlobal(\"activePerOneMillion\");\r\n  const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n  const globalTests = getGlobal(\"testsPerOneMillion\");\r\n  const globalRecovered = getGlobal(\"recoveredPerOneMillion\");\r\n  // console.log(globalCases, \"globalCases\");\r\n  const populationGlobal = getGlobal(\"population\");\r\n  const testsGlobal = getGlobal(\"tests\");\r\n  const todayGlobalCases = getGlobal(\"todayCases\");\r\n  const todayGlobalDeaths = getGlobal(\"todayDeaths\");\r\n\r\n  //Fetch Continents Data\r\n  const [continents, setContinents] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        // console.log(continents, 'continents')\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n  //Map Continents Data\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n  const todayCases = getContinents(\"todayCases\");\r\n  const todayDeaths = getContinents(\"todayDeaths\");\r\n  const todayRecovered = getContinents(\"todayRecovered\");\r\n\r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n  const recoveredMillion = getContinents(\"recoveredPerOneMillion\");\r\n\r\n  const cases = getContinents(\"cases\");\r\n  const active = getContinents(\"active\");\r\n  const critical = getContinents(\"critical\");\r\n  const deaths = getContinents(\"deaths\");\r\n  const tests = getContinents(\"tests\");\r\n  const recovered = getContinents(\"recovered\");\r\n\r\n  const continentNames = getContinents(\"continent\");\r\n\r\n  // console.log(continentNames, \"continentNames\");\r\n\r\n  const mortality = deaths / cases;\r\n\r\n  //Fetch Countries Data\r\n  const [countries, setCountries] = useState([]);\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n      \r\n        const countries = await res.json();\r\n        // console.log({countries}, 'res')\r\n        setCountries([\r\n          ...countries.filter((country) => country.country.length <= 12),\r\n        ]);\r\n        // console.log(countries, 'countries')\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country));\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n  //Map Country Data\r\n  const getCountries = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n  const cont = { countries }\r\n  // console.log(cont, 'cont')\r\n\r\n  // const populationCountries = getCountries(\"population\");\r\n\r\n  const [state, setState] = useState([initialState]);\r\n\r\n  const [zoom, setZoom ] = useState([3])\r\n  const [center, setCenter ] = useState([90, 20])\r\n\r\n  const toggle = ({ region, index }) => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: region,\r\n      index: index,\r\n      global: false,\r\n    });\r\n  };\r\n\r\n  const toggleAsia = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Asia\",\r\n      index: 1,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleOceania = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Australia-Oceania\",\r\n      index: 4,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleEurope = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Europe\",\r\n      index: 2,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleAfrica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Africa\",\r\n      index: 5,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleSouthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"South America\",\r\n      index: 3,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleNorthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"North America\",\r\n      index: 0,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleGlobal = () => {\r\n    setState({\r\n      ...initialState,\r\n      global: true,\r\n      region: \"Global\",\r\n      index: 6,\r\n    });\r\n  };\r\n\r\n  function handleClose() {\r\n    setState(!state);\r\n  }\r\n\r\n  const handleZoom = () => {\r\n    setZoom({\r\n     zoom: 6,\r\n    });\r\n  }\r\n\r\n  // const Places = () => {\r\n  //   return (\r\n  //   <div style={{position: \"absolute\", zIndex: 10 }}>\r\n  //     {countries.map((country, index) => (\r\n  //      <div><Button size=\"sm\" key={index} id={country.country}>{country.country}</Button><br/></div>\r\n  //   ))}\r\n  //   </div>\r\n  //   );\r\n  \r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      <ContinentButtons\r\n        toggleAsia={toggleAsia}\r\n        toggleEurope={toggleEurope}\r\n        toggle={toggle}\r\n        toggleGlobal={toggleGlobal}\r\n        toggleAfrica={toggleAfrica}\r\n        toggleSouthAmerica={toggleSouthAmerica}\r\n        toggleNorthAmerica={toggleNorthAmerica}\r\n        toggleOceania={toggleOceania}\r\n      />\r\n      {/* <Places /> */}\r\n\r\n      <div className=\"sidebar\">\r\n        <Menu\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          open={state.open}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          casesMillion={casesMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          deathsMillion={deathsMillion}\r\n          testsMillion={testsMillion}\r\n          recoveredMillion={recoveredMillion}\r\n          cases={cases}\r\n          tests={tests}\r\n          deaths={deaths}\r\n          critical={critical}\r\n          active={active}\r\n          recovered={recovered}\r\n          todayCases={todayCases}\r\n          todayDeaths={todayDeaths}\r\n          todayRecovered={todayRecovered}\r\n          toggleGlobal={toggleGlobal}\r\n        />\r\n        <GlobalMenu\r\n          state={state.global}\r\n          toggleGlobal={toggleGlobal}\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          global={state.global}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          continentNames={continentNames}\r\n          tests={tests}\r\n          globalCases={globalCases}\r\n          globalDeaths={globalDeaths}\r\n          globalActive={globalActive}\r\n          globalCritical={globalCritical}\r\n          globalTests={globalTests}\r\n          globalRecovered={globalRecovered}\r\n          casesMillion={casesMillion}\r\n          deathsMillion={deathsMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          testsMillion={testsMillion}\r\n          recoveredMillion={recoveredMillion}\r\n          populationGlobal={populationGlobal}\r\n          testsG={testsGlobal}\r\n          todayGlobalCases={todayGlobalCases}\r\n          todayGlobalDeaths={todayGlobalDeaths}\r\n        />\r\n      </div>\r\n   \r\n\r\n      <Map2\r\n        countries={countries}\r\n        region={state.region}\r\n        zoom={zoom}\r\n        center={center}\r\n        handleZoom={handleZoom}\r\n        setCenter={setCenter}\r\n        cont={cont}\r\n    \r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=180\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import App2 from './App2';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    {/* <App2/> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}