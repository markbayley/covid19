{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map.js","components/LineGraph.js","components/GlobalMenu.js","components/DoughnutCases.js","components/DoughnutDeaths.js","components/HorizontalChart.js","components/Menu.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","width","position","background","zIndex","opacity","display","flexDirection","justifyContent","alignItems","id","className","color","href","marginTop","marginBottom","backgroundColor","Button","onClick","variant","lineHeight","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","countries","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","mort","useEffect","createDonutChart","props","offsets","counts","deaths1","deaths2","deaths3","deaths4","deaths5","counts2","cases1","cases2","cases3","cases4","cases5","total","count","push","total2","count2","fontSize","r0","Math","round","w","fontSize2","r2","w2","html","i","length","donutSegment","colors","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","average","reduce","next","min","item","max","averageD","minD","maxD","console","log","merge","key","population","cas","m","Map","container","current","center","zoom","mr1","mr2","mr3","mr4","mr5","colors2","pulsingDot","Uint8Array","size","onAdd","canvas","this","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","fillStyle","fill","getImageData","triggerRepaint","on","addImage","pixelRatio","addSource","features","addLayer","source","layout","cluster","clusterRadius","clusterProperties","filter","paint","visibility","markers","markersOnScreen","isSourceLoaded","newMarkers","querySourceFeatures","feature","coords","cluster_id","marker","Marker","element","setLngLat","addTo","remove","updateMarkers","e","flyTo","getLayer","getElementById","link","textContent","onclick","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","appendChild","addControl","GeolocateControl","fitBoundsOptions","maxZoom","once","lastId","popup","Popup","getCanvas","cursor","slice","abs","lngLat","lng","colorCase","statusCase","classText","colorDeath","statusDeath","classText2","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","toLowerCase","provinceHTML","mortalityRate","toFixed","HTML","Boolean","setHTML","ctx","Chart","options","elements","borderColor","borderWidth","responsive","maintainAspectRatio","legend","title","text","animation","animateScale","animateRotate","tooltips","cornerRadius","displayColors","bodyFontSize","labels","usePointStyle","callbacks","label","datasets","datasetIndex","undefined","addEventListener","essential","ref","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","y","LineGraph","useState","setData","a","response","fetchData","scales","yAxes","xAxes","Menu","region","global","tests","state","continents","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","continentNames","casesMillion","deathsMillion","activeMillion","criticalMillion","testsMillion","todayGlobalCases","todayGlobalDeaths","casesPerContinent","selectedContinent","deathsPerContinent","activePerContinent","testsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","continentCountries","continent","countryNames","selectedCountry","substring","casesPerOneMillion","deathsPerOneMillion","activePerOneMillion","lowest","criticalPerOneMillion","testsPerOneMillion","lower","higher","highest","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","content","Row","Col","duration","separator","decimals","ticks","stepSize","stack","Badge","colorsPie","pointStyle","radius","hoverRadius","stacked","icon","faArrowDown","faArrowUp","paddingTop","TabsComponent","active","setActive","TabItemComponent","onItemClicked","isActive","error","animationIn","animationOut","isVisible","Container","xs","DoughnutCases","DoughnutDeaths","critical1","critical2","critical3","critical4","critical5","HorizontalChart","recoveredPerOneMillion","colorActivity","yPadding","xPadding","xAlign","hover","mode","intersect","fontColor","padding","left","top","bottom","open","recoveredMillion","recovered","critical","todayCases","todayDeaths","todayRecovered","sort","b","maxName","maxActive","maxActiveName","maxTests","maxTestsName","maxCritical","maxCriticalName","maxDeaths","maxDeathsName","maxRecovered","maxRecoveredName","border","borderRadius","paddingLeft","overflowY","evt","_datasetIndex","TabsMenu","tab","setTab","TabItem","initialState","App","globaldata","setGlobal","BASE_URL","result","fetchContinents","getGlobal","setContinents","getContinents","setCountries","res","String","fetchCountries","setState","toggle","GlobalMenu","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.44a95a40.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({\r\n  toggleAsia,\r\n  toggleEurope,\r\n  toggleOceania,\r\n  toggleNorthAmerica,\r\n  toggleSouthAmerica,\r\n  toggleAfrica,\r\n  toggleGlobal,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          right: \"0px\",\r\n          height: \"100vh\", //auto mobile\r\n          width: \"auto\",\r\n          position: \"absolute\",\r\n          background: \"#212529\",\r\n          zIndex: 1,\r\n          opacity: 0.9,\r\n          display: \"flex\",\r\n          flexDirection: \"column\", //row mobile\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          // flexWrap: \"wrap\" //mobile\r\n        }}\r\n      >\r\n        <div id=\"\" className=\"legend\" style={{ color: \"grey\" }}>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n          >\r\n            COVID-19\r\n          </h5>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n          >\r\n            DATAMAP\r\n          </h5>\r\n        </div>\r\n        {/* <div id=\"\" className=\"\" style={{marginTop: '20px', zIndex: '2'}}>\r\n        <h5>Covid-19</h5>\r\n        <h6 >Data Map</h6>\r\n      </div> */}\r\n\r\n        <nav id=\"menu\"></nav>\r\n        <div id=\"state-legend\" className=\"legend\">\r\n          {/* <h6 style={{color: \"grey\"}}>KEY</h6> */}\r\n          <div style={{display: \"flex\", alignItems: \"start\" }}>\r\n            <span style={{ backgroundColor: \"#dd5182\" }} ></span>Extreme\r\n          </div>\r\n          <div>\r\n            <span style={{ backgroundColor: \"#ff6e54\" }}></span>Serious\r\n          </div>\r\n          <div>\r\n            <span style={{ backgroundColor: \"#ffa600\" }}></span>Moderate\r\n          </div>\r\n          <div>\r\n            <span style={{ backgroundColor: \"#955196\" }}></span>Limited\r\n          </div>\r\n          <div>\r\n            <span style={{ backgroundColor: \"#444e86\" }}></span>Mild\r\n          </div>\r\n        </div>\r\n\r\n        <Button\r\n          className=\"button\"\r\n          id=\"asia\"\r\n          onClick={toggleAsia}\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Asia</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleEurope}\r\n          id=\"europe\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Europe</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleNorthAmerica}\r\n          id=\"northamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>North America</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleAfrica}\r\n          // size=\"md\"\r\n          id=\"africa\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Africa</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleSouthAmerica}\r\n          id=\"southamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>South America</h6>\r\n        </Button>\r\n\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleOceania}\r\n          id=\"oceania\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Oceania</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Global</h6>\r\n        </Button>\r\n\r\n        <div id=\"\" className=\"\" style={{ color: \"grey\", lineHeight: 1 }}>\r\n          {/* <p href=\"https://inblockdesign.com\" >   <i className=\"fa fa-info-circle\"></i> Inblock</p> */}\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"10px\", marginBottom: \"0px\" }}\r\n            className=\"pb-0\"\r\n          >\r\n            Inblock\r\n          </p>\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n            className=\"pt-0\"\r\n          >\r\n            Design <i className=\"fa fa-info-circle\"></i>{\" \"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport \"./Map.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { Chart } from \"react-chartjs-2\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nconst Map2 = ({ countries }) => {\r\n  const mapboxElRef = useRef(null); // DOM element to render map\r\n\r\n  // // console.log(countries, \"countries\");\r\n  // const populationCountry = countries.map((country) => [\r\n  //   country.population,\r\n  //   country.country,\r\n  // ]);\r\n  // console.log(populationCountry, \"pC\");\r\n  // const mort = countries.map((selectedCountry) =>\r\n  //   (\r\n  //     (selectedCountry.deathsPerOneMillion /\r\n  //       selectedCountry.casesPerOneMillion) *\r\n  //     100\r\n  //   ).toFixed(2)\r\n  // );\r\n  // // console.log(mort, \"mort\");\r\n  // const casesPerOneMillion = countries.map((selectedCountry) =>\r\n  //   (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  // );\r\n  // // console.log(casesPerOneMillion, \"cPOM\");\r\n\r\n\r\n\r\n\r\n  //Fetch Continents Data\r\n  // const [data2, setDataMap] = useState([]);\r\n  // useEffect(() => {\r\n    \r\n  //   async function fetchContinents() {\r\n  //     try {\r\n  //       const result = await fetch(\"https://disease.sh/v3/covid-19/jhucsse\");\r\n  //       const data2 = await result.json()\r\n  //       .then((data) =>\r\n  //       data.map((point, index) => ({\r\n  //         type: \"Feature\",\r\n  //         geometry: {\r\n  //           type: \"Point\",\r\n  //           coordinates: [\r\n  //             point.coordinates.longitude,\r\n  //             point.coordinates.latitude,\r\n  //           ],\r\n  //         },\r\n  //         properties: {\r\n  //           id: index,\r\n  //           country: point.country,\r\n  //           province: point.province,\r\n  //           cases: point.stats.confirmed,\r\n  //           deaths: point.stats.deaths,\r\n  //           mort: point.stats.deaths / point.stats.confirmed,\r\n  //         },\r\n  //       }))\r\n  //     );\r\n  //       setDataMap([data2]);\r\n  //       console.log(data2, \"DATAmap\");\r\n  //     } catch (error) {\r\n  //       console.log(error);\r\n  //     }\r\n  //   }\r\n  //   fetchContinents();\r\n  // }, []);\r\n\r\n  \r\n \r\n  // const pointData =  [cases, country];\r\n  // console.log(pointData, 'Points')\r\n\r\n  const fetcher = (url) =>\r\n\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude,\r\n            ],\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n            mort: point.stats.deaths / point.stats.confirmed,\r\n            // population: merge[0]\r\n            // casesM: countries.country.casesPerOneMillion,\r\n          },\r\n        }))\r\n      );\r\n      // console.log(merge, 'merge');\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   data.forEach((id) => {\r\n  //     getInfo(id)\r\n  //       .then((response) => {\r\n  //         getOtherInfo(id).then((otherReponse) => {\r\n  //           response.otherInfo = otherResponse;\r\n  //           setItemList((itemList) => [...itemList, response]);\r\n  //         });\r\n  //       })\r\n  //       .catch((error) => console.log(\"Loading failed: \" + error));\r\n  //   });\r\n  // }, []);\r\n\r\n\r\n  // console.log(cas, 'CAS')\r\n \r\n//  const newdata = [...point.stats.cases, ...merge]\r\n//  console.log(newdata, 'newdata')\r\n  // const [merge, setMerge] = useState([]);\r\n\r\n  // merge array1 and array2\r\n//  console.log(data, 'data')\r\n\r\n// const data2 = {data}.push(...countries)\r\n// console.log(data2, 'DATA2')\r\n\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const average =\r\n        data.reduce((total, next) => total + next.properties.cases, 0) /\r\n        data.length;\r\n      //800,000\r\n      const min = Math.min(...data.map((item) => item.properties.cases));\r\n      const max = Math.max(...data.map((item) => item.properties.cases));\r\n      //32,000,000\r\n\r\n      const averageD =\r\n        data.reduce((total, next) => total + next.properties.deaths, 0) /\r\n        data.length;\r\n      //8,000\r\n      const minD = Math.min(...data.map((item) => item.properties.deaths));\r\n      const maxD = Math.max(...data.map((item) => item.properties.deaths));\r\n      //173,000\r\n\r\n      console.log(countries, 'COUNTRIES')\r\n      const merge = countries.map((country, key) => country.population);\r\n      const cas = data.map((item) => item.properties.cases);\r\n      console.log(cas, 'CAS')\r\n      console.log(merge, 'MER')\r\n      const m = [...cas, ...merge]\r\n      console.log(m, 'M')\r\n\r\n      console.log(average, min, max, \"stats\");\r\n      console.log(averageD, minD, maxD, \"statsD\");\r\n\r\n      const amr = averageD / average;\r\n      // const minmr = 1 / max;\r\n      // const maxmr = maxD / 1;\r\n      // console.log(amr, minmr, maxmr, 'amr')\r\n\r\n      // ...data.map((item) => item.properties.cases, \r\n      // const countryname = data.map((item) => item.properties.country);\r\n      // console.log(countryname, 'countryname')\r\n\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [99, 20], // Asia - intial geo location\r\n        zoom: 3, // initial zoom\r\n      });\r\n\r\n\r\n\r\n\r\n      //DOUGHNUT\r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const cases1 = [\"<\", [\"get\", \"cases\"], 50000];\r\n      const cases2 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"cases\"], 50000],\r\n        [\"<\", [\"get\", \"cases\"], 100000],\r\n      ];\r\n      const cases3 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"cases\"], 100000],\r\n        [\"<\", [\"get\", \"cases\"], 400000],\r\n      ]; //800,000\r\n      const cases4 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"cases\"], 400000],\r\n        [\"<\", [\"get\", \"cases\"], 1600000],\r\n      ]; //32,000,000\r\n      const cases5 = [\">=\", [\"get\", \"cases\"], 1600000];\r\n\r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const deaths1 = [\"<\", [\"get\", \"deaths\"], 2500];\r\n      const deaths2 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"deaths\"], 2500],\r\n        [\"<\", [\"get\", \"deaths\"], 5000],\r\n      ];\r\n      const deaths3 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"deaths\"], 5000],\r\n        [\"<\", [\"get\", \"deaths\"], 20000],\r\n      ]; //8,000\r\n      const deaths4 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"deaths\"], 20000],\r\n        [\"<\", [\"get\", \"deaths\"], 80000],\r\n      ]; // 175,000\r\n      const deaths5 = [\">=\", [\"get\", \"deaths\"], 80000];\r\n\r\n      const mr1 = [\"<\", [\"get\", \"mort\"], 0.003];\r\n      const mr2 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"mort\"], 0.003],\r\n        [\"<\", [\"get\", \"mort\"], 0.005],\r\n      ];\r\n      const mr3 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"mort\"], 0.005],\r\n        [\"<\", [\"get\", \"mort\"], 0.02],\r\n      ]; //.011 amr\r\n      const mr4 = [\r\n        \"all\",\r\n        [\">=\", [\"get\", \"mort\"], 0.02],\r\n        [\"<\", [\"get\", \"mort\"], 0.05],\r\n      ]; //.18\r\n      const mr5 = [\">=\", [\"get\", \"mort\"], 0.05];\r\n\r\n      // console.log(mr1, mr2, mr3, mr4, mr5, \"MR\");\r\n      // console.log(deaths1, \"d/c\");\r\n      // colors to use for the categories\r\n      const colors = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n      const colors2 = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n\r\n\r\n\r\n      //DOT\r\n      const size = 150;\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement(\"canvas\");\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext(\"2d\");\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(67, 66, 66, ${1 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(0, 0, this.width, this.height).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        },\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      //LAYERS\r\n      map.on(\"load\", () => {\r\n        // add a clustered GeoJSON source for a sample set of earthquakes\r\n        map.addImage(\"pulsing-dot\", pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource(\"dot-point\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n        });\r\n        map.addLayer({\r\n          id: \"layer-with-pulsing-dot\",\r\n          type: \"symbol\",\r\n          source: \"dot-point\",\r\n          layout: {\r\n            \"icon-image\": \"pulsing-dot\",\r\n          },\r\n        });\r\n\r\n        map.addSource(\"points\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n          cluster: true,\r\n          clusterRadius: 50,\r\n          clusterProperties: {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            deaths1: [\"+\", [\"case\", deaths1, 1, 0]],\r\n            deaths2: [\"+\", [\"case\", deaths2, 1, 0]],\r\n            deaths3: [\"+\", [\"case\", deaths3, 1, 0]],\r\n            deaths4: [\"+\", [\"case\", deaths4, 1, 0]],\r\n            deaths5: [\"+\", [\"case\", deaths5, 1, 0]],\r\n            cases1: [\"+\", [\"case\", cases1, 1, 0]],\r\n            cases2: [\"+\", [\"case\", cases2, 1, 0]],\r\n            cases3: [\"+\", [\"case\", cases3, 1, 0]],\r\n            cases4: [\"+\", [\"case\", cases4, 1, 0]],\r\n            cases5: [\"+\", [\"case\", cases5, 1, 0]],\r\n            mr1: [\"+\", [\"case\", mr1, 1, 0]],\r\n            mr2: [\"+\", [\"case\", mr2, 1, 0]],\r\n            mr3: [\"+\", [\"case\", mr3, 1, 0]],\r\n            mr4: [\"+\", [\"case\", mr4, 1, 0]],\r\n            mr5: [\"+\", [\"case\", mr5, 1, 0]],\r\n          },\r\n        });\r\n\r\n        // map.addLayer({\r\n\r\n        //   \"id\": \"clusters-label\",\r\n        //   \"type\": \"symbol\",\r\n        //   \"source\": \"points\",\r\n        //   \"layout\": {\r\n        //     \"text-anchor\": \"top-left\",\r\n        //     \"text-field\": \"{country}\",\r\n        //     \"text-font\": [\r\n        //       \"DIN Offc Pro Medium\",\r\n        //       \"Arial Unicode MS Bold\"\r\n        //     ],\r\n        //     \"text-size\": 12,\r\n        //   },\r\n        //    'paint': {\r\n        //        'text-color': 'white'}\r\n        //    });\r\n\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          id: \"Deaths\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n\r\n          filter: [\"!=\", \"cluster\", true],\r\n          paint: {\r\n            \"circle-color\": [\r\n              \"case\",\r\n              deaths1,\r\n              colors2[0],\r\n              deaths2,\r\n              colors2[1],\r\n              deaths3,\r\n              colors2[2],\r\n              deaths4,\r\n              colors2[3],\r\n              colors2[4],\r\n            ],\r\n            \"circle-opacity\": 0.5,\r\n            // 'circle-radius': 6,\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"deaths\"],\r\n              minD,\r\n              10,\r\n              maxD,\r\n              36,\r\n            ],\r\n          },\r\n        });\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          id: \"Cases\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n\r\n          // 'layout': {\r\n          //   'text-field': [\r\n          //     'number-format',\r\n          //     ['get', 'points'],\r\n          //     { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n          //   ],\r\n          //   'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n          //   'text-size': 10,\r\n          //   'visibility': 'visible'\r\n          // },\r\n\r\n          paint: {\r\n            \"circle-color\": [\r\n              \"case\",\r\n              cases1,\r\n              colors[0],\r\n              cases2,\r\n              colors[1],\r\n              cases3,\r\n              colors[2],\r\n              cases4,\r\n              colors[3],\r\n              colors[4],\r\n            ],\r\n            \"circle-opacity\": 0.5,\r\n            // 'circle-radius': 12,\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"cases\"],\r\n\r\n              min,\r\n              10,\r\n\r\n              max,\r\n              36,\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"Mortality\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n\r\n          paint: {\r\n            \"circle-color\": [\r\n              \"case\",\r\n              mr1,\r\n              colors[0],\r\n              mr2,\r\n              colors[1],\r\n              mr3,\r\n              colors[2],\r\n              mr4,\r\n              colors[3],\r\n              colors[4],\r\n            ],\r\n            \"circle-opacity\": 0.5,\r\n            // 'circle-radius': 18,\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"mort\"],\r\n\r\n              0.0001,\r\n              12,\r\n\r\n              0.2,\r\n              36,\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"clusters\",\r\n          type: \"symbol\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n          layout: {\r\n            \"text-field\": [\r\n              \"number-format\",\r\n              [\"get\", \"points\"],\r\n              { \"min-fraction-digits\": 1, \"max-fraction-digits\": 1 },\r\n            ],\r\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n            \"text-size\": 10,\r\n            visibility: \"visible\",\r\n          },\r\n          paint: {\r\n            \"text-color\": [\r\n              \"case\",\r\n              [\"<\", [\"get\", \"cases\"], 3],\r\n              \"black\",\r\n              \"white\",\r\n            ],\r\n            // 'circle-color': [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     min,\r\n            //     \"#ffffb2\",\r\n            //     max / 32,\r\n            //     \"#fed976\",\r\n            //     max / 16,\r\n            //     \"#feb24c\",\r\n            //     max / 8,\r\n            //     \"#fd8d3c\",\r\n            //     max / 4,\r\n            //     \"#fc4e2a\",\r\n            //     max / 2,\r\n            //     \"#e31a1c\",\r\n            //     max,\r\n            //     \"#b10026\"\r\n            //   ],\r\n            //   \"circle-opacity\": 0.75,\r\n            //       \"circle-stroke-width\": [\r\n            //         \"interpolate\",\r\n            //         [\"linear\"],\r\n            //         [\"get\", \"cases\"],\r\n            //         1,\r\n            //         1,\r\n            //         max,\r\n            //         1.75\r\n            //       ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"clusters2\",\r\n          type: \"symbol\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n          layout: {\r\n            \"text-field\": [\r\n              \"number-format\",\r\n              [\"get\", \"points\"],\r\n              { \"min-fraction-digits\": 1, \"max-fraction-digits\": 1 },\r\n            ],\r\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n            \"text-size\": 10,\r\n            visibility: \"visible\",\r\n          },\r\n          paint: {\r\n            \"text-color\": [\r\n              \"case\",\r\n              [\"<\", [\"get\", \"deaths\"], 3],\r\n              \"black\",\r\n              \"white\",\r\n            ],\r\n          },\r\n        });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures(\"points\");\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el,\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on(\"render\", () => {\r\n          if (!map.isSourceLoaded(\"points\")) return;\r\n          updateMarkers();\r\n        });\r\n      }); // map(load) End\r\n\r\n\r\n\r\n\r\n\r\n\r\n      // code for creating an SVG donut chart from feature properties\r\n      function createDonutChart(props) {\r\n        const offsets = [];\r\n        const counts = [\r\n          props.deaths1,\r\n          props.deaths2,\r\n          props.deaths3,\r\n          props.deaths4,\r\n          props.deaths5,\r\n        ];\r\n        const counts2 = [\r\n          props.cases1,\r\n          props.cases2,\r\n          props.cases3,\r\n          props.cases4,\r\n          props.cases5,\r\n        ];\r\n\r\n        let total = 0;\r\n        for (const count of counts) {\r\n          offsets.push(total);\r\n          total += count;\r\n        }\r\n        let total2 = 0;\r\n        for (const count2 of counts2) {\r\n          offsets.push(total2);\r\n          total2 += count2;\r\n        }\r\n        const fontSize =\r\n          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n        const r =\r\n          total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n        const r0 = Math.round(r * 0.6);\r\n        const w = r * 2;\r\n\r\n        const fontSize2 =\r\n          total2 >= 1000 ? 22 : total2 >= 100 ? 20 : total2 >= 10 ? 18 : 16;\r\n        const r2 =\r\n          total2 >= 1000 ? 50 : total2 >= 100 ? 32 : total2 >= 10 ? 24 : 18;\r\n        const r02 = Math.round(r2 * 0.6);\r\n        const w2 = r2 * 2;\r\n\r\n        let html = `<div>\r\n        <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n        let html2 = `<div>\r\n        <svg \"class=\"zoom\" width=\"${w2}\" height=\"${w2}\" viewbox=\"0 0 ${w2} ${w2}\" text-anchor=\"middle\" style=\"font: ${fontSize2}px ; display: \"block\"; >`;\r\n\r\n        for (let i = 0; i < counts.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total,\r\n            (offsets[i] + counts[i]) / total,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n\r\n        for (let i = 0; i < counts2.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total2,\r\n            (offsets[i] + counts2[i]) / total2,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n        html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n        <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n        ${total.toLocaleString()}\r\n        </text>\r\n        </svg>\r\n        </div>`;\r\n\r\n        // html2 += `<circle cx=\"${r2}\" cy=\"${r2}\" r=\"${r02}\" fill=\"#212529\" />\r\n        // <text  dominant-baseline=\"central\" transform=\"translate(${r2}, ${r2})\" fill=\"#dfdfdf\" >\r\n        // ${total2.toLocaleString()}\r\n        // </text>\r\n        // </svg>\r\n        // </div>`;\r\n\r\n        const el = document.createElement(\"div\");\r\n        el.innerHTML = html;\r\n        return el.firstChild;\r\n      }\r\n\r\n      function donutSegment(start, end, r, r0, color) {\r\n        if (end - start === 1) end -= 0.00001;\r\n        const a0 = 2 * Math.PI * (start - 0.25);\r\n        const a1 = 2 * Math.PI * (end - 0.25);\r\n        const x0 = Math.cos(a0),\r\n          y0 = Math.sin(a0);\r\n        const x1 = Math.cos(a1),\r\n          y1 = Math.sin(a1);\r\n        const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n        // draw an SVG path\r\n        return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${\r\n          r + r * y0\r\n        } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${\r\n          r + r0 * x1\r\n        } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${\r\n          r + r0 * y0\r\n        }\" fill=\"${color}\" />`;\r\n      }\r\n\r\n      // inspect a cluster on click\r\n      map.on(\"click\", \"Cases\", function (e) {\r\n        // var features = map.queryRenderedFeatures(e.point, {\r\n        //   layers: [\"clusters\"],\r\n        // });\r\n        // var clusterId = features[0].properties.cluster_id;\r\n\r\n        // map\r\n        //   .getSource(\"points\")\r\n        //   .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n        //     if (err) return;\r\n\r\n        //     const coordinates = e.features[0].geometry.coordinates.slice();\r\n\r\n            map.flyTo({ center: e.features[0].geometry.coordinates, zoom: 5 });\r\n\r\n            // map.easeTo({\r\n            \r\n            //   center: features[0].geometry.coordinates,\r\n            //   zoom: 4\r\n            // });\r\n            // console.log(clusterId, 'clusterID', features, 'features', features[0].properties.cluster_id)\r\n          // });\r\n      });\r\n\r\n      //TOGGLE\r\n      // After the last frame rendered before the map enters an \"idle\" state.\r\n      map.on(\"idle\", () => {\r\n        // If these two layers were not added to the map, abort\r\n        if (\r\n          !map.getLayer(\"Cases\") ||\r\n          !map.getLayer(\"Deaths\") ||\r\n          !map.getLayer(\"Mortality\")\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        // Enumerate ids of the layers.\r\n        const toggleableLayerIds = [\"Cases\", \"Deaths\", \"Mortality\"];\r\n\r\n        // Set up the corresponding toggle button for each layer.\r\n        for (const id of toggleableLayerIds) {\r\n          // Skip layers that already have a button set up.\r\n          if (document.getElementById(id)) {\r\n            continue;\r\n          }\r\n\r\n          // Create a link.\r\n          const link = document.createElement(\"a\");\r\n          link.id = id;\r\n          link.href = \"#\";\r\n          link.textContent = id;\r\n          link.className = \"active\";\r\n\r\n          // Show or hide layer when the toggle is clicked.\r\n          link.onclick = function (e) {\r\n            const clickedLayer = this.textContent;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            const visibility = map.getLayoutProperty(\r\n              clickedLayer,\r\n              \"visibility\"\r\n            );\r\n\r\n            // Toggle layer visibility by changing the layout object's visibility property.\r\n            if (visibility === \"visible\") {\r\n              map.setLayoutProperty(clickedLayer, \"visibility\", \"none\");\r\n              this.className = \"\";\r\n            } else {\r\n              this.className = \"active\";\r\n              map.setLayoutProperty(clickedLayer, \"visibility\", \"visible\");\r\n            }\r\n          };\r\n          const layers = document.getElementById(\"menu\");\r\n          layers.appendChild(link);\r\n        }\r\n      }); // map(idle) End\r\n\r\n      //Add navigation controls to the top right of the canvas\r\n      // map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      // Add navigation to center the map on your geo location\r\n      map.addControl(\r\n        new mapboxgl.GeolocateControl({\r\n          fitBoundsOptions: { maxZoom: 6 },\r\n        })\r\n      );\r\n\r\n      //CIRCLES\r\n      map.once(\"load\", function () {\r\n        //POPUP\r\n\r\n        // const popup = new mapboxgl.Popup({\r\n        //   closeButton: false,\r\n        //   closeOnClick: false,\r\n        //   className: \"popup\",\r\n        // });\r\n\r\n        // let lastId;\r\n\r\n        // map.on(\"mousemove\", \"Cases\", (e) => {\r\n        //   const id = e.features[0].properties.id;\r\n\r\n        //   if (id !== lastId) {\r\n        //     lastId = id;\r\n        //     const { cases, deaths, country, province, mort } =\r\n        //       e.features[0].properties;\r\n\r\n        //     // Change the pointer type on mouseenter\r\n        //     map.getCanvas().style.cursor = \"pointer\";\r\n\r\n        //     const coordinates = e.features[0].geometry.coordinates.slice();\r\n\r\n        //     const countryISO =\r\n        //       lookup.byCountry(country)?.iso2 ||\r\n        //       lookup.byInternet(country)?.iso2;\r\n        //     const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n        //     const provinceHTML =\r\n        //       province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n        //     const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n        //     const countryFlagHTML = Boolean(countryISO)\r\n        //       ? `<img src=\"${countryFlag}\"></img>`\r\n        //       : \"\";\r\n\r\n        //     const HTML = `  ${countryFlagHTML}<p>Country: <b>${country}</b></p>\r\n        //         ${provinceHTML}\r\n        //         <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n        //         <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n        //         <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n\r\n        //         `;\r\n\r\n        //     // Ensure that if the map is zoomed out such that multiple\r\n        //     // copies of the feature are visible, the popup appears\r\n        //     // over the copy being pointed to.\r\n        //     while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n        //       coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n        //     }\r\n\r\n        //     popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\r\n        //   }\r\n        // });\r\n\r\n\r\n        const popup = new mapboxgl.Popup({\r\n        className: \"popup\"})\r\n     \r\n\r\n        var i = 0;\r\n        let lastId;\r\n        map.on(\"mousemove\", \"Cases\", function (e) {\r\n          const id = e.features[0].properties.id;\r\n\r\n            if (id !== lastId) {\r\n              lastId = id;\r\n\r\n              map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          var coordinates = e.features[0].geometry.coordinates.slice();\r\n          // var cases = e.features[0].properties.cases;\r\n\r\n          let colorsCases = [\r\n            // \" #006390\",\r\n            \" #7668b4\",\r\n            \" #ffa500\",\r\n            // \" #ff6a67\",\r\n            // \"#d75ea4\",\r\n           ];\r\n\r\n  \r\n  \r\n\r\n          const { cases, deaths, country, province } =\r\n          e.features[0].properties;\r\n\r\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n          }\r\n\r\n\r\n\r\n          const colorCase = [];\r\n          const statusCase = [];\r\n          const classText = [];\r\n            if (cases  < 50000) {\r\n              colorCase.push(\"#5d67a1\");\r\n              statusCase.push(\"Mild\");\r\n              classText.push(\"mild\");\r\n            }\r\n            if (cases >= 50000 && cases  < 100000) {\r\n              colorCase.push(\"#955196\");\r\n              statusCase.push(\"Limited\");\r\n              classText.push(\"limited\");\r\n            }\r\n            if (cases  >= 100000 && cases  < 400000) {\r\n              colorCase.push(\"#ffa600\");\r\n              statusCase.push(\"Moderate\");\r\n              classText.push(\"moderate\");\r\n            }\r\n            if (cases  >= 400000 && cases  < 16000000) {\r\n              colorCase.push(\"#ff6e54\");\r\n              statusCase.push(\"Serious\");\r\n              classText.push(\"serious\");\r\n            }\r\n            if (cases >= 16000000) {\r\n              colorCase.push(\"#dd5182\");\r\n              statusCase.push(\"Extreme\");\r\n              classText.push(\"extreme\");\r\n              //   pink\r\n            }\r\n\r\n            const colorDeath = [];\r\n            const statusDeath = [];\r\n            const classText2 = [];\r\n       \r\n            if (deaths  < 2500) {\r\n              colorDeath.push(\"#5d67a1\");\r\n              statusDeath.push(\"Mild\");\r\n              classText2.push(\"mild\");\r\n              //   blue\r\n            }\r\n            if (deaths >= 2500 && deaths  < 5000) {\r\n              colorDeath.push(\"#955196\");\r\n              statusDeath.push(\"Limited\");\r\n              classText2.push(\"limited\");\r\n            }\r\n            if (deaths  >= 5000 && deaths < 20000) {\r\n              colorDeath.push(\"#cf8c11\");\r\n              statusDeath.push(\"Moderate\");\r\n              classText2.push(\"moderate\");\r\n            }\r\n            if (deaths  >= 20000 && deaths  < 80000) {\r\n              colorDeath.push(\"#ff6e54\");\r\n              statusDeath.push(\"Serious\");\r\n              classText2.push(\"serious\");\r\n            }\r\n            if (deaths >= 80000) {\r\n              colorDeath.push(\"#dd5182\");\r\n              statusDeath.push(\"Extreme\");\r\n              classText2.push(\"extreme\");\r\n              //   pink\r\n            }\r\n       \r\n       \r\n\r\n\r\n          const countryISO =\r\n                lookup.byCountry(country)?.iso2 ||\r\n                lookup.byInternet(country)?.iso2;\r\n              const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n              const provinceHTML =\r\n                province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n              const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n              const countryFlagHTML = Boolean(countryISO)\r\n                ? `<img src=\"${countryFlag}\"></img>`\r\n                : \"\";\r\n  \r\n              const HTML = ` <p>Country: <b>${country}</b></p>\r\n                  ${provinceHTML}\r\n                  <p>Cases: <b>${numberWithCommas(cases)}</b><span class=\"${classText}\">(${statusCase})</span></p>\r\n                  <p>Deaths: <b>${numberWithCommas(deaths)}</b><span class=\"${classText2}\"}>(${statusDeath})</span></p>\r\n                  <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n               \r\n                  `;\r\n\r\n\r\n         \r\n\r\n                  popup.setLngLat(coordinates)\r\n                  .setHTML(  '<canvas className=\"info\" id=\"foo' + i + '\"></canvas>' + HTML)\r\n                  .addTo(map);\r\n\r\n                  // map.flyTo({ center: e.features[0].geometry.coordinates, zoom: 4 });\r\n\r\n\r\n             \r\n      \r\n\r\n\r\n        \r\n          var ctx = document.getElementById(\"foo\" + i).getContext(\"2d\");\r\n\r\n          console.log(ctx);\r\n          var chart = new Chart(ctx, {\r\n            type: \"doughnut\",\r\n            options: {\r\n              elements: {\r\n                arc: {\r\n                  borderColor: \"#212529\",\r\n                  borderWidth: 1,\r\n                },\r\n              },\r\n           \r\n              responsive: true,\r\n              maintainAspectRatio: true,\r\n              legend: {\r\n                display: false,\r\n                position: \"\",\r\n              },\r\n              title: {\r\n                display: false,\r\n                text: \"\",\r\n              },\r\n              animation: {\r\n                animateScale: true,\r\n                animateRotate: true,\r\n              },\r\n              tooltips: {\r\n                backgroundColor: \"#212529\",\r\n                borderColor: \"turquoise\",\r\n                borderWidth: 1,\r\n                cornerRadius: 2,\r\n                displayColors: true,\r\n                bodyFontSize: 12,\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n                callbacks: {\r\n                  label: function (item, data) {\r\n                    console.log(data.labels, item);\r\n                    return (\r\n                      data.datasets[item.datasetIndex].label +\r\n                      \": \" +\r\n                      data.labels[item.index] +\r\n                      \": \" +\r\n                      data.datasets[item.datasetIndex].data[item.index]\r\n                    );\r\n                  },\r\n                },\r\n              },\r\n            },\r\n            data: {\r\n              labels: [\r\n                \"Cases\",\r\n                \"Deaths\",\r\n              ],\r\n              datasets: [\r\n                {\r\n                  label: \"Distribution\",\r\n                  backgroundColor: [colorDeath, colorCase],\r\n                  borderColor: colorCase,\r\n                  // data: caseChart,\r\n                  // data: [12, 34, 16, 52, 13]\r\n                  data: [ deaths*2, cases],\r\n                },\r\n              ],\r\n            },\r\n\r\n          });\r\n          i++;\r\n\r\n      \r\n          }\r\n        });\r\n\r\n\r\n\r\n        map.on(\"mouseleave\", \"Cases\", function () {\r\n          lastId = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n\r\n      \r\n\r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n        // map.doubleClickZoom.enable();\r\n        //IDS\r\n        document\r\n          .getElementById(\"africa\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [3.2, 1.8],\r\n              essential: true,\r\n            });\r\n          });\r\n        document\r\n          .getElementById(\"europe\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 4,\r\n              center: [6, 47],\r\n              essential: true,\r\n            });\r\n          });\r\n        document\r\n          .getElementById(\"northamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [-120, 35],\r\n              essential: true,\r\n            });\r\n          });\r\n        document\r\n          .getElementById(\"southamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.5,\r\n              center: [-74, -4],\r\n              essential: true,\r\n            });\r\n          });\r\n        document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.1,\r\n            center: [100, 17],\r\n            essential: true,\r\n          });\r\n        });\r\n        document\r\n          .getElementById(\"oceania\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.7,\r\n              center: [131, -28],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        document\r\n          .getElementById(\"global\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 1.7,\r\n              center: [0, 20],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        // document\r\n        // .getElementById({region})\r\n        // .addEventListener(\"click\", function () {\r\n        //   map.flyTo({\r\n        //     zoom: 1.7,\r\n        //     center: [0, 0],\r\n        //     essential: true,\r\n        //   });\r\n        // });\r\n\r\n        // const paris = [2.350215911865234, 48.862682060035624];\r\n        // const flyToParis = () => {\r\n        //    map.flyTo(paris, 2000);\r\n        // }\r\n\r\n\r\n      }); //map(once) End\r\n    } //id Data End\r\n  }, [data]);\r\n  //useEffect End\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mapContainer\">\r\n        {/* Mapbox Container */}\r\n        {/* <Button onClick={flyToParis}> </Button> */}\r\n        <div className=\"mapBox\" ref={mapboxElRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n//Map End\r\nexport default Map2;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=180\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  console.log(data[178], 'DATA178')\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          width={320}\r\n          height={130}\r\n        //   options={options}\r\n\r\n        options={{\r\n            legend: {\r\n              display: false,\r\n              position: \"bottom\",\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  display: true,\r\n                  // stacked: true,\r\n                //   type: \"logarithmic\",\r\n                  display: false,\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  // display: false,\r\n                },\r\n              ],\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n            },\r\n          }}\r\n          data={{\r\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                borderColor: \"rgba(75,192,192,1)\",\r\n                // data: data,\r\n                data: [data[30], data[60], data[90], data[120], data[150], data[178]],\r\n              \r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default LineGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport TabsComponent from \"../misc/TabsComponent\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport CountUp from \"react-countup\";\r\nimport BarGraph from \"../misc/BarGraph\";\r\nimport LineGraph from \"./LineGraph\";\r\n\r\nconst Menu = ({\r\n  region,\r\n  index,\r\n  population,\r\n  global,\r\n  state,\r\n  tests,\r\n  countries,\r\n  continents,\r\n  handleClose,\r\n  populationGlobal,\r\n  testsG,\r\n  globalCases,\r\n  globalDeaths,\r\n  globalActive,\r\n  globalCritical,\r\n  globalTests,\r\n  continentNames,\r\n  casesMillion,\r\n  deathsMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  testsMillion,\r\n  todayGlobalCases,\r\n  todayGlobalDeaths,\r\n}) => {\r\n  const casesPerContinent = casesMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000 ).toFixed(1)\r\n  );\r\n  const deathsPerContinent = deathsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const activePerContinent = activeMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000 ).toFixed(1)\r\n  );\r\n  const criticalPerContinent = criticalMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const testsPerContinent = testsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000 ).toFixed(1)\r\n  );\r\n  console.log(casesPerContinent, \"casesPerContinent\");\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(1);\r\n  const activeGlobal = (globalActive / 1000).toFixed(2);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(1);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(\r\n    (country) => country.continent === region\r\n  );\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries\r\n    .filter(\r\n      (country) => country.continent === region && country.population > 100000\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country.substring(0, 12));\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  // Create strata for classifting cases for doughnut charts\r\n  const lowest = continents.filter(\r\n    (selectedContinent) => selectedContinent.casesPerOneMillion / 1000 < 50\r\n  );\r\n  const lower = continents.filter(\r\n    (selectedContinent) =>\r\n      selectedContinent.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedContinent.casesPerOneMillion / 1000 < 100\r\n  );\r\n  const average = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const higher = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const highest = continents.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Deaths\r\n  const mild = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 < 0.5\r\n  );\r\n  const contained = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 0.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1\r\n  );\r\n  const moderate = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1.5\r\n  );\r\n  const serious = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 2.5\r\n  );\r\n  const extreme = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 > 2.5\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 25\r\n  );\r\n  const active5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 25\r\n  );\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) {\r\n      colorCases.push(\"#444e86\");\r\n    }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) {\r\n      colorCases.push(\"#955196\");\r\n    }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) {\r\n      colorCases.push(\"#ffa600\");\r\n    }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 300) {\r\n      colorCases.push(\"#ff6e54\");\r\n    }\r\n    if (casesPerContinent[i] >= 300) {\r\n      colorCases.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 2.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < 3) {\r\n      colorActive.push(\"#444e86\");\r\n    }\r\n    if (activePerOneMillion[i] >= 3 && activePerOneMillion[i] < 5) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activePerOneMillion[i] >= 5 && activePerOneMillion[i] < 8) {\r\n      colorActive.push(\"#ffa600\");\r\n    }\r\n    if (activePerOneMillion[i] >= 8 && activePerOneMillion[i] < 15) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activePerOneMillion[i] >= 15) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      backgroundcolor.push(\"#444e86\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      backgroundcolor.push(\"#955196\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      backgroundcolor.push(\"#ffa600\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      backgroundcolor.push(\"#ff6e54\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      backgroundcolor.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"Cases\",\r\n      content: (\r\n        <>\r\n          {/* <Row style={{height: \"88vh\"}}> */}\r\n          {/* <Col style={{ height: \"100%\"}}> */}\r\n          {/* <BarGraph /> */}\r\n          {/* <LineGraph casesType={casesType}/> */}\r\n          <Row\r\n            className={\"box mx-1\"}\r\n            style={{\r\n              color: \"#fff\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n            \r\n            }}\r\n          >\r\n            <Col className=\"\">\r\n            <h1 className=\"\">\r\n              {\" \"}\r\n              <CountUp\r\n                start={casesGlobal - 3}\r\n                end={casesGlobal}\r\n                duration={0.3}\r\n                separator=\",\"\r\n                decimals={1}\r\n              />\r\n               {casesGlobal[0] / 1000 >= casesGlobal[5] / 1000 ? (\r\n                      <i\r\n                      style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n                      className=\"fa fa-arrow-up\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                    style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n                    className=\"fa fa-arrow-down\"\r\n                  ></i>\r\n                  )}{\" \"}\r\n                     <h5 className=\"\"> Cases / 1000 </h5>\r\n            </h1>\r\n         \r\n            </Col>\r\n            <Col  className=\"\" >\r\n           <Row style={{  }} className=\"box\"> <h3 className=\"\">{testsGlobal}</h3>&nbsp;<h6>Tests/1000</h6></Row>\r\n           <Row style={{  }} className=\"box\"> <h3>{activeGlobal}</h3>&nbsp;<h6>Active/1000</h6></Row>\r\n           \r\n             \r\n           \r\n            </Col>\r\n          </Row>\r\n\r\n          {/* <BarGraph /> */}\r\n          <Row className=\"box p-2 mt-2 mx-1\">\r\n            <div\r\n              className=\"pt-1 pb-1\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Cases Per Continent\r\n            </div>\r\n\r\n            <Bar\r\n              // pointStyle=\"star\"\r\n              height={150}\r\n              width={300}\r\n              options={{\r\n                legend: {\r\n                  display: true,\r\n                  position: \"bottom\",\r\n                  labels: {\r\n                    usePointStyle: true,\r\n                  },\r\n                },\r\n\r\n                tooltips: {\r\n                  backgroundColor: '#212529',\r\n                  borderColor: \"white\",\r\n                  displayColors: false,\r\n                  bodyFontSize: 12,\r\n                  // callbacks: {\r\n                  //   label: function (tooltipItems, data) {\r\n                  //     return tooltipItems.yLabel + \" per 1000\";\r\n                  //   },\r\n                  // },\r\n                },\r\n\r\n                //   scales:{\r\n                //     xAxes:[{\r\n                //        ticks:{\r\n                //        display: false\r\n                //       }\r\n                //     }]\r\n                // },\r\n\r\n                scales: {\r\n\r\n                  xAxes: [\r\n                    {\r\n                      // ticks: {\r\n                      //   min: 0,\r\n                      //   max: 3,\r\n                      //   stepWidth: 2,\r\n                      //   stepSize: 2,\r\n                      // },\r\n                      ticks: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n                  ],\r\n                  yAxes: [\r\n                    {\r\n                      // type: \"logarithmic\",\r\n                      ticks: {\r\n                        // min: 0,\r\n                        // max: 3,\r\n                        // stepWidth: 100,\r\n                        stepSize: 1000,\r\n                      },\r\n                    },\r\n                  ],\r\n                },\r\n              }}\r\n              data={{\r\n                labels: continentNames,\r\n                datasets: [\r\n               \r\n                  {\r\n                    label: \"Cases\",\r\n                    data: casesPerContinent,\r\n                    backgroundColor: colorCases,\r\n                    stack: \"0\",\r\n                  },\r\n                \r\n                  {\r\n                    label: \"Tests\",\r\n                    data: testsPerContinent,\r\n                    backgroundColor: 'teal',\r\n                    stack: \"0\",\r\n                  },\r\n                  {\r\n                    label: \"Active\",\r\n                    data: activePerContinent,\r\n                    backgroundColor: 'orange',\r\n                    stack: \"0\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <div\r\n                className=\"py-3 ml-4\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Cases Statistics\r\n              </div>\r\n              <Row className=\"subtitle ml-0\">\r\n                <Col className=\"box py-4 mr-1\">\r\n                  Active\r\n                  {((activeGlobal / casesGlobal) * 100).toFixed(2) <= 2.5 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (activeMillion[index] / casesMillion[index]) * 100 >=\r\n                    4.5 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong>\r\n                    {((activeGlobal / casesGlobal) * 100).toFixed(2)}%\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box py-4\">\r\n                  Today\r\n                  {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong>\r\n                    +\r\n                    {numberWithCommas(\r\n                      (todayGlobalCases / 1000).toFixed(0) + \"k\"\r\n                    )}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle ml-0\">\r\n                <Col className=\"box py-4 mr-1 mt-1\">\r\n                Positive\r\n                  {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong >\r\n                    {numberWithCommas(\r\n                      (casesGlobal / testsGlobal * 100).toFixed(2) + \"%\"\r\n                    )}\r\n                  </strong>\r\n                  {/* <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            testsG,\r\n                          casesGlobal,\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut> */}\r\n                </Col>\r\n                <Col className=\"box py-4 mt-1\">\r\n                  Tests\r\n                  {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      POOR\r\n                    </Badge>\r\n                  ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      GOOD\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"\">\r\n                    {(testsG / populationGlobal).toFixed(2)}pp\r\n                    {/* <i className=\"fa fa-male\"></i> */}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col>\r\n              <div\r\n                className=\"py-3 ml-4\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Continent Analysis\r\n              </div>\r\n              <Doughnut\r\n                width={300}\r\n                height={300}\r\n                options={{\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\r\n                    \"Lowest Cases\",\r\n                    \"Lower Cases\",\r\n                    \"Average Cases\",\r\n                    \"Higher Cases\",\r\n                    \"Highest Cases\",\r\n                  ],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        lowest.length,\r\n                        lower.length,\r\n                        average.length,\r\n                        higher.length,\r\n                        highest.length,\r\n                      ],\r\n                      backgroundColor: colorsPie,\r\n                    },\r\n                  ],\r\n                }}\r\n              ></Doughnut>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"subtitle box ml-0 mr-2 mt-3\">\r\n            <div\r\n              className=\"py-1 ml-0\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Cases Trend\r\n            </div>\r\n            <LineGraph casesType={casesType} />\r\n            {/* <Line\r\n                  width={160}\r\n                  height={60}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Cases / 1000\",\r\n                        data: casesMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                /> */}\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Deaths\",\r\n      content: (\r\n        <>\r\n          <Row\r\n            className={\"box m-1 py-1\"}\r\n            style={{\r\n              color: \"#fff\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <h1>\r\n              {\" \"}\r\n              <CountUp\r\n                start={deathsGlobal - 1}\r\n                end={deathsGlobal}\r\n                duration={0.3}\r\n                separator=\",\"\r\n                decimals={2}\r\n              />\r\n                 {deathsGlobal[0] / 1000 <= deathsGlobal[5] / 1000 ? (\r\n                      <i\r\n                      style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n                      className=\"fa fa-arrow-up\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                    style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n                    className=\"fa fa-arrow-down\"\r\n                  ></i>\r\n                  )}\r\n            </h1>\r\n            <h5 className=\"\"> Deaths / 1000 </h5>\r\n          </Row>\r\n\r\n          <Row className=\"box p-2 mt-2 mx-2\">\r\n            <div\r\n              className=\"pt-1 pb-1\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Global Deaths\r\n            </div>\r\n            <Bar\r\n              pointStyle=\"star\"\r\n              height={150}\r\n              width={300}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: \"bottom\",\r\n                  labels: {\r\n                    usePointStyle: true,\r\n                  },\r\n                },\r\n                elements: {\r\n                  point: {\r\n                    radius: 25,\r\n                    hoverRadius: 35,\r\n                    pointStyle: \"rectRounded\",\r\n                  },\r\n                },\r\n                scales: {\r\n                  xAxes: [\r\n                    {\r\n                      stacked: true,\r\n                    },\r\n                  ],\r\n                  yAxes: [\r\n                    {\r\n                      stacked: true,\r\n                      radius: 25,\r\n                    },\r\n                  ],\r\n                },\r\n              }}\r\n              data={{\r\n                labels: continentNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Deaths/1000\",\r\n                    data: deathsPerContinent,\r\n                    backgroundColor: colorCases,\r\n                    stack: \"0\",\r\n                  },\r\n                  // {\r\n                  //   label: \"Deaths/1000\",\r\n                  //   data: deathsPerContinent,\r\n                  //   backgroundColor: colorsPie,\r\n                  //   stack: \"0\",\r\n                  // },\r\n                  // {\r\n                  //   label: \"Active/1000\",\r\n                  //   data: activePerContinent,\r\n                  //   backgroundColor: colorsPie,\r\n                  //   stack: \"0\",\r\n                  // },\r\n                ],\r\n              }}\r\n            />\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <div\r\n                className=\"pt-3 pb-3 ml-4\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Death Statistics\r\n              </div>\r\n              <Row className=\"subtitle ml-1\">\r\n                <Col className=\"box px-2 py-3 mr-1\">\r\n                  Critical\r\n                  {((criticalGlobal / casesGlobal) * 100).toFixed(2) <= 2.5 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n                    4.5 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    {globalCritical*1000}\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box px-3 pt-3 pb-4  ml-1\">\r\n                  Today\r\n                  {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    +{numberWithCommas(todayGlobalDeaths)}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle ml-0\">\r\n                <Col className=\"box p-2  mr-1 mt-3\">\r\n                  <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            tests[index] / population[index],\r\n                            1 - tests[index] / population[index],\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut>\r\n                </Col>\r\n                <Col className=\"box px-3 py-3 ml-1 mt-3\">\r\n                  Tests{\" \"}\r\n                  {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      POOR\r\n                    </Badge>\r\n                  ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      GOOD\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">{\" \"}\r\n                    {(testsG / populationGlobal).toFixed(2)} pp\r\n                    {/* <i className=\"fa fa-male\"></i> */}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col>\r\n              <div\r\n                className=\"pt-3 pb-3 ml-4\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Deaths Analysis\r\n              </div>\r\n              <Doughnut\r\n                width={300}\r\n                height={300}\r\n                options={{\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\r\n                    \"Lowest Deaths\",\r\n                    \"Lower Deaths\",\r\n                    \"Average Deaths\",\r\n                    \"Higher Deaths\",\r\n                    \"Highest Deaths\",\r\n                  ],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        lowest.length,\r\n                        lower.length,\r\n                        average.length,\r\n                        higher.length,\r\n                        highest.length,\r\n                      ],\r\n                      backgroundColor: colorsPie,\r\n                    },\r\n                  ],\r\n                }}\r\n              ></Doughnut>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"subtitle box ml-0 mr-2 mt-3\">\r\n            <div\r\n              className=\"pt-1 pb-1 ml-0\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Deaths Trend\r\n            </div>\r\n            <Line\r\n              width={160}\r\n              height={60}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: \"bottom\",\r\n                },\r\n              }}\r\n              data={{\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                datasets: [\r\n                  {\r\n                    label: \"Deaths / 1000\",\r\n                    data: deathsMillion,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                    borderColor: \"rgba(75,192,192,1)\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      title: \"Active\",\r\n      icon: \"tabitem__icon fa fa-network-wired\",\r\n      content: (\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: activePerOneMillion,\r\n                      backgroundColor: colorActive,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n                <h1>\r\n                  {activeGlobal}{\" \"}\r\n                  <FontAwesomeIcon color=\"green\" icon={faArrowDown} />\r\n                </h1>\r\n\r\n                <h5>/1000 Active</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\",\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Active\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (casesMillion[index] / activeMillion[index]) *\r\n                      100\r\n                    ).toFixed(0)}\r\n                    %\r\n                  </h3>\r\n                  <div>/active</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Critical\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (criticalMillion[index] / activeMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/active</div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Deaths\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n                  </div>{\" \"}\r\n                  <h3>\r\n                    {(\r\n                      (deathsMillion[index] / activeMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/active</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Tests{\" \"}\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n                  <div>/person</div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n                Countries in {region}\r\n              </div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\r\n                    \"Lowest Active\",\r\n                    \"Lower Active\",\r\n                    \"Average Active\",\r\n                    \"Higher Active\",\r\n                    \"Highest Active\",\r\n                  ],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        active1.length,\r\n                        active2.length,\r\n                        active3.length,\r\n                        active4.length,\r\n                        active5.length,\r\n                      ],\r\n                      backgroundColor: colorsPie,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Critical\",\r\n      icon: \"tabitem__icon fa fa-network-wired\",\r\n      content: (\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: casesPerOneMillion,\r\n                      backgroundColor: colorCases,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n                <h1>\r\n                  {(criticalGlobal / 1).toFixed(1)}{\" \"}\r\n                  <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n                </h1>\r\n\r\n                <h5>/1000 Critical</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\",\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div\r\n                style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}\r\n              >\r\n                Statistics\r\n              </div>\r\n              <Row className=\"subtitle m-1 pt-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Active\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Critical\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (criticalMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Deaths\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n                  </div>{\" \"}\r\n                  <h3>\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Tests{\" \"}\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n                  <div>/person</div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n                Countries in {region}\r\n              </div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\r\n                    \"Lowest Cases\",\r\n                    \"Lower Cases\",\r\n                    \"Average Cases\",\r\n                    \"Higher Cases\",\r\n                    \"Highest Cases\",\r\n                  ],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        lowest.length,\r\n                        lower.length,\r\n                        average.length,\r\n                        higher.length,\r\n                        highest.length,\r\n                      ],\r\n                      backgroundColor: colorsPie,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Tests\",\r\n      icon: \"tabitem__icon fa fa-network-wired\",\r\n      content: (\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: casesPerOneMillion,\r\n                      backgroundColor: colorCases,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n                <h1>\r\n                  {(testsGlobal / 1).toFixed(1)}{\" \"}\r\n                  <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n                </h1>\r\n\r\n                <h5>/1000 Tests</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\"></Row>\r\n              <div\r\n                style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}\r\n              >\r\n                Statistics\r\n              </div>\r\n              <Row className=\"subtitle m-1 pt-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Active\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  Critical\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>\r\n                    {(\r\n                      (criticalMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\">\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Deaths\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon color=\"green\" icon={faArrowUp} />\r\n                  </div>{\" \"}\r\n                  <h3>\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                  <div>/cases</div>\r\n                </Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>\r\n                  {\" \"}\r\n                  Tests{\" \"}\r\n                  <div className=\"icon\">\r\n                    <FontAwesomeIcon\r\n                      color=\"rgb(212, 23, 83)\"\r\n                      icon={faArrowDown}\r\n                    />\r\n                  </div>\r\n                  <h3>{(tests[index] / population[index]).toFixed(2)}</h3>\r\n                  <div>/person</div>\r\n                </Col>\r\n              </Row>\r\n              <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n                Countries in {region}\r\n              </div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0,\r\n                    },\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: \"\",\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\r\n                    \"Lowest Cases\",\r\n                    \"Lower Cases\",\r\n                    \"Average Cases\",\r\n                    \"Higher Cases\",\r\n                    \"Highest Cases\",\r\n                  ],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        lowest.length,\r\n                        lower.length,\r\n                        average.length,\r\n                        higher.length,\r\n                        highest.length,\r\n                      ],\r\n                      backgroundColor: colorsPie,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const TabsComponent = () => {\r\n    const [active, setActive] = useState(1);\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItemComponent\r\n              key={title}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setActive(id)}\r\n              isActive={active === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return active === id ? content : \"\";\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const TabItemComponent = ({\r\n    icon = \"\",\r\n    title = \"\",\r\n    onItemClicked = () =>\r\n      console.error(\"You passed no action to the component\"),\r\n    isActive = false,\r\n  }) => {\r\n    return (\r\n      <div\r\n        className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n        onClick={onItemClicked}\r\n      >\r\n        <i className={icon}></i>\r\n        <p className=\"tabitem__title\">{title}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={global ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"side\">\r\n            <div className={!global ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\">\r\n                  <Col xs={10} className=\"px-0 pt-2\">\r\n                    {region}\r\n                  </Col>\r\n                  <Col className=\"px-0\">\r\n                    <div\r\n                      style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                    >\r\n                      <Button\r\n                        // onClick={toggleAsia}\r\n                        onClick={handleClose}\r\n                        // size=\"lg\"\r\n                        variant=\"outline-info\"\r\n                        // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                        className=\"close button\"\r\n                      >\r\n                        <h6>x</h6>\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <TabsComponent\r\n                  countries={countries}\r\n                  index={index}\r\n                  region={region}\r\n                  casesMillion={casesMillion}\r\n                  activeMillion={activeMillion}\r\n                  criticalMillion={criticalMillion}\r\n                  deathsMillion={deathsMillion}\r\n                  tests={tests}\r\n                />\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n];\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DoughnutCases = ({\r\n  casesMillion,\r\n  activeMillion,\r\n  index,\r\n  colorsPie,\r\n  continentCountries,\r\n}) => {\r\n  // Create strata for Cases\r\n  const cases1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 < 50\r\n  );\r\n  const cases2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 100\r\n  );\r\n  const cases3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const cases4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const cases5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 35\r\n  );\r\n  const active5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 35\r\n  );\r\n\r\n  return (\r\n    <Row\r\n      className={\"box mt-2 pb-3\"}\r\n      style={{\r\n        color: \"#ccc\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"pt-5\"\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          color: \"#ccc\",\r\n        }}\r\n      >\r\n        {activeMillion[index] / 1000 < 5 ? (\r\n          <h6>Mild</h6>\r\n        ) : activeMillion[index] / 1000 < 10 ? (\r\n          <h6>Limited</h6>\r\n        ) : activeMillion[index] / 1000 < 15 ? (\r\n          <h6>Moderate</h6>\r\n        ) : activeMillion[index] / 1000 < 35 ? (\r\n          <h6>Serious</h6>\r\n        ) : (\r\n          <h6>Extreme</h6>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"py-2 \" style={{ color: \"#ccc\", fontSize: \"14px\" }}>\r\n       <strong>Regional Status</strong>\r\n      </div>\r\n      <div style={{ zIndex: 1 }}>\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  cases1.length,\r\n                  cases2.length,\r\n                  cases3.length,\r\n                  cases4.length,\r\n                  cases5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Cases\",\r\n                stack: \"0\",\r\n              },\r\n              {\r\n                data: [\r\n                  active1.length,\r\n                  active2.length,\r\n                  active3.length,\r\n                  active4.length,\r\n                  active5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Active\",\r\n                stack: \"0\",\r\n              },\r\n            ],\r\n\r\n            labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n          }}\r\n          options={{\r\n            elements: {\r\n              arc: {\r\n                // borderWidth: 0.5,\r\n                // borderColor: \"turquoise\",\r\n                borderColor: \"#212529\",\r\n                borderWidth: 1,\r\n              },\r\n            },\r\n            responsive: true,\r\n            maintainAspectRatio: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"\",\r\n            },\r\n            title: {\r\n              display: false,\r\n              text: \"\",\r\n            },\r\n            animation: {\r\n              animateScale: true,\r\n              animateRotate: true,\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n              callbacks: {\r\n                label: function (item, data) {\r\n                  console.log(data.labels, item);\r\n                  return (\r\n                    data.datasets[item.datasetIndex].label +\r\n                    \": \" +\r\n                    data.labels[item.index] +\r\n                    \": \" +\r\n                    data.datasets[item.datasetIndex].data[item.index]\r\n                  );\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        ></Doughnut>\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DoughnutCases;\r\n\r\nlet colorsCases = [\r\n \" #006390\",\r\n \" #7668b4\",\r\n \" #ffa500\",\r\n \" #ff6a67\",\r\n \"#d75ea4\",\r\n];\r\nlet colorsActive = [\"#0082be\", \"#ad93f9\", \"#ffa500\", \"#ff7872\", \"#ff76c8\"];\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DoughnutDeaths = ({\r\n  deathsMillion,\r\n  index,\r\n  colorsPie,\r\n  continentCountries,\r\n}) => {\r\n  // Create Strata for Deaths\r\n  const deaths1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 < 0.5\r\n  );\r\n  const deaths2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 0.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1\r\n  );\r\n  const deaths3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1.5\r\n  );\r\n  const deaths4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 3.5\r\n  );\r\n  const deaths5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 > 3.5\r\n  );\r\n\r\n  // Create Strata for Critical\r\n  const critical1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.criticalPerOneMillion / 1000 < 0.005\r\n  );\r\n  const critical2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.005 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.01\r\n  );\r\n  const critical3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.01 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.015\r\n  );\r\n  const critical4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.criticalPerOneMillion / 1000 >= 0.015 &&\r\n      selectedCountry.criticalPerOneMillion / 1000 < 0.035\r\n  );\r\n  const critical5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.criticalPerOneMillion / 1000 > 0.035\r\n  );\r\n\r\n  return (\r\n    <Row\r\n      className={\"box mt-2 pb-3\"}\r\n      style={{\r\n        color: \"#ccc\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"pt-5\"\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        {deathsMillion[index] / 1000 < 0.5 ? (\r\n          <h6>Mild</h6>\r\n        ) : deathsMillion[index] / 1000 < 1 ? (\r\n          <h6>Limited</h6>\r\n        ) : deathsMillion[index] / 1000 < 1.5 ? (\r\n          <h6>Moderate</h6>\r\n        ) : deathsMillion[index] / 1000 < 3.5 ? (\r\n          <h6>Serious</h6>\r\n        ) : (\r\n          <h6>Extreme</h6>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"py-2 \" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n        Country Analysis\r\n      </div>\r\n      <div style={{ zIndex: 1 }}>\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  deaths1.length,\r\n                  deaths2.length,\r\n                  deaths3.length,\r\n                  deaths4.length,\r\n                  deaths5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Deaths\",\r\n                stack: \"0\",\r\n              },\r\n\r\n              {\r\n                data: [\r\n                  critical1.length,\r\n                  critical2.length,\r\n                  critical3.length,\r\n                  critical4.length,\r\n                  critical5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Critical\",\r\n                stack: \"0\",\r\n              },\r\n            ],\r\n            labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n          }}\r\n          options={{\r\n            elements: {\r\n              arc: {\r\n                borderWidth: 0.5,\r\n                borderColor: \"turquoise\",\r\n              },\r\n            },\r\n            responsive: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"\",\r\n            },\r\n            title: {\r\n              display: false,\r\n              text: \"\",\r\n            },\r\n            animation: {\r\n              animateScale: true,\r\n              animateRotate: true,\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n              callbacks: {\r\n                label: function (item, data) {\r\n                  console.log(data.labels, item);\r\n                  return (\r\n                    data.datasets[item.datasetIndex].label +\r\n                    \": \" +\r\n                    data.labels[item.index] +\r\n                    \": \" +\r\n                    data.datasets[item.datasetIndex].data[item.index]\r\n                  );\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        ></Doughnut>\r\n      </div>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DoughnutDeaths;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\n\r\nconst HorizontalChart = ({\r\n  countryNames,\r\n  activePerOneMillion,\r\n  casesPerOneMillion,\r\n  testsPerOneMillion,\r\n  criticalPerOneMillion,\r\n  deathsPerOneMillion,\r\n  recoveredPerOneMillion,\r\n  colorCases,\r\n  colorActivity,\r\n  colorDeaths,\r\n  index,\r\n}) => {\r\n\r\n  return (\r\n    <Row\r\n      className={\"box mt-2\"}\r\n      style={{\r\n        color: \"#fff\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    \r\n      }}\r\n    >\r\n      <strong style={{ color: \"#ccc\", fontSize: \"14px\" }} className=\"pt-2\">\r\n        By Country / 1k\r\n      </strong>\r\n\r\n      <HorizontalBar\r\n        height={countryNames.length * 40}\r\n        options={{\r\n          tooltips: {\r\n            // position: 'nearest',\r\n            yPadding: 10,\r\n            xPadding: 10,\r\n            xAlign: \"right\",\r\n            cornerRadius: 2,\r\n            backgroundColor: \"#212529\",\r\n\r\n            borderColor: \"turquoise\",\r\n            borderWidth: 1,\r\n            displayColors: true,\r\n            bodyFontSize: 12,\r\n\r\n            labels: {\r\n              usePointStyle: true,\r\n            \r\n            \r\n            },\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          hover: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          legend: {\r\n            display: false,\r\n            position: \"bottom\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              fontSize: 12,\r\n              fontColor: \"#fff\",\r\n            },\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 10,\r\n              top: 0,\r\n              bottom: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                display: false,\r\n                type: \"logarithmic\",\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n        data={{\r\n          labels: countryNames,\r\n          datasets: [\r\n            // {\r\n            //   label: \"Active\",\r\n            //   data: activePerOneMillion,\r\n            //   backgroundColor: colorActivity,\r\n            // //   backgroundColor: \"#d61e73\",\r\n            // borderColor: \"#212529\",\r\n            // borderWidth: 1,\r\n            //   stack: \"0\",\r\n            // },\r\n            {\r\n              label: \"Cases\",\r\n              data: casesPerOneMillion,\r\n              backgroundColor: colorCases,\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n\r\n            {\r\n              label: \"Tests\",\r\n              data: testsPerOneMillion,\r\n              backgroundColor: \"teal\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Critical\",\r\n              data: criticalPerOneMillion,\r\n              backgroundColor: \"#d61e73\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Deaths\",\r\n              data: deathsPerOneMillion,\r\n              backgroundColor: colorDeaths,\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n\r\n            {\r\n              label: \"Recovered\",\r\n              data: recoveredPerOneMillion,\r\n              backgroundColor: \"teal\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n\r\n      {/* {countryNames.length < 15 && (\r\n          <>\r\n            <div\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              className=\"pt-2 pb-3\"\r\n            >\r\n              Active Cases\r\n            </div>\r\n            <div className=\"pt-2 pb-2\"></div>\r\n            <HorizontalBar\r\n              height={countryNames.length * 50}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                legend: {\r\n                  display: false,\r\n                  position: \"\",\r\n                },\r\n                layout: {\r\n                  padding: {\r\n                    left: 20,\r\n                    right: 0,\r\n                    top: 0,\r\n                    bottom: 0,\r\n                  },\r\n                },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Active/1000\",\r\n                    data: activePerOneMillion,\r\n                    backgroundColor: colorActive,\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </>\r\n        )} */}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default HorizontalChart;\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { HorizontalBar, Line, Doughnut } from \"react-chartjs-2\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport DoughnutCases from \"./DoughnutCases\";\r\nimport DoughnutDeaths from \"./DoughnutDeaths\";\r\nimport HorizontalChart from \"./HorizontalChart\";\r\n\r\nconst Menu = ({\r\n  countries,\r\n  region,\r\n  index,\r\n  open,\r\n  casesMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  deathsMillion,\r\n  testsMillion,\r\n  recoveredMillion,\r\n  cases,\r\n  tests,\r\n  deaths,\r\n  critical,\r\n  active,\r\n  recovered,\r\n  population,\r\n  todayCases,\r\n  todayDeaths,\r\n  todayRecovered,\r\n  handleClose,\r\n}) => {\r\n\r\n   \r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.sort((a, b) =>\r\n   (a.casesPerOneMillion )\r\n    < (b.casesPerOneMillion ) ? 1 : -1)\r\n  \r\n  .filter(\r\n    (country) => country.continent === region\r\n  );\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries\r\n    .filter(\r\n      (country) => country.continent === region\r\n      //   && country.country.length <= 12\r\n    )\r\n\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  // .filter((country) => country.country.length <= 12)\r\n//   console.log(continentCountries);\r\n\r\n  //Max Stats\r\n  const max = Math.max(\r\n    ...continentCountries\r\n    //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.casesPerOneMillion)\r\n  );\r\n  console.log(continentCountries);\r\n  console.log(max, \"MAX\");\r\n\r\n  const maxName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.casesPerOneMillion === max\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxActive = Math.max(\r\n    ...continentCountries\r\n    //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.activePerOneMillion)\r\n  );\r\n  console.log(continentCountries);\r\n\r\n  const maxActiveName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.activePerOneMillion === maxActive\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxTests = Math.max(\r\n    ...continentCountries.map((item) => item.testsPerOneMillion)\r\n  );\r\n\r\n  const maxTestsName = continentCountries\r\n    .filter(\r\n      (country) =>\r\n        //   country.country.length <= 12 &&\r\n        country.testsPerOneMillion === maxTests\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxCritical = Math.max(\r\n    ...continentCountries\r\n    //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.criticalPerOneMillion)\r\n  );\r\n  const maxCriticalName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.criticalPerOneMillion === maxCritical\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxDeaths = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.deathsPerOneMillion)\r\n  );\r\n  const maxDeathsName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.deathsPerOneMillion === maxDeaths\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxRecovered = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.recoveredPerOneMillion)\r\n  );\r\n  const maxRecoveredName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.recoveredPerOneMillion === maxRecovered\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  \r\n  \r\n  \r\n    //   console.log(deathsPerOneMillion, \"deathsPerOneMillion\");\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(0)\r\n  );\r\n  const recoveredPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.recoveredPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  //Color Schemes\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      backgroundcolor.push(\"#444e86\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      backgroundcolor.push(\"#955196\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      backgroundcolor.push(\"#ffa600\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      backgroundcolor.push(\"#ff6e54\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      backgroundcolor.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n    if (casesPerOneMillion[i] < 50) {\r\n      colorCases.push(\"#444e86\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) {\r\n      colorCases.push(\"#955196\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) {\r\n      colorCases.push(\"#ef9b00\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) {\r\n      colorCases.push(\"#ff6e54\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 350) {\r\n      colorCases.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 3.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 3.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorCase = [];\r\n  for (let i = 0; i < casesMillion.length; i++) {\r\n    if (casesMillion[i] / 1000 < 50) {\r\n      colorCase.push(\"#5d67a1\");\r\n      //   blue\r\n    }\r\n    if (casesMillion[i] / 1000 >= 50 && casesMillion[i] / 1000 < 100) {\r\n      colorCase.push(\"#955196\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 100 && casesMillion[i] / 1000 < 150) {\r\n      colorCase.push(\"#cf8c11\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 150 && casesMillion[i] / 1000 < 350) {\r\n      colorCase.push(\"#ff6e54\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 350) {\r\n      colorCase.push(\"#dd5182\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  const colorDeath = [];\r\n  for (let i = 0; i < deathsMillion.length; i++) {\r\n    if (deathsMillion[i] / 1000 < 0.5) {\r\n      colorDeath.push(\"#5d67a1\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 0.5 && deathsMillion[i] / 1000 < 1.0) {\r\n      colorDeath.push(\"#955196\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.0 && deathsMillion[i] / 1000 < 1.5) {\r\n      colorDeath.push(\"#ffa600\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.5 && deathsMillion[i] / 1000 < 3.5) {\r\n      colorDeath.push(\"#cf8c11\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 3.5) {\r\n      colorDeath.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActivity = [];\r\n  for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n    if (casesPerOneMillion[i]  < 50) {\r\n      colorActivity.push(\"#00a5f1\");\r\n      //   blue\r\n    }\r\n    if (casesPerOneMillion[i]  >= 50 && casesPerOneMillion[i] < 100) {\r\n      colorActivity.push(\"#ad93f9\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i]  < 150) {\r\n      colorActivity.push(\"#ffa600\");\r\n    }\r\n    if (casesPerOneMillion[i]  >= 150 && casesPerOneMillion[i] < 350) {\r\n      colorActivity.push(\"#ff7972\");\r\n    }\r\n    if (casesPerOneMillion[i]  >= 350) {\r\n      colorActivity.push(\"#ff76c8\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activeMillion.length; i++) {\r\n    if (activeMillion[i] / 1000 < 5) {\r\n      colorActive.push(\"#5d67a1\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 5 && activeMillion[i] / 1000 < 10) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 10 && activeMillion[i] / 1000 < 15) {\r\n      colorActive.push(\"#cf8c11\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 15 && activeMillion[i] / 1000 < 35) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 35) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"Cases\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\", border: \"\" }} className=\"px-3\">\r\n            {/* COLUMN ONE */}\r\n            <Col className=\"subtitle\">\r\n              <Row\r\n                className=\"box mb-2 pt-3 pb-3 \"\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  //   border: \"2px solid\",\r\n                  //   borderColor: colorCase[index],\r\n                  //   borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <div className=\"pr-3 pl-0\" style={{}}>\r\n                  <h1 className=\"mb-0\">\r\n                    {(casesMillion[index] / 1000).toFixed(1)}\r\n                    {casesPerOneMillion[0] / 1000 <=\r\n                    casesPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: colorCase[index] }}>Cases/1k</h6>\r\n                </div>\r\n                <Animated\r\n                  animationIn=\"fadeInUp\"\r\n                  isVisible={true}\r\n                >\r\n                  <div style={{ color: colorActive[index] }}>Today&nbsp;</div>\r\n                  <strong className=\"mb-0\">\r\n                    +\r\n                    {numberWithCommas(\r\n                      (todayCases[index] / 1000).toFixed(0) + \"k\"\r\n                    )}\r\n                  </strong> \r\n                  </ Animated >\r\n                {casesMillion[index] / 1000 <= 50 ? (\r\n                  <Badge\r\n                    variant=\"success\"\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    MILD\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 100 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    LIMITED\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 150 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    MODERATE\r\n                  </Badge>\r\n                ) : casesMillion[index] / 1000 <= 350 ? (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    SERIOUS\r\n                  </Badge>\r\n                ) : (\r\n                  <Badge\r\n                    text=\"dark\"\r\n                    className=\"badge\"\r\n                    style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                  >\r\n                    EXTREME\r\n                  </Badge>\r\n                )}\r\n              </Row>\r\n              <Row\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  border: \"1px solid\",\r\n                  borderColor: \"#2a3d3d\",\r\n                  borderRadius: \"5px\",\r\n                  paddingLeft: \"10px\",\r\n                }}\r\n              >\r\n                <HorizontalBar\r\n                  height={13}\r\n                  width={100}\r\n                  options={{\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        fontSize: 12,\r\n                      },\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          display: false,\r\n                          stacked: true,\r\n                          type: \"logarithmic\",\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [region],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        // backgroundColor: \"#d61e73\",\r\n                        backgroundColor: colorActive[index],\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [activeMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n\r\n                      {\r\n                        label: \"Cases\",\r\n                        backgroundColor: colorCase[index],\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [casesMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        backgroundColor: \"teal\",\r\n                        borderColor: \"#212529\",\r\n                        borderWidth: 1,\r\n                        data: [testsMillion[index] / 10000],\r\n                        stack: 0,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\"box pb-4 pt-3 px-2 mr-2\" >\r\n                  <div  style={{ color: colorActive[index] }}>Active&nbsp;</div>\r\n                  <strong className=\"\">\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n\r\n                <Col className=\"box pb-4 pt-3 px-2\" >\r\n                  <div className=\"\" style={{ color: 'teal' }}>Positive&nbsp;</div>\r\n                  <strong >\r\n                    {numberWithCommas(\r\n                      (casesMillion[index] / testsMillion[index] * 100).toFixed(2) + \"%\"\r\n                    )}\r\n                  </strong>\r\n                </Col>\r\n\r\n                </Row>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\n\r\n              <Row className=\"subtitle box pt-1 mt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={120}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorActive[index],\r\n                      },\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorCase[index],\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col className=\"box px-2 pt-4 pb-3 mr-2\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(activeMillion[index] / 1000).toFixed(2)}\r\n                    {activePerOneMillion[0] / 1000 <=\r\n                    activePerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorActive[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorActive[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: colorActive[index] }}>Active/1k</h6>\r\n\r\n                 <h6> {activeMillion[index] / 1000 <= 5 ? (\r\n                    <Badge\r\n                      variant=\"success\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorActive[index] }}\r\n                    >\r\n                      MILD\r\n                    </Badge>\r\n                  ) : activeMillion[index] / 1000 <= 10 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorActive[index] }}\r\n                    >\r\n                      LIMITED\r\n                    </Badge>\r\n                  ) : activeMillion[index] / 1000 <= 15 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorActive[index] }}\r\n                    >\r\n                      MODERATE\r\n                    </Badge>\r\n                  ) : activeMillion[index] / 1000 <= 35 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorActive[index] }}\r\n                    >\r\n                      SERIOUS\r\n                    </Badge>\r\n                  ) : (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorActive[index] }}\r\n                    >\r\n                      EXTREME\r\n                    </Badge>\r\n                  )}</h6>\r\n                </Col>\r\n                <Col className=\"box px-2 pt-4 pb-3\">\r\n                  <h4 className=\"mb-0\">\r\n                    {(testsMillion[index] / 1000).toFixed(0)}\r\n                    {testsPerOneMillion[0] / 1000 <=\r\n                    testsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"teal\" }}>Tests/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n       \r\n\r\n\r\n            \r\n\r\n              <DoughnutCases\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                index={index}\r\n                colorsPie={colorsPie}\r\n                continentCountries={continentCountries}\r\n              />\r\n         \r\n\r\n              <Row\r\n        className=\"box subtitle mt-2 pt-1\"\r\n    \r\n      >\r\n           {casesMillion[index] / 1000 < 50 ? (\r\n          <h6>&nbsp;Mild</h6>\r\n        ) : casesMillion[index] / 1000 < 100 ? (\r\n          <h6>&nbsp;Limited</h6>\r\n        ) : casesMillion[index] / 1000 < 150 ? (\r\n          <h6>&nbsp;Moderate</h6>\r\n        ) : casesMillion[index] / 1000 < 350 ? (\r\n          <h6>&nbsp;Serious</h6>\r\n        ) : (\r\n          <h6>&nbsp;Extreme</h6> \r\n        )}\r\n\r\n        <h6>&nbsp;cases and </h6>\r\n        \r\n        {activeMillion[index] / 1000 < 5 ? (\r\n          <h6>&nbsp;mild </h6>\r\n        ) : activeMillion[index] / 1000 < 10 ? (\r\n          <h6>&nbsp;limited </h6>\r\n        ) : activeMillion[index] / 1000 < 15 ? (\r\n          <h6>&nbsp;moderate </h6>\r\n        ) : activeMillion[index] / 1000 < 35 ? (\r\n          <h6>&nbsp;serious </h6>\r\n        ) : (\r\n          <h6>&nbsp;extreme </h6> \r\n        )} \r\n         <h6>&nbsp;activity with&nbsp;</h6>\r\n\r\n          {testsMillion[index] / 1000 < 100 ? (\r\n          <h6>very low</h6>\r\n        ) : testsMillion[index] / 1000 < 1000 ? (\r\n          <h6>limited</h6>\r\n        ) : testsMillion[index] / 1000 < 1500 ? (\r\n          <h6>moderate</h6>\r\n        ) : testsMillion[index] / 1000 < 3500 ? (\r\n          <h6>high</h6>\r\n        ) : (\r\n          <h6>very high</h6> \r\n        )}\r\n        <h6>&nbsp;testing.</h6>\r\n     \r\n   \r\n       \r\n     </Row>\r\n\r\n\r\n{/* <Row className=\"subtitle mt-2 \">\r\n                <Col className=\"box py-3 px-2 mr-2\" >\r\n            \r\n                </Col>\r\n          \r\n                <Col className=\"box py-3 px-2\">\r\n                  <div style={{ color: \"teal\" }}>Tests&nbsp;</div>\r\n                  <strong className=\"mb-0\">\r\n                    {(tests[index] / population[index]).toFixed(2)}pp\r\n                  </strong>\r\n                </Col>\r\n                </Row> */}\r\n\r\n             \r\n         \r\n            \r\n            </Col>\r\n\r\n            {/* COLUMN TWO */}\r\n\r\n            <Col\r\n              className=\"ml-2 \"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n                // marginRight: \"5px\",\r\n              }}\r\n            >\r\n              <Row className=\"box subtitle px-4 pb-1 pt-2\">\r\n                <a id={maxName}>\r\n                  {maxName}&nbsp;\r\n                  {numberWithCommas((max / 1000).toFixed(1))} &nbsp;\r\n         \r\n                <h6 style={{ color: colorCase[index] }}>\r\n                  Most Cases/1k &nbsp;\r\n                </h6></a>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n         \r\n                  {maxActiveName}&nbsp;\r\n                  {numberWithCommas((maxActive / 1000).toFixed(1))} &nbsp;\r\n      \r\n                <h6 style={{ color: colorActive[index] }}>\r\n                  Most Active/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2 pb-1 pt-2\">\r\n      \r\n                  {maxTestsName}&nbsp;\r\n                  {numberWithCommas((maxTests / 1000).toFixed(0))} &nbsp;\r\n          \r\n                <h6 style={{ color: \"teal\" }}>Most Tests/1k &nbsp;</h6>\r\n              </Row>\r\n              <HorizontalChart\r\n                countryNames={countryNames}\r\n                activePerOneMillion={activePerOneMillion}\r\n                colorActivity={colorActivity}\r\n                casesPerOneMillion={casesPerOneMillion}\r\n                colorCases={colorCases}\r\n                testsPerOneMillion={testsPerOneMillion}\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                testsMillion={testsMillion}\r\n                index={index}\r\n                region={region}\r\n                colorCase={colorCase}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Deaths\",\r\n      // icon: <a id='check1'></a>,\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"90vh\", border: \"\" }} className=\"px-3\">\r\n            {/* COLUMN ONE */}\r\n            <Col className=\"subtitle\">\r\n              <Row\r\n                className=\"box mb-2\"\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  //   border: \"2px solid\",\r\n                  //   borderColor: colorCase[index],\r\n                  //   borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <div className=\" px-3\" style={{}}>\r\n                  <h1 className=\"mb-0\">\r\n                    {/* <CountUp\r\n                  start={(casesMillion[index] / 1000).toFixed(1) - 5}\r\n                  end={(casesMillion[index] / 1000).toFixed(1)}\r\n                  duration={0.2}\r\n                  separator=\",\"\r\n                  decimals={1}\r\n                /> */}\r\n                    {(deathsMillion[index] / 1000).toFixed(2)}\r\n                    {deathsPerOneMillion[0] / 1000 <=\r\n                    deathsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorDeath[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorDeath[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: colorDeath[index] }}>Deaths/1k</h6>\r\n                </div>\r\n              </Row>\r\n              <Row\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  border: \"1px solid\",\r\n                  borderColor: \"#2a3d3d\",\r\n                  borderRadius: \"5px\",\r\n                  paddingLeft: \"10px\",\r\n                }}\r\n              >\r\n                <HorizontalBar\r\n                  height={12}\r\n                  width={100}\r\n                  options={{\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    responsive: true,\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        fontSize: 12,\r\n                      },\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          display: false,\r\n                          stacked: true,\r\n                          type: \"logarithmic\",\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [region],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Critical\",\r\n                        backgroundColor: \"#d61e73\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [criticalMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n\r\n                      {\r\n                        label: \"Deaths\",\r\n                        backgroundColor: colorDeath[index],\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [deathsMillion[index] / 1000],\r\n                        stack: 0,\r\n                      },\r\n                      {\r\n                        label: \"Recovered\",\r\n                        backgroundColor: \"teal\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        data: [recoveredMillion[index] / 10000],\r\n                        stack: 0,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col\r\n                  className=\"box p-1 mr-1\"\r\n                  //   style={{ border: \"2px solid #e83e8c\", borderRadius: \"5px\" }}\r\n                >\r\n                  <h4 className=\"mb-0\">\r\n                    {(criticalMillion[index] / 1).toFixed(2)}\r\n                    {criticalPerOneMillion[0] / 1 <=\r\n                    criticalPerOneMillion[5] / 1 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#e83e8c\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#e83e8c\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"#e83e8c\" }}>Critical</h6>\r\n                </Col>\r\n                <Col\r\n                  className=\"box p-1\"\r\n                  //   style={{ border: \"2px solid teal\", borderRadius: \"5px\" }}\r\n                >\r\n                  <h4 className=\"mb-0\">\r\n                    {(recoveredMillion[index] / 1000).toFixed(0)}\r\n                    {recoveredPerOneMillion[0] / 1000 <=\r\n                    recoveredPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h4>\r\n                  <h6 style={{ color: \"teal\" }}>Recovered/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <h6>\r\n                {\" \"}\r\n                {(activeMillion[index] / 1000).toFixed(2)}Active/1,000\r\n              </h6>{\" \"}\r\n              <h6>{(testsMillion[index] / 1000).toFixed(2)}Tests/1,000</h6> */}\r\n\r\n              <Row className=\"subtitle box pt-1 mt-2\">\r\n                {/* <div\r\n                className=\"pt-1 pb-1 ml-0\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Cases Trend\r\n              </div> */}\r\n                <Line\r\n                  width={160}\r\n                  height={120}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Critical\",\r\n                        data: criticalPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"#e83e8c\",\r\n                      },\r\n                      {\r\n                        label: \"Deaths\",\r\n                        data: deathsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorDeath[index],\r\n                      },\r\n                      {\r\n                        label: \"Recovered\",\r\n                        data: recoveredPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <DoughnutDeaths\r\n                deathsMillion={deathsMillion}\r\n                criticalMillion={criticalMillion}\r\n                recoveredMillion={recoveredMillion}\r\n                index={index}\r\n                colorsPie={colorsPie}\r\n                continentCountries={continentCountries}\r\n              />\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\"box py-4\" xs={6}>\r\n                  <span style={{ color: \"#d61e73\" }}>Critical&nbsp;</span>\r\n                  {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n                  2.5 ? (\r\n                    <Badge\r\n                      variant=\"success\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1 }}\r\n                    >\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n                    4.5 ? (\r\n                    <Badge\r\n                      variant=\"danger\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1 }}\r\n                    >\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    {(\r\n                      (criticalMillion[index] / deathsMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box py-4 px-4\" xs={6}>\r\n                  <span style={{ color: colorDeath[index] }}>Today&nbsp;</span>\r\n                  {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    +{numberWithCommas((todayDeaths[index] / 1).toFixed(0))}\r\n                  </strong>\r\n                </Col>\r\n\r\n                <Col className=\"box py-4\" xs={6}>\r\n                  <span style={{ color: \"teal\" }}>Recovered &nbsp;</span>\r\n                  <span>\r\n                    {(recovered[index] / cases[index]) * 100 <= 100 ? (\r\n                      <Badge\r\n                        variant=\"danger\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{ zIndex: 1 }}\r\n                      >\r\n                        POOR\r\n                      </Badge>\r\n                    ) : (recovered[index] / cases[index]) * 100 >= 250 ? (\r\n                      <Badge\r\n                        variant=\"success\"\r\n                        text=\"dark\"\r\n                        className=\"badge\"\r\n                        style={{ zIndex: 1 }}\r\n                      >\r\n                        GOOD\r\n                      </Badge>\r\n                    ) : (\r\n                      \" \"\r\n                    )}\r\n                  </span>\r\n                  <strong className=\"mb-0\">\r\n                    {(recovered[index] / cases[index]).toFixed(2)}pp\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"box pt-2\" style={{ color: \"teal\" }} xs={6}>\r\n                  {(recovered[index] / cases[index]).toFixed(0) <= 0.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 1.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 2.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i\r\n                          className=\"fa fa-male\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (recovered[index] / cases[index]).toFixed(0) <= 3.5 ? (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i\r\n                          className=\"fa fa-female\"\r\n                          style={{ color: \"#474747\" }}\r\n                        ></i>\r\n                      </h2>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <h2 className=\"mb-0\">\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                      <h2>\r\n                        <i className=\"fa fa-male\"></i>\r\n                        <i className=\"fa fa-female\"></i>\r\n                      </h2>\r\n                    </>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <div\r\n              className=\"pt-3 pb-2 ml-4\"\r\n              style={{ color: \"grey\", fontSize: \"14px\" }}\r\n            >\r\n              Cases Statistics\r\n            </div> */}\r\n            </Col>\r\n\r\n            {/* COLUMN TWO */}\r\n\r\n            <Col\r\n              className=\"ml-2 \"\r\n              style={{\r\n                height: \"97%\",\r\n                overflowY: \"scroll\",\r\n                // marginRight: \"5px\",\r\n              }}\r\n            >\r\n              <Row className=\"box subtitle px-4\">\r\n                <strong>\r\n                  {maxDeathsName}&nbsp;\r\n                  {numberWithCommas((maxDeaths / 1000).toFixed(2))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: colorDeath[index] }}>\r\n                  Most Deaths/1k &nbsp;\r\n                </h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-4 mt-2\">\r\n                <strong>\r\n                  {maxCriticalName}&nbsp;\r\n                  {numberWithCommas((maxCritical / 1000).toFixed(2))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: \"#d61e73\" }}>Most Critical/1k &nbsp;</h6>\r\n              </Row>\r\n              <Row className=\"box subtitle px-3 mt-2\">\r\n                <strong>\r\n                  {maxRecoveredName}&nbsp;\r\n                  {numberWithCommas((maxRecovered / 1000).toFixed(0))} &nbsp;\r\n                </strong>\r\n                <h6 style={{ color: \"teal\" }}>Most Recovered/1k &nbsp;</h6>\r\n              </Row>\r\n              <HorizontalChart\r\n                countryNames={countryNames}\r\n                criticalPerOneMillion={criticalPerOneMillion}\r\n                //   colorCritical={colorCritical}\r\n                deathsPerOneMillion={deathsPerOneMillion}\r\n                colorDeaths={colorDeaths}\r\n                recoveredPerOneMillion={recoveredPerOneMillion}\r\n                deathsMillion={deathsMillion}\r\n                criticalMillion={criticalMillion}\r\n                recoveredMillion={recoveredMillion}\r\n                index={index}\r\n                region={region}\r\n                colorCase={colorCase}\r\n                colorActivity={colorActivity}\r\n              />\r\n\r\n              {/* <Row\r\n      className={\"box mt-2\"}\r\n      style={{\r\n        color: \"#fff\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">\r\n        Country Stats / 1k\r\n      </div>\r\n\r\n      <HorizontalBar\r\n        height={countryNames.length * 40}\r\n        options={{\r\n\r\n          tooltips: {\r\n            yPadding: 10,\r\n            xPadding: 10,\r\n            xAlign: \"right\",\r\n            cornerRadius: 2,\r\n            backgroundColor: \"#212529\",\r\n\r\n            borderColor: \"turquoise\",\r\n            borderWidth: 1,\r\n            displayColors: true,\r\n            bodyFontSize: 12,\r\n\r\n            labels: {\r\n              usePointStyle: true,\r\n              labelFontColor: \"orange\",\r\n              pointColor: \"red\",\r\n            },\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          hover: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          legend: {\r\n            display: false,\r\n            position: \"bottom\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              fontSize: 12,\r\n              fontColor: \"#fff\",\r\n            },\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 10,\r\n              top: 0,\r\n              bottom: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                display: false,\r\n                type: \"logarithmic\",\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n        data={{\r\n          labels: countryNames,\r\n          datasets: [\r\n      \r\n            {\r\n              label: \"Critical\",\r\n              data: criticalPerOneMillion,\r\n              backgroundColor: \"#d61e73\",\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Deaths\",\r\n              data: deathsPerOneMillion,\r\n              backgroundColor: colorDeaths,\r\n              stack: \"0\",\r\n            },\r\n\r\n            {\r\n              label: \"Recovered\",\r\n              data: recoveredPerOneMillion,\r\n              backgroundColor: \"teal\",\r\n              stack: \"0\",\r\n            },\r\n          ],\r\n       \r\n        }}\r\n      />\r\n    </Row> */}\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      title: \"Mortality\",\r\n      // icon: <a id='check1'></a>,\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"86vh\" }}>\r\n            <Col className=\"mr-3 mt-2\">\r\n              <Row className=\"box p-2 ml-1 mb-0\" style={{ color: \"#ccc\" }}>\r\n                <h1 className=\"mb-0\">\r\n                  {((deathsMillion[index] / casesMillion[index]) * 100).toFixed(\r\n                    2\r\n                  )}\r\n                  {mortalityRate[0] / 1000 <= mortalityRate[5] / 1000 ? (\r\n                    <i\r\n                      style={{ fontSize: \"0.7em\", color: \"green\" }}\r\n                      className=\"fa fa-arrow-up\"\r\n                    ></i>\r\n                  ) : (\r\n                    <i\r\n                      style={{ fontSize: \"0.7em\", color: \"red\" }}\r\n                      className=\"fa fa-arrow-down\"\r\n                    ></i>\r\n                  )}\r\n                </h1>\r\n\r\n                <h5>Deaths / Cases</h5>\r\n              </Row>\r\n\r\n              <Row\r\n                className={\"box ml-1 mt-3 pb-2\"}\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"pt-5\"\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"grey\",\r\n                  }}\r\n                >\r\n                  {deathsMillion[index] / casesMillion[index] < 0.005 ? (\r\n                    <h6>Mild</h6>\r\n                  ) : deathsMillion[index] / casesMillion[index] < 0.001 ? (\r\n                    <h6>Contained</h6>\r\n                  ) : deathsMillion[index] / casesMillion[index] < 0.015 ? (\r\n                    <h6>Moderate</h6>\r\n                  ) : deathsMillion[index] / casesMillion[index] < 0.02 ? (\r\n                    <h6>Serious</h6>\r\n                  ) : (\r\n                    <h6>Extreme</h6>\r\n                  )}\r\n                </div>\r\n\r\n                <div\r\n                  className=\"py-2 \"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Country Analysis\r\n                </div>\r\n\r\n                {/* <Doughnut\r\n                  width={170}\r\n                  options={{\r\n                    elements: {\r\n                      arc: {\r\n                        borderWidth: 0,\r\n                      },\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"\",\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\r\n                      \"Lowest Mortality\",\r\n                      \"Lower Mortality\",\r\n                      \"Average Mortality\",\r\n                      \"Higher Mortality\",\r\n                      \"Highest Mortality\",\r\n                    ],\r\n                    datasets: [\r\n                      {\r\n                        data: [\r\n                          lowest.length,\r\n                          lower.length,\r\n                          average.length,\r\n                          higher.length,\r\n                          highest.length,\r\n                        ],\r\n                        backgroundColor: colorsPie,\r\n                      },\r\n                    ],\r\n                  }}\r\n                ></Doughnut> */}\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box pt-1 ml-1 mt-3\">\r\n                <div\r\n                  className=\"pt-1 pb-1 ml-0\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Mortality Trend\r\n                </div>\r\n                <Line\r\n                  width={160}\r\n                  height={110}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Cases / 1000\",\r\n                        data: mortalityRate,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <div\r\n                className=\"pt-3 pb-3 ml-4\"\r\n                style={{ color: \"grey\", fontSize: \"14px\" }}\r\n              >\r\n                Mortality Statistics\r\n              </div>\r\n              <Row\r\n                className=\"subtitle ml-1\"\r\n                style={{ border: \"1px solid #2a3d3d\", borderRadius: \"5px\" }}\r\n              >\r\n                <Col className=\"px-2 pt-3 pb-4 mr-1\">\r\n                  Recovery\r\n                  {(activeMillion[index] / casesMillion[index]) * 100 <= 2.5 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (activeMillion[index] / casesMillion[index]) * 100 >=\r\n                    4.5 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    {(\r\n                      (recoveredMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </strong>\r\n                </Col>\r\n                <Col className=\"px-3 pt-3 pb-1 ml-1\">\r\n                  Today\r\n                  {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                  0.005 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (criticalMillion[index] / casesMillion[index]) * 100 >=\r\n                    0.015 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    +{(todayRecovered[index] / 1000).toFixed(0) + \"k\"}\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"subtitle ml-0\">\r\n                <Col className=\"box p-2  mr-1 mt-3\">\r\n                  {/* Deaths\r\n                  {(deathsMillion[index] / casesMillion[index]) * 100 <= 1.0 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (deathsMillion[index] / casesMillion[index]) * 100 >=\r\n                    2.0 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <div className=\"mb-0\">\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </div> */}\r\n                  <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            tests[index] / population[index],\r\n                            1 - tests[index] / population[index],\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut>\r\n                </Col>\r\n                <Col className=\"box px-4 py-3 ml-1 mt-3\">\r\n                  Vac'd\r\n                  {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                      LOW\r\n                    </Badge>\r\n                  ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                    <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                      HIGH\r\n                    </Badge>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                  <strong className=\"mb-0\">\r\n                    {(tests[index] / population[index]).toFixed(2) * 100}%\r\n                  </strong>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\" ml-0\"></Row>\r\n            </Col>\r\n\r\n            {/* COLUMN TWO */}\r\n            <Col\r\n              className=\"\"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n              }}\r\n            >\r\n              <Row\r\n                className={\"box mr-0 mt-2\"}\r\n                style={{\r\n                  color: \"#fff\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                  className=\"pt-2\"\r\n                >\r\n                  Mortality Per Country\r\n                </div>\r\n\r\n                <HorizontalBar\r\n                  height={countryNames.length * 50}\r\n\r\n                  options={{\r\n                    onClick: function (evt, element) {\r\n                      if (element.length > 0) {\r\n                        console.log(element, element[0]._datasetIndex);\r\n                      }\r\n                    },\r\n                    maintainAspectRatio: true,\r\n                    hover: {\r\n                      mode: \"index\",\r\n                      intersect: false,\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"\",\r\n                    },\r\n                    layout: {\r\n                      padding: {\r\n                        left: 20,\r\n                        right: 0,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: countryNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Mortality/1000\",\r\n                        data: mortalityRate,\r\n                        backgroundColor: backgroundcolor,\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n\r\n                {countryNames.length < 15 && (\r\n                  <>\r\n                    <div\r\n                      style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                      className=\"pt-2 pb-3\"\r\n                    >\r\n                      Recovered Per Country\r\n                    </div>\r\n                    <div className=\"pt-2 pb-2\"></div>\r\n                    <HorizontalBar\r\n                      height={countryNames.length * 50}\r\n                      options={{\r\n                        maintainAspectRatio: true,\r\n                        legend: {\r\n                          display: false,\r\n                          position: \"\",\r\n                        },\r\n                        layout: {\r\n                          padding: {\r\n                            left: 20,\r\n                            right: 0,\r\n                            top: 0,\r\n                            bottom: 0,\r\n                          },\r\n                        },\r\n                      }}\r\n                      data={{\r\n                        labels: countryNames,\r\n                        datasets: [\r\n                          {\r\n                            label: \"Active/1000\",\r\n                            data: recoveredPerOneMillion,\r\n                            backgroundColor: colorActive,\r\n                          },\r\n                        ],\r\n                      }}\r\n                    />\r\n                  </>\r\n                )}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n    // {\r\n    //   id: 4,\r\n    //   title: \"Mortality\",\r\n    //   content: (\r\n    //     <>\r\n    //       <Row style={{ height: \"88vh\" }}>\r\n    //         <Col className=\"px-0 ml-3\">\r\n    //           <Row className=\"box p-2 my-2 mr-2 ml-1\" style={{ color: \"#ddd\" }}>\r\n    //             <h1>{mortalityRate[index]}%</h1>\r\n\r\n    //             <h6>Case Mortality</h6>\r\n    //           </Row>\r\n\r\n    //           <Row className=\"subtitle px-3 pt-2\">\r\n    //             <Line\r\n    //               width={160}\r\n    //               height={100}\r\n    //               options={{\r\n    //                 legend: {\r\n    //                   display: false,\r\n    //                   position: \"bottom\",\r\n    //                 },\r\n    //               }}\r\n    //               data={{\r\n    //                 labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                 datasets: [\r\n    //                   {\r\n    //                     label: \"First dataset\",\r\n    //                     data: mortalityRate,\r\n    //                     fill: true,\r\n    //                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                     borderColor: \"rgba(75,192,192,1)\",\r\n    //                   },\r\n    //                 ],\r\n    //               }}\r\n    //             />\r\n    //           </Row>\r\n    //           <div\r\n    //             className=\"py-3 ml-4\"\r\n    //             style={{ color: \"grey\", fontSize: \"14px\" }}\r\n    //           >\r\n    //             Statistics\r\n    //           </div>\r\n    //           <Row className=\"subtitle ml-0 mr-2\">\r\n    //             <Col className=\"box p-2 py-4 mr-1\">\r\n    //               Active\r\n    //               {(activeMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               2.5 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (activeMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 4.5 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (activeMillion[index] / deathsMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //             <Col className=\"box p-2 py-4 ml-1\">\r\n    //               Critical\r\n    //               {(criticalMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               0.005 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (criticalMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 0.015 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (criticalMillion[index] / deathsMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <Row className=\"subtitle ml-0 mr-2\">\r\n    //             <Col className=\"box p-2 py-4 mr-1 mt-3\">\r\n    //               Deaths\r\n    //               {(deathsMillion[index] / deathsMillion[index]) * 100 <=\r\n    //               1.0 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   LOW\r\n    //                 </Badge>\r\n    //               ) : (deathsMillion[index] / deathsMillion[index]) * 100 >=\r\n    //                 2.0 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   HIGH\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(\r\n    //                   (deathsMillion[index] / casesMillion[index]) *\r\n    //                   100\r\n    //                 ).toFixed(2)}\r\n    //                 %\r\n    //               </div>\r\n    //             </Col>\r\n    //             <Col className=\"box p-2 py-0 ml-1 mt-3\">\r\n    //               {/* Tested\r\n    //               {(tests[index] / population[index]) * 100 <= 100 ? (\r\n    //                 <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n    //                   POOR\r\n    //                 </Badge>\r\n    //               ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n    //                 <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n    //                   GOOD\r\n    //                 </Badge>\r\n    //               ) : (\r\n    //                 \" \"\r\n    //               )}\r\n    //               <div className=\"mb-0\">\r\n    //                 {(tests[index] / population[index]).toFixed(1) * 100}%\r\n    //               </div> */}\r\n    //               <Doughnut\r\n    //                 width={170}\r\n    //                 options={{\r\n    //                   elements: {\r\n    //                     arc: {\r\n    //                       borderWidth: 0,\r\n    //                     },\r\n    //                   },\r\n    //                   legend: {\r\n    //                     display: false,\r\n    //                     position: \"\",\r\n    //                   },\r\n    //                 }}\r\n    //                 data={{\r\n    //                   labels: [\"Tested\", \"Untested\"],\r\n    //                   datasets: [\r\n    //                     {\r\n    //                       data: [testsMillion[index], 1000000],\r\n    //                       backgroundColor: colorsPie,\r\n    //                     },\r\n    //                   ],\r\n    //                 }}\r\n    //               ></Doughnut>\r\n    //             </Col>\r\n    //           </Row>\r\n    //           <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>\r\n    //             Mortality Analysis\r\n    //           </div>\r\n    //           <Doughnut\r\n    //             width={170}\r\n    //             options={{\r\n    //               elements: {\r\n    //                 arc: {\r\n    //                   borderWidth: 0,\r\n    //                 },\r\n    //               },\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: [\r\n    //                 \"Lowest Deaths\",\r\n    //                 \"Lower Deaths\",\r\n    //                 \"Average Deaths\",\r\n    //                 \"Higher Deaths\",\r\n    //                 \"Highest Deaths\",\r\n    //               ],\r\n    //               datasets: [\r\n    //                 {\r\n    //                   data: [\r\n    //                     mild.length,\r\n    //                     contained.length,\r\n    //                     moderate.length,\r\n    //                     serious.length,\r\n    //                     extreme.length,\r\n    //                   ],\r\n    //                   backgroundColor: colorsPie,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //           <div className=\"py-3\"></div>\r\n    //         </Col>\r\n\r\n    //         <Col\r\n    //           className=\"box  mb-5 mt-2 pr-3\"\r\n    //           style={{ height: \"100%\", overflowY: \"scroll\" }}\r\n    //         >\r\n    //           <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-0\">\r\n    //             Mortality Per Country\r\n    //           </div>\r\n    //           <HorizontalBar\r\n    //             height={countryNames.length * 40}\r\n    //             options={{\r\n    //               legend: {\r\n    //                 display: false,\r\n    //                 position: \"\",\r\n    //               },\r\n    //             }}\r\n    //             data={{\r\n    //               labels: countryNames,\r\n    //               datasets: [\r\n    //                 {\r\n    //                   label: \"Mortality/1000\",\r\n    //                   data: mortalityRate,\r\n    //                   backgroundColor: backgroundcolor,\r\n    //                 },\r\n    //               ],\r\n    //             }}\r\n    //           />\r\n    //         </Col>\r\n    //       </Row>\r\n    //     </>\r\n    //   ),\r\n    // },\r\n\r\n    // {\r\n    //     id: 5,\r\n    //     title: 'Tests',\r\n    //     icon: 'tabitem__icon fa fa-network-wired',\r\n    //     content: <>\r\n    //         <Row>\r\n    //             <Col className=\"pr-0\">\r\n    //                 <HorizontalBar\r\n    //                     height={830}\r\n    //                     width={200}\r\n    //                     options={{\r\n    //                         legend: {\r\n    //                             display: false,\r\n    //                             position: ''\r\n    //                         },\r\n    //                         // title: {\r\n    //                         //   display: true,\r\n    //                         //   text: 'Mortality in ' + region,\r\n    //                         //   fontSize: 13,\r\n\r\n    //                         // },\r\n    //                     }}\r\n    //                     data={{\r\n    //                         labels: countryNames,\r\n    //                         datasets: [\r\n    //                             {\r\n    //                                 label: \"Cases/1000\",\r\n    //                                 data: casesPerOneMillion,\r\n    //                                 backgroundColor: colorCases,\r\n    //                             }\r\n    //                         ]\r\n    //                     }}\r\n    //                 />\r\n    //             </Col>\r\n    //             <Col className=\"px-0\">\r\n\r\n    //                 {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n    //                 {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n    //                 <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n    //                     <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n    //                     <h5 >/1000 Tests</h5>\r\n    //                 </Row>\r\n\r\n    //                 {/* </Row> */}\r\n    //                 <Row className=\"subtitle px-3 pt-2\">\r\n    //                     <Line\r\n    //                         width={160}\r\n    //                         height={100}\r\n    //                         options={{\r\n    //                             // title: {\r\n    //                             //     display: true,\r\n    //                             //     text: 'Trends in ' + region,\r\n    //                             //     fontSize: 13,\r\n    //                             //     postion: 'bottom'\r\n    //                             // },\r\n    //                             legend: {\r\n    //                                 display: false,\r\n    //                                 position: 'bottom'\r\n    //                             }\r\n    //                         }}\r\n    //                         data={{\r\n    //                             labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n    //                             datasets: [\r\n    //                                 {\r\n    //                                     label: \"First dataset\",\r\n    //                                     data: casesPerOneMillion,\r\n    //                                     fill: true,\r\n    //                                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n    //                                     borderColor: \"rgba(75,192,192,1)\"\r\n    //                                 },\r\n    //                                 // {\r\n    //                                 //   label: \"Second dataset\",\r\n    //                                 //   data: [33, 25, 35, 51, 54, 76],\r\n    //                                 //   fill: false,\r\n    //                                 //   borderColor: \"#742774\"\r\n    //                                 // }\r\n    //                             ]\r\n    //                         }}\r\n    //                     />\r\n    //                 </Row>\r\n    //                 <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n    //                 <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n    //                 </Row>\r\n\r\n    //                 <Row className=\"subtitle m-1\" >\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n    //                     <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n    //                 </Row>\r\n    //                 <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n    //                 <Doughnut\r\n    //                     width={170}\r\n    //                     options={{\r\n    //                         // maintainAspectRatio: true,\r\n    //                         // title: {\r\n    //                         //     display: true,\r\n    //                         //     text: 'Countries in ' + region,\r\n    //                         //     fontSize: 13\r\n    //                         // },\r\n    //                         elements: {\r\n    //                             arc: {\r\n    //                                 borderWidth: 0\r\n    //                             }\r\n    //                         },\r\n    //                         legend: {\r\n    //                             display: false,\r\n    //                             position: ''\r\n    //                         },\r\n    //                     }}\r\n    //                     data={{\r\n    //                         labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n    //                         datasets: [\r\n    //                             {\r\n    //                                 data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n    //                                 backgroundColor: colorsPie,\r\n    //                             }\r\n    //                         ]\r\n    //                     }}\r\n    //                 />\r\n    //             </Col>\r\n    //         </Row>\r\n    //     </>\r\n    //     ,\r\n    // },\r\n  ];\r\n\r\n  const TabsMenu = () => {\r\n    // function usePrevious(value) {\r\n    //   const ref = useRef();\r\n    //   useEffect(() => {\r\n    //     ref.current = value; //assign the value of ref to the argument\r\n    //   }, [value]); //this code will run when the value of 'value' changes\r\n    //   return ref.current; //in the end, return the current ref value.\r\n    // }\r\n\r\n    const [tab, setTab] = useState(1);\r\n    // const prevCount = usePrevious(active);\r\n\r\n    const TabItem = ({\r\n      icon = \"\",\r\n      title = \"\",\r\n\r\n      onItemClicked = () =>\r\n        console.error(\"You passed no action to the component\"),\r\n      isActive = false,\r\n    }) => {\r\n      return (\r\n        <div\r\n          className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n          onClick={onItemClicked}\r\n        >\r\n          <p style={{ display: \"flex\" }} className=\"tabitem__title\">\r\n            {title}\r\n            {icon}{\" \"}\r\n          </p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    console.log(tab, \"VALUE\");\r\n\r\n    return (\r\n      <Row className=\"pl-3 pr-1\">\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItem\r\n              key={title}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setTab(id)}\r\n              isActive={tab === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return tab === id ? content : \"\";\r\n          })}\r\n        </div>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={open ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\">\r\n          <Container>\r\n            {/* <div className={!open ? \"hidden\" : \"visible\"}> */}\r\n            <Row className=\"title\">\r\n              <Col xs={9} className=\"my-2 pl-3\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                >\r\n                  {\" \"}\r\n                  {region}\r\n                </Animated>\r\n              </Col>\r\n\r\n              <Col className=\"my-2 pr-2\">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    // onClick={toggleAsia}\r\n                    onClick={handleClose}\r\n                    // size=\"lg\"\r\n                    variant=\"outline-info\"\r\n                    // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                    className=\"close button\"\r\n                  >\r\n                    <h6>x</h6>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <TabsMenu\r\n              countries={countries}\r\n              index={index}\r\n              region={region}\r\n              casesMillion={casesMillion}\r\n              activeMillion={activeMillion}\r\n              criticalMillion={criticalMillion}\r\n              deathsMillion={deathsMillion}\r\n              tests={tests}\r\n              tabItems={tabItems}\r\n            />\r\n            {/* </div> */}\r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n];\r\n\r\nlet colorsSpec = [\"#0c99a0\", \" #0095d1\", \"#6880e6\", \" #d451bd\", \"  #ff1d5e\"];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map from \"./components/Map\";\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport \"./App.css\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\nconst initialState = {\r\n  global: false,\r\n  open: false,\r\n  region: \"\",\r\n  index: \"\",\r\n};\r\n\r\nconst App = () => {\r\n    \r\n  //Fetch Continents Data\r\n  const [globaldata, setGlobal] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(GLOBAL_URL);\r\n        const globaldata = await result.json();\r\n        setGlobal([globaldata]);\r\n        console.log(globaldata, \"globalDATA\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  //Map Continents Data\r\n  const getGlobal = (key) => {\r\n    return globaldata.map((data) => data[key]);\r\n  };\r\n\r\n  const globalCases = getGlobal(\"casesPerOneMillion\");\r\n  const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n  const globalActive = getGlobal(\"activePerOneMillion\");\r\n  const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n  const globalTests = getGlobal(\"testsPerOneMillion\");\r\n  console.log(globalCases, \"globalCases\");\r\n  const populationGlobal = getGlobal(\"population\");\r\n  const testsGlobal = getGlobal(\"tests\");\r\n  const todayGlobalCases = getGlobal(\"todayCases\");\r\n  const todayGlobalDeaths = getGlobal(\"todayDeaths\");\r\n\r\n  //Fetch Continents Data\r\n  const [continents, setContinents] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        // console.log(continents, 'continents')\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n  //Map Continents Data\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n  const todayCases = getContinents(\"todayCases\");\r\n  const todayDeaths = getContinents(\"todayDeaths\");\r\n  const todayRecovered = getContinents(\"todayRecovered\");\r\n\r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n  const recoveredMillion = getContinents(\"recoveredPerOneMillion\");\r\n\r\n  const cases = getContinents(\"cases\");\r\n  const active = getContinents(\"active\");\r\n  const critical = getContinents(\"critical\");\r\n  const deaths = getContinents(\"deaths\");\r\n  const tests = getContinents(\"tests\");\r\n  const recovered = getContinents(\"recovered\");\r\n\r\n  const continentNames = getContinents(\"continent\");\r\n\r\n  console.log(continentNames, \"continentNames\");\r\n\r\n  const mortality = deaths / cases;\r\n\r\n  //Fetch Countries Data\r\n  const [countries, setCountries] = useState([]);\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n        const countries = await res.json();\r\n        setCountries([...countries.filter((country) => country.country.length <= 12)]);\r\n        // console.log(countries, 'countries')\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country));\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n  //Map Country Data\r\n  const getCountries = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n  const populationCountries = getCountries(\"population\");\r\n\r\n  const [state, setState] = useState([initialState]);\r\n\r\n  const toggle = ({ region, index }) => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: region,\r\n      index: index,\r\n      global: false,\r\n    });\r\n  };\r\n\r\n  const toggleAsia = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Asia\",\r\n      index: 1,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleOceania = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Australia-Oceania\",\r\n      index: 4,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleEurope = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Europe\",\r\n      index: 3,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleAfrica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Africa\",\r\n      index: 5,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleSouthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"South America\",\r\n      index: 2,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleNorthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"North America\",\r\n      index: 0,\r\n      global: false,\r\n    });\r\n  };\r\n  const toggleGlobal = () => {\r\n    setState({\r\n      ...initialState,\r\n      global: true,\r\n      region: \"Global\",\r\n      index: 6,\r\n    });\r\n  };\r\n\r\n  function handleClose() {\r\n    setState(!state);\r\n  }\r\n\r\n  console.log(initialState, \"initialState\", state, \"state\");\r\n\r\n  return (\r\n    <>\r\n      <ContinentButtons\r\n        toggleAsia={toggleAsia}\r\n        toggleEurope={toggleEurope}\r\n        toggle={toggle}\r\n        toggleGlobal={toggleGlobal}\r\n        toggleAfrica={toggleAfrica}\r\n        toggleSouthAmerica={toggleSouthAmerica}\r\n        toggleNorthAmerica={toggleNorthAmerica}\r\n        toggleOceania={toggleOceania}\r\n      />\r\n\r\n      <div className=\"sidebar\">\r\n        <Menu\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          open={state.open}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          casesMillion={casesMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          deathsMillion={deathsMillion}\r\n          testsMillion={testsMillion}\r\n          recoveredMillion={recoveredMillion}\r\n          cases={cases}\r\n          tests={tests}\r\n          deaths={deaths}\r\n          critical={critical}\r\n          active={active}\r\n          recovered={recovered}\r\n          todayCases={todayCases}\r\n          todayDeaths={todayDeaths}\r\n          todayRecovered={todayRecovered}\r\n       \r\n        />\r\n        <GlobalMenu\r\n          state={state.global}\r\n          toggleGlobal={toggleGlobal}\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          global={state.global}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          continentNames={continentNames}\r\n          tests={tests}\r\n          globalCases={globalCases}\r\n          globalDeaths={globalDeaths}\r\n          globalActive={globalActive}\r\n          globalCritical={globalCritical}\r\n          globalTests={globalTests}\r\n          casesMillion={casesMillion}\r\n          deathsMillion={deathsMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          testsMillion={testsMillion}\r\n          populationGlobal={populationGlobal}\r\n          testsG={testsGlobal}\r\n          todayGlobalCases={todayGlobalCases}\r\n          todayGlobalDeaths={todayGlobalDeaths}\r\n        />\r\n      </div>\r\n\r\n      <Map countries={countries} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=180\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}