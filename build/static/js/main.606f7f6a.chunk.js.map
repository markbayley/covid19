{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map.js","components/GlobalMenu.js","components/Menu.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","width","position","background","zIndex","opacity","display","flexDirection","justifyContent","alignItems","id","className","color","href","marginTop","marginBottom","backgroundColor","Button","onClick","variant","lineHeight","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","countries","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","useEffect","createDonutChart","props","offsets","counts","deaths1","deaths2","deaths3","deaths4","deaths5","total","count","push","fontSize","r0","Math","round","w","html","i","length","donutSegment","colors","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","average","reduce","next","min","item","max","averageD","minD","maxD","console","log","amr","minmr","maxmr","Map","container","current","center","zoom","cases1","cases2","cases3","cases4","cases5","colors2","pulsingDot","Uint8Array","size","onAdd","canvas","this","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","fillStyle","fill","getImageData","triggerRepaint","on","addImage","pixelRatio","addSource","addLayer","features","markers","markersOnScreen","isSourceLoaded","newMarkers","querySourceFeatures","feature","coords","cluster","cluster_id","marker","Marker","element","setLngLat","addTo","remove","updateMarkers","e","queryRenderedFeatures","layers","clusterId","getSource","getClusterExpansionZoom","err","easeTo","getLayer","getElementById","link","textContent","onclick","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","appendChild","addControl","GeolocateControl","fitBoundsOptions","maxZoom","populationCountry","population","once","popup2","Popup","closeButton","closeOnClick","getCanvas","cursor","slice","undefined","lastId","popup","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","toLowerCase","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","abs","lngLat","lng","setHTML","addEventListener","flyTo","essential","ref","Menu","region","global","tests","state","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","continentNames","casesMillion","deathsMillion","activeMillion","criticalMillion","testsMillion","casesPerContinent","selectedContinent","deathsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","continentCountries","filter","continent","countryNames","selectedCountry","substring","casesPerOneMillion","deathsPerOneMillion","activePerOneMillion","lowest","criticalPerOneMillion","testsPerOneMillion","lower","higher","highest","mild","contained","moderate","serious","extreme","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","title","content","Row","icon","faArrowUp","options","legend","labels","datasets","label","paddingTop","Col","faArrowDown","borderColor","elements","borderWidth","colorsPie","TabsComponent","useState","active","setActive","TabItemComponent","key","onItemClicked","isActive","error","animationIn","animationOut","isVisible","Container","xs","open","top","faCircleDown","faCircleUp","text","Badge","overflowY","maintainAspectRatio","layout","padding","left","bottom","initialState","App","globaldata","setGlobal","a","BASE_URL","result","fetchContinents","getGlobal","continents","setContinents","getContinents","setCountries","res","String","fetchCountries","setState","toggle","GlobalMenu","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8NAiHeA,EA9GU,SAAC,GAAqH,IAAnHC,EAAkH,EAAlHA,WAAYC,EAAsG,EAAtGA,aAAcC,EAAwF,EAAxFA,cAAeC,EAAyE,EAAzEA,mBAAoBC,EAAqD,EAArDA,mBAAoBC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAEzH,OACE,oCACE,yBACEC,MAAO,CACLC,MAAO,MACPC,OAAQ,QACRC,MAAO,OACPC,SAAU,WACVC,WAAY,UACZC,OAAQ,EACRC,QAAS,GACTC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAMd,yBAAKC,GAAG,GAAGC,UAAU,SAASb,MAAO,CAAEc,MAAO,SAC5C,wBAAIC,KAAK,4BAA4Bf,MAAO,CAAEgB,UAAW,OAAQC,aAAc,QAA/E,YACA,wBAAIF,KAAK,4BAA4Bf,MAAO,CAAEgB,UAAW,MAAOC,aAAc,QAA9E,YAMF,yBAAKL,GAAG,SACR,yBAAKA,GAAG,eAAeC,UAAU,UAE/B,6BAAK,0BAAMb,MAAO,CAAEkB,gBAAiB,aAArC,WACA,6BAAK,0BAAMlB,MAAO,CAAEkB,gBAAiB,aAArC,UACA,6BAAK,0BAAMlB,MAAO,CAAEkB,gBAAiB,aAArC,WACA,6BAAK,0BAAMlB,MAAO,CAAEkB,gBAAiB,aAArC,SACA,6BAAK,0BAAMlB,MAAO,CAAEkB,gBAAiB,aAArC,WAEF,kBAACC,EAAA,EAAD,CACEN,UAAU,SACVD,GAAG,OACHQ,QAAS3B,EACT4B,QAAQ,gBAER,qCAEF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAAS1B,EACTkB,GAAG,SACHS,QAAQ,gBAER,uCAEF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAASxB,EACTgB,GAAG,eACHS,QAAQ,gBAER,8CAEF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAAStB,EAETc,GAAG,SACHS,QAAQ,gBAER,uCAEF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAASvB,EACTe,GAAG,eACHS,QAAQ,gBAER,8CAEF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAASzB,EACTiB,GAAG,UACHS,QAAQ,gBAER,wCAIF,kBAACF,EAAA,EAAD,CACEN,UAAU,SACVO,QAASrB,EACTa,GAAG,SACHS,QAAQ,gBAER,uCAIF,yBAAKT,GAAG,GAAGC,UAAU,GAAGb,MAAO,CAAEc,MAAO,OAAQQ,WAAY,IAE1D,uBAAGP,KAAK,4BAA4Bf,MAAO,CAAEgB,UAAW,OAAQC,aAAc,OAASJ,UAAU,QAAjG,WACA,uBAAGE,KAAK,4BAA4Bf,MAAO,CAAEgB,UAAW,MAAOC,aAAc,OAASJ,UAAU,QAAhG,UAA8G,uBAAGA,UAAU,sBAA3H,S,8DC1GH,SAASU,EAAiBC,GAC/B,OAAKA,EACEA,EAAEC,WAAWC,QAAQ,wBAAyB,KADtC,I,YCSjBC,IAASC,YACP,yFAEF,IAwtBeC,EAxtBF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,UACRC,EAAcC,iBAAO,MA2BnBC,EAASC,YAAO,0CAzBR,SAACC,GAAD,OACdC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACJ,GAAD,OACJA,EAAKO,KAAI,SAACC,EAAOC,GAAR,MAAmB,CAC1BC,KAAM,UACNC,SAAU,CACRD,KAAM,QACNE,YAAa,CACXJ,EAAMI,YAAYC,UAClBL,EAAMI,YAAYE,WAGtBC,WAAY,CACVpC,GAAI8B,EACJO,QAASR,EAAMQ,QACfC,SAAUT,EAAMS,SAChBC,MAAOV,EAAMW,MAAMC,UACnBC,OAAQb,EAAMW,MAAME,kBAOtBrB,KAirBR,OA5qBAsB,qBAAU,WACR,GAAItB,EAAM,KAkYCuB,EAAT,SAA0BC,GAUxB,IATA,IAAMC,EAAU,GACVC,EAAS,CACbF,EAAMG,QACNH,EAAMI,QACNJ,EAAMK,QACNL,EAAMM,QACNN,EAAMO,SAEJC,EAAQ,EACZ,MAAoBN,EAApB,eAA4B,CAAvB,IAAMO,EAAK,KACdR,EAAQS,KAAKF,GACbA,GAASC,EAYX,IAVA,IAAME,EACJH,GAAS,IAAO,GAAKA,GAAS,IAAM,GAAKA,GAAS,GAAK,GAAK,GACxD3B,EACJ2B,GAAS,IAAO,GAAKA,GAAS,IAAM,GAAKA,GAAS,GAAK,GAAK,GACxDI,EAAKC,KAAKC,MAAU,GAAJjC,GAChBkC,EAAQ,EAAJlC,EAENmC,EAAI,mDACoBD,EADpB,qBACkCA,EADlC,0BACqDA,EADrD,YAC0DA,EAD1D,+CACkGJ,EADlG,4BAGCM,EAAI,EAAGA,EAAIf,EAAOgB,OAAQD,IACjCD,GAAQG,EACNlB,EAAQgB,GAAKT,GACZP,EAAQgB,GAAKf,EAAOe,IAAMT,EAC3B3B,EACA+B,EACAQ,EAAOH,IAGXD,GAAI,sBAAmBnC,EAAnB,iBAA6BA,EAA7B,gBAAsC+B,EAAtC,gGACsD/B,EADtD,aAC4DA,EAD5D,wCAEF2B,EAAMa,iBAFJ,qDAOJ,IAAMC,EAAKC,SAASC,cAAc,OAElC,OADAF,EAAGG,UAAYT,EACRM,EAAGI,YAGHP,EAAT,SAAsBQ,EAAOC,EAAK/C,EAAG+B,EAAIvD,GACnCuE,EAAMD,IAAU,IAAGC,GAAO,MAC9B,IAAMC,EAAK,EAAIhB,KAAKiB,IAAMH,EAAQ,KAC5BI,EAAK,EAAIlB,KAAKiB,IAAMF,EAAM,KAC1BI,EAAKnB,KAAKoB,IAAIJ,GAClBK,EAAKrB,KAAKsB,IAAIN,GACVO,EAAKvB,KAAKoB,IAAIF,GAClBM,EAAKxB,KAAKsB,IAAIJ,GACVO,EAAWV,EAAMD,EAAQ,GAAM,EAAI,EAGzC,MAAM,eAAN,OAAsB9C,EAAI+B,EAAKoB,EAA/B,YAAqCnD,EAAI+B,EAAKsB,EAA9C,cAAsDrD,EAAIA,EAAImD,EAA9D,YAAoEnD,EAAIA,EAAIqD,EAA5E,cACQrD,EADR,YACaA,EADb,cACoByD,EADpB,cACkCzD,EAAIA,EAAIuD,EAD1C,YACgDvD,EAAIA,EAAIwD,EADxD,cACgExD,EAAI+B,EAAKwB,EADzE,YAEMvD,EAAI+B,EAAKyB,EAFf,cAEuBzB,EAFvB,YAE6BA,EAF7B,cAEqC0B,EAFrC,cAEmDzD,EAAI+B,EAAKoB,EAF5D,YAEkEnD,EAAI+B,EAAKsB,EAF3E,mBAGa7E,EAHb,SAzbIkF,EACJ/D,EAAKgE,QAAO,SAAChC,EAAOiC,GAAR,OAAiBjC,EAAQiC,EAAKlD,WAAWG,QAAO,GAC5DlB,EAAK0C,OACDwB,EAAM7B,KAAK6B,IAAL,MAAA7B,KAAI,YAAQrC,EAAKO,KAAI,SAAC4D,GAAD,OAAUA,EAAKpD,WAAWG,WACrDkD,EAAM/B,KAAK+B,IAAL,MAAA/B,KAAI,YAAQrC,EAAKO,KAAI,SAAC4D,GAAD,OAAUA,EAAKpD,WAAWG,WAErDmD,EACJrE,EAAKgE,QAAO,SAAChC,EAAOiC,GAAR,OAAiBjC,EAAQiC,EAAKlD,WAAWM,SAAQ,GAC7DrB,EAAK0C,OACD4B,EAAOjC,KAAK6B,IAAL,MAAA7B,KAAI,YAAQrC,EAAKO,KAAI,SAAC4D,GAAD,OAAUA,EAAKpD,WAAWM,YACtDkD,EAAOlC,KAAK+B,IAAL,MAAA/B,KAAI,YAAQrC,EAAKO,KAAI,SAAC4D,GAAD,OAAUA,EAAKpD,WAAWM,YAE5DmD,QAAQC,IAAIV,EAASG,EAAKE,EAAK,SAC/BI,QAAQC,IAAIJ,EAAUC,EAAMC,EAAM,UAElC,IAAMG,EAAML,EAAWN,EACjBY,EAAQL,EAAOJ,EACfU,EAAQL,EAAOH,EACrBI,QAAQC,IAAIC,EAAKC,EAAOC,EAAO,OAS/B,IAAMrE,EAAM,IAAIb,IAASmF,IAAI,CAC3BC,UAAWhF,EAAYiF,QACvBhH,MAAO,kCACPiH,OAAQ,CAAC,GAAI,IACbC,KAAM,IASFC,EAAS,CAAC,IAAK,CAAC,MAAO,SAAU,KACjCC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,KAAQ,CAAC,IAAK,CAAC,MAAO,SAAU,MAC1EC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,KAAS,CAAC,IAAK,CAAC,MAAO,SAAU,OAC3EC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,MAAS,CAAC,IAAK,CAAC,MAAO,SAAU,MAC3EC,EAAS,CAAC,KAAM,CAAC,MAAO,SAAU,KAGlC3D,EAAU,CAAC,IAAK,CAAC,MAAO,UAAW,KACnCC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAM,CAAC,IAAK,CAAC,MAAO,UAAW,MAC3EC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAO,CAAC,IAAK,CAAC,MAAO,UAAW,MAC5EC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAO,CAAC,IAAK,CAAC,MAAO,UAAW,MAC5EC,EAAU,CAAC,KAAM,CAAC,MAAO,UAAW,KASpCa,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,mBACA,qBAGI2C,EAAU,CACd,UACA,UACA,UACA,UACA,UACA,mBACA,qBAOIC,EAAa,CACjBtH,MAJW,IAKXD,OALW,IAMX+B,KAAM,IAAIyF,WAAWC,KAIrBC,MAAO,WACL,IAAMC,EAAS7C,SAASC,cAAc,UACtC4C,EAAO1H,MAAQ2H,KAAK3H,MACpB0H,EAAO3H,OAAS4H,KAAK5H,OACrB4H,KAAKC,QAAUF,EAAOG,WAAW,OAInCC,OAAQ,WACN,IACMC,EAAKC,YAAYC,MADN,QAIXC,EAAeV,KAAkBO,EADvBP,IAEVI,EAAUD,KAAKC,QA2CrB,OAxCAA,EAAQO,UAAU,EAAG,EAAGR,KAAK3H,MAAO2H,KAAK5H,QACzC6H,EAAQQ,YACRR,EAAQS,IACNV,KAAK3H,MAAQ,EACb2H,KAAK5H,OAAS,EACdmI,EACA,EACU,EAAV/D,KAAKiB,IAEPwC,EAAQU,UAAR,2BAAwC,EAAIP,EAA5C,KACAH,EAAQW,OAGRX,EAAQQ,YACRR,EAAQS,IACNV,KAAK3H,MAAQ,EACb2H,KAAK5H,OAAS,EArBAyH,IAuBd,EACU,EAAVrD,KAAKiB,IASPuC,KAAK7F,KAAO8F,EAAQY,aAClB,EACA,EACAb,KAAK3H,MACL2H,KAAK5H,QACL+B,KAIFO,EAAIoG,kBAGG,IAKXpG,EAAIqG,GAAG,QAAQ,WAEbrG,EAAIsG,SAAS,cAAerB,EAAY,CAAEsB,WAAY,IAEtDvG,EAAIwG,UAAU,YAAa,CACzB,KAAQ,UACR,KAAQ,CACN,KAAQ,oBACR,SAAY/G,KAGhBO,EAAIyG,SAAS,CACX,GAAM,yBACN,KAAQ,SACR,OAAU,YACV,OAAU,CACR,aAAc,iBAIlBzG,EAAIwG,UAAU,SAAU,CACtB,KAAQ,UACR,KAAQ,CACNrG,KAAM,oBACNuG,SAAUjH,GAEZ,SAAW,EACX,cAAiB,GACjB,kBAAqB,CAEnB,QAAW,CAAC,IAAK,CAAC,OAAQ2B,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,OAAU,CAAC,IAAK,CAAC,OAAQmD,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,OAOxC/E,EAAIyG,SAAS,CACX,GAAM,SACN,KAAQ,SACR,OAAU,SAEV,OAAU,CAAC,KAAM,WAAW,GAC5B,MAAS,CACP,eAAgB,CACd,OACArF,EACA4D,EAAQ,GACR3D,EACA2D,EAAQ,GACR1D,EACA0D,EAAQ,GACRzD,EACAyD,EAAQ,GACRA,EAAQ,IAEV,iBAAkB,GAClB,gBAAiB,KAqBfhF,EAAIyG,SAAS,CACX,GAAM,QACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,MAAS,CACP,eAAgB,CACd,OACA9B,EACAtC,EAAO,GACPuC,EACAvC,EAAO,GACPwC,EACAxC,EAAO,GACPyC,EACAzC,EAAO,GACPA,EAAO,IAET,iBAAkB,GAClB,gBAAiB,MAI3BrC,EAAIyG,SAAS,CACX,GAAM,WACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,OAAU,CACR,aAAc,CACZ,gBACA,CAAC,MAAO,UACR,CAAE,sBAAuB,EAAG,sBAAuB,IAErD,YAAa,CAAC,qBAAsB,yBACpC,YAAa,GACb,WAAc,WAEhB,MAAS,CACP,aAAc,CACZ,OACA,CAAC,IAAK,CAAC,MAAO,SAAU,GACxB,QACA,YAkCNzG,EAAIyG,SAAS,CACX,GAAM,YACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,OAAU,CACR,aAAc,CACZ,gBACA,CAAC,MAAO,UACR,CAAE,sBAAuB,EAAG,sBAAuB,IAErD,YAAa,CAAC,qBAAsB,yBACpC,YAAa,GACb,WAAc,WAEhB,MAAS,CACP,aAAc,CACZ,OACA,CAAC,IAAK,CAAC,MAAO,UAAW,GACzB,QACA,YAON,IAAME,EAAU,GACZC,EAAkB,GAiCtB5G,EAAIqG,GAAG,UAAU,WACVrG,EAAI6G,eAAe,WAhC1B,WACE,IADuB,EACjBC,EAAa,GACbJ,EAAW1G,EAAI+G,oBAAoB,UAFlB,cAMDL,GANC,IAMvB,2BAAgC,CAAC,IAAtBM,EAAqB,QACxBC,EAASD,EAAQ5G,SAASC,YAC1BY,EAAQ+F,EAAQxG,WACtB,GAAKS,EAAMiG,QAAX,CACA,IAAM9I,EAAK6C,EAAMkG,WAEbC,EAAST,EAAQvI,GACrB,IAAKgJ,EAAQ,CACX,IAAM7E,EAAKvB,EAAiBC,GAC5BmG,EAAST,EAAQvI,GAAM,IAAIe,IAASkI,OAAO,CACzCC,QAAS/E,IACRgF,UAAUN,GAEfH,EAAW1I,GAAMgJ,EAEZR,EAAgBxI,IAAKgJ,EAAOI,MAAMxH,KArBlB,8BAwBvB,IAAK,IAAM5B,KAAMwI,EACVE,EAAW1I,IAAKwI,EAAgBxI,GAAIqJ,SAE3Cb,EAAkBE,EAMlBY,SAoEJ1H,EAAIqG,GAAG,QAAS,YAAY,SAAUsB,GACpC,IAAIjB,EAAW1G,EAAI4H,sBAAsBD,EAAE1H,MAAO,CAAE4H,OAAQ,CAAC,cACzDC,EAAYpB,EAAS,GAAGlG,WAAW2G,WACvClD,QAAQC,IAAI,MACZlE,EAAI+H,UAAU,UAAUC,wBAAwBF,GAAW,SAAUG,EAAKvD,GACpEuD,GAGJjI,EAAIkI,OAAO,CACTzD,OAAQiC,EAAS,GAAGtG,SAASC,YAC7BqE,KAAMA,UAQZ1E,EAAIqG,GAAG,QAAQ,WAEb,GAAKrG,EAAImI,SAAS,UAAanI,EAAImI,SAAS,UAQ5C,IAHA,IAGA,MAH2B,CAAC,QAAS,UAGrC,eAAqC,CAAhC,IAAM/J,EAAE,KAEX,IAAIoE,SAAS4F,eAAehK,GAA5B,CAKA,IAAMiK,EAAO7F,SAASC,cAAc,KACpC4F,EAAKjK,GAAKA,EACViK,EAAK9J,KAAO,IACZ8J,EAAKC,YAAclK,EACnBiK,EAAKhK,UAAY,SAGjBgK,EAAKE,QAAU,SAAUZ,GACvB,IAAMa,EAAelD,KAAKgD,YAC1BX,EAAEc,iBACFd,EAAEe,kBAQiB,YANA1I,EAAI2I,kBACrBH,EACA,eAKAxI,EAAI4I,kBAAkBJ,EAAc,aAAc,QAClDlD,KAAKjH,UAAY,KAEjBiH,KAAKjH,UAAY,SACjB2B,EAAI4I,kBACFJ,EACA,aACA,aAIShG,SAAS4F,eAAe,QAChCS,YAAYR,QAQvBrI,EAAI8I,WACF,IAAI3J,IAAS4J,iBAAiB,CAC5BC,iBAAkB,CAAEC,QAAS,MAIjChF,QAAQC,IAAI5E,EAAW,aACvB,IAAM4J,EAAoB5J,EAAUU,KAAI,SAAAS,GAAO,MAAI,CAACA,EAAQ0I,WAAY1I,EAAQA,YAChFwD,QAAQC,IAAIgF,EAAmB,MAI/BlJ,EAAIoJ,KAAK,QAAQ,WAGf,IAAMC,EAAS,IAAIlK,IAASmK,MAAM,CAChCC,aAAa,EACbC,cAAc,IAKhBxJ,EAAIqG,GAAG,QAAS,YAAY,SAACsB,GAG3B3H,EAAIyJ,YAAYjM,MAAMkM,OAAS,UACX/B,EAAEvH,SAASC,YAAYsJ,QAC3CN,EAAO9B,UAAU,CAAC,EAAG,KAAKC,MAAMxH,MAGlCA,EAAIqG,GAAG,aAAc,YAAY,gBACrBuD,EACV5J,EAAIyJ,YAAYjM,MAAMkM,OAAS,GAC/BL,EAAO5B,YAIT,IAKIoC,EALEC,EAAQ,IAAI3K,IAASmK,MAAM,CAC/BC,aAAa,EACbC,cAAc,IAKhBxJ,EAAIqG,GAAG,YAAwB,UAAU,SAACsB,GACxC,IAAMvJ,EAAKuJ,EAAEjB,SAAS,GAAGlG,WAAWpC,GAEpC,GAAIA,IAAOyL,EAAQ,CAAC,IAAD,IACjBA,EAASzL,EADQ,MAObuJ,EAAEjB,SAAS,GAAGlG,WAJhBG,EAHe,EAGfA,MACAG,EAJe,EAIfA,OACAL,EALe,EAKfA,QACAC,EANe,EAMfA,SAIFV,EAAIyJ,YAAYjM,MAAMkM,OAAS,UA4B/B,IA1BA,IAAMrJ,EAAcsH,EAAEjB,SAAS,GAAGtG,SAASC,YAAYsJ,QAEjDI,GACJ,UAAAC,IAAOC,UAAUxJ,UAAjB,eAA2ByJ,QAA3B,UACAF,IAAOG,WAAW1J,UADlB,aACA,EAA4ByJ,MACxBE,EAAW,uGAA4FL,QAA5F,IAA4FA,OAA5F,EAA4FA,EAAYM,cAAxG,QACXC,EACS,SAAb5J,EAAA,0BAAyCA,EAAzC,YAA8D,GAC1D6J,GAAkBzJ,EAASH,EAAS,KAAK6J,QAAQ,GACjDC,EAAkBC,QAAQX,GAAR,oBAEPK,EAFO,YAGpB,GAGEO,EAAI,YAAQF,EAAR,0BAAyChK,EAAzC,qCACJ6J,EADI,0CAESvL,EAAiB4B,GAF1B,mDAGU5B,EAAiB+B,GAH3B,2DAIkByJ,EAJlB,8EAWHzI,KAAK8I,IAAIjD,EAAEkD,OAAOC,IAAMzK,EAAY,IAAM,KAC/CA,EAAY,IAAMsH,EAAEkD,OAAOC,IAAMzK,EAAY,GAAK,KAAO,IAG3DyJ,EAAMvC,UAAUlH,GAAa0K,QAAQJ,GAAMnD,MAAMxH,OAIrDA,EAAIqG,GAAG,aAAyB,UAAU,WACxCwD,OAASD,EACT5J,EAAIyJ,YAAYjM,MAAMkM,OAAS,GAC/BI,EAAMrC,YAKRjF,SAAS4F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DhL,EAAIiL,MAAM,CACRvG,KAAM,EACND,OAAQ,CAAC,IAAK,KACdyG,WAAW,OAGf1I,SAAS4F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DhL,EAAIiL,MAAM,CACRvG,KAAM,EACND,OAAQ,CAAC,EAAG,IACZyG,WAAW,OAGf1I,SACG4F,eAAe,gBACf4C,iBAAiB,SAAS,WACzBhL,EAAIiL,MAAM,CACRvG,KAAM,EACND,OAAQ,EAAE,IAAK,IACfyG,WAAW,OAGjB1I,SACG4F,eAAe,gBACf4C,iBAAiB,SAAS,WACzBhL,EAAIiL,MAAM,CACRvG,KAAM,IACND,OAAQ,EAAE,IAAK,GACfyG,WAAW,OAGjB1I,SAAS4F,eAAe,QAAQ4C,iBAAiB,SAAS,WACxDhL,EAAIiL,MAAM,CACRvG,KAAM,IACND,OAAQ,CAAC,IAAK,IACdyG,WAAW,OAGf1I,SAAS4F,eAAe,WAAW4C,iBAAiB,SAAS,WAC3DhL,EAAIiL,MAAM,CACRvG,KAAM,IACND,OAAQ,CAAC,KAAM,IACfyG,WAAW,OAIf1I,SAAS4F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DhL,EAAIiL,MAAM,CACRvG,KAAM,IACND,OAAQ,CAAC,EAAG,IACZyG,WAAW,aAKlB,CAACzL,IAIF,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,gBAEb,yBAAKA,UAAU,SAAS8M,IAAK5L,O,gDCmGtB6L,EAvzBF,SAAC,GAGP,IAHSC,EAGV,EAHUA,OAAQnL,EAGlB,EAHkBA,MAAOiJ,EAGzB,EAHyBA,WAAYmC,EAGrC,EAHqCA,OACzCC,GAEI,EAH6CC,MAG7C,EAFJD,OAAOjM,EAEH,EAFGA,UAAWmM,EAEd,EAFcA,YAAaC,EAE3B,EAF2BA,iBAAkBC,EAE7C,EAF6CA,OACjDC,EACI,EADJA,YAAaC,EACT,EADSA,aAAcC,EACvB,EADuBA,aAAcC,EACrC,EADqCA,eAAgBC,EACrD,EADqDA,YAAaC,EAClE,EADkEA,eAAgBC,EAClF,EADkFA,aAAcC,EAChG,EADgGA,cAAeC,EAC/G,EAD+GA,cAAeC,EAC9H,EAD8HA,gBAAiBC,EAC/I,EAD+IA,aAG7IC,EAAoBL,EAAalM,KAAI,SAAAwM,GAAiB,OAAMA,EAAoB,KAAMhC,QAAQ,MAC9FiC,EAAqBN,EAAcnM,KAAI,SAAAwM,GAAiB,OAAMA,EAAoB,KAAMhC,QAAQ,MAC3E4B,EAAcpM,KAAI,SAAAwM,GAAiB,OAAMA,EAAoB,KAAMhC,QAAQ,MACzE6B,EAAgBrM,KAAI,SAAAwM,GAAiB,OAAMA,EAAoB,KAAMhC,QAAQ,MAChF8B,EAAatM,KAAI,SAAAwM,GAAiB,OAAMA,EAAoB,KAAMhC,QAAQ,MACpGvG,QAAQC,IAAIqI,EAAmB,qBA2C/B,IAzCA,IAAMG,GAAed,EAAc,KAAMpB,QAAQ,GAC3CmC,GAAgBd,EAAe,KAAMrB,QAAQ,GAC7CoC,GAAgBd,EAAe,KAAMtB,QAAQ,GAC7CqC,GAAkBd,EAAiB,KAAMvB,QAAQ,GACjDsC,GAAed,EAAc,KAAMxB,QAAQ,GAK3CuC,EAAqBzN,EAAU0N,QAAO,SAAAvM,GAAO,OAAIA,EAAQwM,YAAc5B,KAEvE6B,EAAe5N,EAAU0N,QAAO,SAAAvM,GAAO,OAAIA,EAAQwM,YAAc5B,GAAU5K,EAAQ0I,WAAa,OAAQnJ,KAAI,SAAAmN,GAAe,OAAIA,EAAgB1M,QAAQ2M,UAAU,EAAG,OAEpKC,EAAqBN,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBE,mBAAsB,KAAM7C,QAAQ,MACtH8C,EAAsBP,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBG,oBAAuB,KAAM9C,QAAQ,MACxHD,EAAgBwC,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBG,oBAAsBH,EAAgBE,mBAAuB,KAAK7C,QAAQ,MACvJ+C,EAAsBR,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBI,oBAAuB,KAAM/C,QAAQ,MAIxHgD,GAHwBT,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBM,sBAAyB,KAAMjD,QAAQ,MACvGuC,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBO,mBAAsB,KAAMlD,QAAQ,MAE7GuC,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OACnGM,EAAQZ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,IAAMF,EAAgBE,mBAAqB,IAAO,OACrJ7J,EAAUuJ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACxJO,EAASb,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACvJQ,EAAUd,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OAGpGS,EAAOf,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,MAClGS,EAAYhB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,IAAMH,EAAgBG,oBAAsB,IAAO,KAC3JU,EAAWjB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,GAAKH,EAAgBG,oBAAsB,IAAO,OACzJW,GAAUlB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,KAAOH,EAAgBG,oBAAsB,IAAO,OAC1JY,GAAUnB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,OAGrGa,GAAUpB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,KACrGa,GAAUrB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,GAAKJ,EAAgBI,oBAAsB,IAAO,MACxJc,GAAUtB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJe,GAAUvB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJgB,GAAUxB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,MAErGiB,GAAa,GACVtM,GAAI,EAAGA,GAAIqK,EAAkBpK,OAAQD,KACxCqK,EAAkBrK,IAAK,IAAMsM,GAAW7M,KAAK,WAC7C4K,EAAkBrK,KAAM,IAAMqK,EAAkBrK,IAAK,KAAOsM,GAAW7M,KAAK,WAC5E4K,EAAkBrK,KAAM,KAAOqK,EAAkBrK,IAAK,KAAOsM,GAAW7M,KAAK,WAC7E4K,EAAkBrK,KAAM,KAAOqK,EAAkBrK,IAAK,KAAOsM,GAAW7M,KAAK,WAC7E4K,EAAkBrK,KAAM,KAAOsM,GAAW7M,KAAK,WAIrD,IADA,IAAM8M,GAAc,GACXvM,GAAI,EAAGA,GAAIoL,EAAoBnL,OAAQD,KAC1CoL,EAAoBpL,IAAK,IAAMuM,GAAY9M,KAAK,WAChD2L,EAAoBpL,KAAM,IAAMoL,EAAoBpL,IAAK,GAAKuM,GAAY9M,KAAK,WAC/E2L,EAAoBpL,KAAM,GAAKoL,EAAoBpL,IAAK,KAAOuM,GAAY9M,KAAK,WAChF2L,EAAoBpL,KAAM,KAAOoL,EAAoBpL,IAAK,KAAOuM,GAAY9M,KAAK,WAClF2L,EAAoBpL,KAAM,KAAOuM,GAAY9M,KAAK,WAIxD,IADA,IAAM+M,GAAc,GACXxM,GAAI,EAAGA,GAAIqL,EAAoBpL,OAAQD,KAC1CqL,EAAoBrL,IAAK,IAAMwM,GAAY/M,KAAK,WAChD4L,EAAoBrL,KAAM,IAAMqL,EAAoBrL,IAAK,GAAKwM,GAAY/M,KAAK,WAC/E4L,EAAoBrL,KAAM,GAAKqL,EAAoBrL,IAAK,KAAOwM,GAAY/M,KAAK,WAChF4L,EAAoBrL,KAAM,KAAOqL,EAAoBrL,IAAK,KAAOwM,GAAY/M,KAAK,WAClF4L,EAAoBrL,KAAM,KAAOwM,GAAY/M,KAAK,WAIxD,IADA,IAAMgN,GAAkB,GACfzM,GAAI,EAAGA,GAAIqI,EAAcpI,OAAQD,KACpCqI,EAAcrI,IAAK,GAAOyM,GAAgBhN,KAAK,WAC/C4I,EAAcrI,KAAM,GAAOqI,EAAcrI,IAAK,GAAOyM,GAAgBhN,KAAK,WAC1E4I,EAAcrI,KAAM,GAAOqI,EAAcrI,IAAK,KAAOyM,GAAgBhN,KAAK,WAC1E4I,EAAcrI,KAAM,KAAOqI,EAAcrI,IAAK,GAAOyM,GAAgBhN,KAAK,WAC1E4I,EAAcrI,KAAM,GAAOyM,GAAgBhN,KAAK,WAGtD,IAAMiN,GAAW,CACf,CACExQ,GAAI,EACJyQ,MAAO,QACPC,QACE,oCACE,kBAACC,EAAA,EAAD,CAAK1Q,UAAW,cAAeb,MAAO,CAAEc,MAAO,SAG7C,4BAAKoO,EAAL,IAAkB,kBAAC,IAAD,CAAiBpO,MAAM,QAAQ0Q,KAAMC,OACvD,8CAGF,kBAACF,EAAA,EAAD,CAAK1Q,UAAU,YAEb,kBAAC,MAAD,CACEX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQnD,EACRoD,SAAU,CACR,CACEC,MAAO,aACP7P,KAAM8M,EACN7N,gBAAiB8P,SAM3B,yBAAKhR,MAAO,CAAEc,MAAO,OAAQsD,SAAU,OAAQ2N,WAAY,SAA3D,cACA,kBAACR,EAAA,EAAD,CAAK1Q,UAAU,qBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,sBAAf,UAA4C,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAIpR,UAAU,SAASuO,EAAeF,EAAc,KAAKlC,QAAQ,GAAjE,KAA0E,uCACrL,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,sBAAf,YAA6C,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAKpR,UAAU,SAASwO,EAAiBH,EAAc,KAAKlC,QAAQ,GAApE,KAA6E,wCAE3L,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,sBAAf,UAA4C,wBAAIA,UAAU,SAASsO,EAAeD,EAAc,KAAKlC,QAAQ,GAAjE,KAA0E,uCACtH,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,sBAAf,UAA6C,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAKpR,UAAU,SAASsN,EAASD,GAAkBlB,QAAQ,IAAQ,0CAEjL,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAEhF,kBAAC0D,EAAA,EAAD,CAAK1Q,UAAU,sBACb,kBAAC,OAAD,CACEV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,WAGd6B,KAAM,CACJ2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACP7P,KAAMyM,EACNhG,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAQvB,kBAAC,WAAD,CACE/R,MAAO,IACPuR,QAAS,CACPS,SAAU,CACR3J,IAAK,CACH4J,YAAa,IAGjBT,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACE5P,KAAM,CAAC+N,EAAOrL,OAAQwL,EAAMxL,OAAQqB,EAAQrB,OAAQyL,EAAOzL,OAAQ0L,EAAQ1L,QAC3EzD,gBAAiBmR,SAS/B,CACEzR,GAAI,EACJyQ,MAAO,SAEPC,QACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACb,kBAAC,gBAAD,CACEX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KASd6B,KAAM,CACJ2P,OAAQlC,EACRmC,SAAU,CACR,CACEC,MAAO,aACP7P,KAAMgN,EACN/N,gBAAiB+P,SAM3B,kBAACe,EAAA,EAAD,CAAKnR,UAAU,QAKb,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE5C,4BAAKqO,EAAL,KAAoB,kBAAC,IAAD,CAAiBrO,MAAM,QAAQ0Q,KAAMC,OAEzD,6CAIF,kBAACF,EAAA,EAAD,CAAK1Q,UAAU,sBACb,kBAAC,OAAD,CACEV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,WAGd6B,KAAM,CACJ2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACP7P,KAAM0M,EACNjG,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYvB,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAvC,cACA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,qBAEb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,YAArC,SAAwD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMrD,EAAclM,GAASiM,EAAcjM,GAAS,KAAKsK,QAAQ,GAAjE,KAA0E,yCAC7N,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASiM,EAAcjM,GAAS,KAAKsK,QAAQ,GAAnE,KAA4E,0CAIhO,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE3M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACE1N,MAAO,IACPuR,QAAS,CAOPS,SAAU,CACR3J,IAAK,CACH4J,YAAa,IAGjBT,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACR,CACE5P,KAAM,CAACqO,EAAK3L,OAAQ4L,EAAU5L,OAAQ6L,EAAS7L,OAAQ8L,GAAQ9L,OAAQ+L,GAAQ/L,QAC/EzD,gBAAiBmR,WAcnC,CACEzR,GAAI,EACJyQ,MAAO,SACPG,KAAM,oCACNF,QACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACb,kBAAC,gBAAD,CACEX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KASd6B,KAAM,CACJ2P,OAAQlC,EACRmC,SAAU,CACR,CACEC,MAAO,aACP7P,KAAM8N,EACN7O,gBAAiBgQ,SAM3B,kBAACc,EAAA,EAAD,CAAKnR,UAAU,QAKb,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE5C,4BAAKsO,EAAL,KAAoB,kBAAC,IAAD,CAAiBtO,MAAM,QAAQ0Q,KAAMS,OAEzD,6CAIF,kBAACV,EAAA,EAAD,CAAK1Q,UAAU,sBACb,kBAAC,OAAD,CACEV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,WAGd6B,KAAM,CACJ2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACP7P,KAAM8N,EACNrH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYvB,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAvC,cACA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,qBAEb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,SAAqD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMvD,EAAahM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,yCACzN,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAAnE,KAA4E,0CAIhO,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAAjE,KAA0E,yCAC/M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE3M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACE1N,MAAO,IACPuR,QAAS,CAOPS,SAAU,CACR3J,IAAK,CACH4J,YAAa,IAGjBT,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACR,CACE5P,KAAM,CAAC0O,GAAQhM,OAAQiM,GAAQjM,OAAQkM,GAAQlM,OAAQmM,GAAQnM,OAAQoM,GAAQpM,QAC/EzD,gBAAiBmR,WAanC,CACEzR,GAAI,EACJyQ,MAAO,WACPG,KAAM,oCACNF,QAAS,oCACP,kBAACC,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACb,kBAAC,gBAAD,CACEX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KASd6B,KAAM,CACJ2P,OAAQlC,EACRmC,SAAU,CACR,CACEC,MAAO,aACP7P,KAAM4N,EACN3O,gBAAiB8P,SAM3B,kBAACgB,EAAA,EAAD,CAAKnR,UAAU,QAKb,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE5C,6BAAMuO,EAAiB,GAAGrC,QAAQ,GAAlC,KAAuC,kBAAC,IAAD,CAAiBlM,MAAM,QAAQ0Q,KAAMC,OAE5E,+CAIF,kBAACF,EAAA,EAAD,CAAK1Q,UAAU,sBACb,kBAAC,OAAD,CACEV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,WAGd6B,KAAM,CACJ2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACP7P,KAAM4N,EACNnH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYvB,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,OAAQ2N,WAAY,SAA3D,cACA,kBAACR,EAAA,EAAD,CAAK1Q,UAAU,qBAEb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,SAAqD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMrD,EAAclM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAlE,KAA2E,yCAI/N,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE3M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACE1N,MAAO,IACPuR,QAAS,CAOPS,SAAU,CACR3J,IAAK,CACH4J,YAAa,IAGjBT,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACE5P,KAAM,CAAC+N,EAAOrL,OAAQwL,EAAMxL,OAAQqB,EAAQrB,OAAQyL,EAAOzL,OAAQ0L,EAAQ1L,QAC3EzD,gBAAiBmR,WAajC,CACEzR,GAAI,EACJyQ,MAAO,QACPG,KAAM,oCACNF,QAAS,oCACP,kBAACC,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACb,kBAAC,gBAAD,CACEX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KASd6B,KAAM,CACJ2P,OAAQlC,EACRmC,SAAU,CACR,CACEC,MAAO,aACP7P,KAAM4N,EACN3O,gBAAiB8P,SAM3B,kBAACgB,EAAA,EAAD,CAAKnR,UAAU,QAKb,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE5C,6BAAMwO,EAAc,GAAGtC,QAAQ,GAA/B,KAAoC,kBAAC,IAAD,CAAiBlM,MAAM,QAAQ0Q,KAAMC,OAEzE,4CAIF,kBAACF,EAAA,EAAD,CAAK1Q,UAAU,sBACb,kBAAC,OAAD,CACEV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOPC,OAAQ,CACNnR,SAAS,EACTJ,SAAU,WAGd6B,KAAM,CACJ2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACP7P,KAAM4N,EACNnH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYvB,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,OAAQ2N,WAAY,SAA3D,cACA,kBAACR,EAAA,EAAD,CAAK1Q,UAAU,qBAEb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,SAAqD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMrD,EAAclM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAlE,KAA2E,yCAI/N,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACb,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE3M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACE1N,MAAO,IACPuR,QAAS,CAOPS,SAAU,CACR3J,IAAK,CACH4J,YAAa,IAGjBT,OAAQ,CACNnR,SAAS,EACTJ,SAAU,KAGd6B,KAAM,CACJ2P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACE5P,KAAM,CAAC+N,EAAOrL,OAAQwL,EAAMxL,OAAQqB,EAAQrB,OAAQyL,EAAOzL,OAAQ0L,EAAQ1L,QAC3EzD,gBAAiBmR,YAiB7BC,GAAgB,WAAO,IAAD,EACEC,mBAAS,GADX,mBACnBC,EADmB,KACXC,EADW,KAG1B,OACE,yBAAK5R,UAAU,WACb,yBAAKA,UAAU,QACZuQ,GAAS5O,KAAI,gBAAG5B,EAAH,EAAGA,GAAI4Q,EAAP,EAAOA,KAAMH,EAAb,EAAaA,MAAb,OAAyB,kBAACqB,GAAD,CACrCC,IAAKtB,EACLG,KAAMA,EACNH,MAAOA,EACPuB,cAAe,kBAAMH,EAAU7R,IAC/BiS,SAAUL,IAAW5R,QAIzB,yBAAKC,UAAU,WACZuQ,GAAS5O,KAAI,YAAsB,IAAnB5B,EAAkB,EAAlBA,GAAI0Q,EAAc,EAAdA,QACnB,OAAOkB,IAAW5R,EAAK0Q,EAAU,SAOrCoB,GAAmB,SAAC,GAKnB,IAAD,IAJJlB,YAII,MAJG,GAIH,MAHJH,aAGI,MAHI,GAGJ,MAFJuB,qBAEI,MAFY,kBAAMnM,QAAQqM,MAAM,0CAEhC,MADJD,gBACI,SACJ,OACE,yBAAKhS,UAAWgS,EAAW,UAAY,4BAA6BzR,QAASwR,GAC3E,uBAAG/R,UAAW2Q,IACd,uBAAG3Q,UAAU,kBAAkBwQ,KAMrC,OACE,oCACE,yBAAKxQ,UAAWiN,EAAS,UAAY,UACnC,kBAAC,WAAD,CACEiF,YAAY,aACZC,aAAa,UACbC,WAAW,GAGX,yBAAKpS,UAAU,QACb,yBAAKA,UAAYiN,EAAoB,UAAX,UACxB,kBAACoF,EAAA,EAAD,KACE,kBAAC3B,EAAA,EAAD,CAAK1Q,UAAU,SAEb,kBAACmR,EAAA,EAAD,CAAKmB,GAAI,GAAItS,UAAU,aAAagN,GACpC,kBAACmE,EAAA,EAAD,CAAKnR,UAAU,QACb,yBAAKb,MAAO,CAAEQ,QAAS,OAAQE,eAAgB,aAC7C,kBAACS,EAAA,EAAD,CAEEC,QAAS6M,EAET5M,QAAQ,eAERR,UAAU,gBAGV,qCAOR,kBAACyR,GAAD,CACExQ,UAAWA,EACXY,MAAOA,EACPmL,OAAQA,EACRa,aAAcA,EACdE,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfZ,MAAOA,WAmBrBsE,EAAY,CACd,UACA,UACA,UACA,UACA,UACA,mBACA,qB,QCsHazE,EAt7BF,SAAC,GAqCV,IAnCG,IAFSC,EAEV,EAFUA,OAAQnL,EAElB,EAFkBA,MAAOiJ,EAEzB,EAFyBA,WAAY+C,EAErC,EAFqCA,aAAc0E,EAEnD,EAFmDA,KACrDxE,EACE,EADFA,cAAeC,EACb,EADaA,gBAAiBF,EAC9B,EAD8BA,cAAeZ,EAC7C,EAD6CA,MAAOjM,EACpD,EADoDA,UAAWmM,EAC/D,EAD+DA,YAI3DsB,EAAqBzN,EAAU0N,QAAO,SAAAvM,GAAO,OAAIA,EAAQwM,YAAc5B,KAEvE6B,EAAe5N,EAAU0N,QAAO,SAAAvM,GAAO,OAAIA,EAAQwM,YAAc5B,GAAU5K,EAAQA,QAAQ0B,QAAU,MAAInC,KAAI,SAAAmN,GAAe,OAAIA,EAAgB1M,WAEhJ4M,EAAqBN,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBE,mBAAsB,KAAM7C,QAAQ,MACtH8C,EAAsBP,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBG,oBAAuB,KAAM9C,QAAQ,MACxHD,EAAgBwC,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBG,oBAAsBH,EAAgBE,mBAAuB,KAAK7C,QAAQ,MACvJ+C,EAAsBR,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBI,oBAAuB,KAAM/C,QAAQ,MAIxHgD,GAHwBT,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBM,sBAAyB,KAAMjD,QAAQ,MACvGuC,EAAmB/M,KAAI,SAAAmN,GAAe,OAAOA,EAAgBO,mBAAsB,KAAMlD,QAAQ,MAE7GuC,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OACnGM,EAAQZ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,IAAMF,EAAgBE,mBAAqB,IAAO,OACrJ7J,EAAUuJ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACxJO,EAASb,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACvJQ,EAAUd,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OAGpGS,EAAOf,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,MAClGS,EAAYhB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,IAAMH,EAAgBG,oBAAsB,IAAO,KAC3JU,EAAWjB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,GAAKH,EAAgBG,oBAAsB,IAAO,OACzJW,EAAUlB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,KAAOH,EAAgBG,oBAAsB,IAAO,OAC1JY,EAAUnB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,OAGrGa,EAAUpB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,KACrGa,EAAUrB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,GAAKJ,EAAgBI,oBAAsB,IAAO,MACxJc,EAAUtB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJe,EAAUvB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJgB,EAAUxB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,MAErGiB,EAAa,GACVtM,EAAI,EAAGA,EAAImL,EAAmBlL,OAAQD,IACvCmL,EAAmBnL,GAAK,IAAMsM,EAAW7M,KAAK,WAC9C0L,EAAmBnL,IAAM,IAAMmL,EAAmBnL,GAAK,KAAOsM,EAAW7M,KAAK,WAC9E0L,EAAmBnL,IAAM,KAAOmL,EAAmBnL,GAAK,KAAOsM,EAAW7M,KAAK,WAC/E0L,EAAmBnL,IAAM,KAAOmL,EAAmBnL,GAAK,KAAOsM,EAAW7M,KAAK,WAC/E0L,EAAmBnL,IAAM,KAAOsM,EAAW7M,KAAK,WAIxD,IADA,IAAM8M,EAAc,GACXvM,EAAI,EAAGA,EAAIoL,EAAoBnL,OAAQD,IACxCoL,EAAoBpL,GAAK,IAAMuM,EAAY9M,KAAK,WAChD2L,EAAoBpL,IAAM,IAAMoL,EAAoBpL,GAAK,GAAKuM,EAAY9M,KAAK,WAC/E2L,EAAoBpL,IAAM,GAAKoL,EAAoBpL,GAAK,KAAOuM,EAAY9M,KAAK,WAChF2L,EAAoBpL,IAAM,KAAOoL,EAAoBpL,GAAK,KAAOuM,EAAY9M,KAAK,WAClF2L,EAAoBpL,IAAM,KAAOuM,EAAY9M,KAAK,WAI1D,IADA,IAAM+M,EAAc,GACXxM,EAAI,EAAGA,EAAIqL,EAAoBpL,OAAQD,IACxCqL,EAAoBrL,GAAK,IAAMwM,EAAY/M,KAAK,WAChD4L,EAAoBrL,IAAM,IAAMqL,EAAoBrL,GAAK,GAAKwM,EAAY/M,KAAK,WAC/E4L,EAAoBrL,IAAM,GAAKqL,EAAoBrL,GAAK,KAAOwM,EAAY/M,KAAK,WAChF4L,EAAoBrL,IAAM,KAAOqL,EAAoBrL,GAAK,KAAOwM,EAAY/M,KAAK,WAClF4L,EAAoBrL,IAAM,KAAOwM,EAAY/M,KAAK,WAI1D,IADA,IAAMgN,EAAkB,GACfzM,EAAI,EAAGA,EAAIqI,EAAcpI,OAAQD,IAClCqI,EAAcrI,GAAK,GAAOyM,EAAgBhN,KAAK,WAC/C4I,EAAcrI,IAAM,GAAOqI,EAAcrI,GAAK,GAAOyM,EAAgBhN,KAAK,WAC1E4I,EAAcrI,IAAM,GAAOqI,EAAcrI,GAAK,KAAOyM,EAAgBhN,KAAK,WAC1E4I,EAAcrI,IAAM,KAAOqI,EAAcrI,GAAK,GAAOyM,EAAgBhN,KAAK,WAC1E4I,EAAcrI,IAAM,GAAOyM,EAAgBhN,KAAK,WAGxD,IAAMiN,GAAW,CACb,CACIxQ,GAAI,EACJyQ,MAAO,QAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,CAAK1Q,UAAW,eAAgBb,MAAO,CAAEc,MAAO,SAG5C,6BAAM4N,EAAahM,GAAS,KAAMsK,QAAQ,GAA1C,KACA,8CAcJ,kBAACuE,EAAA,EAAD,CAAKvR,MAAO,CAAEE,OAAQ,SAGlB,kBAAC8R,EAAA,EAAD,CAAKnR,UAAU,QAUX,yBAAKA,UAAU,YAAYb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAA7D,SAEA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,sBAEX,kBAAC,OAAD,CACIV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CACLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,WAUlB6B,KAAM,CACF2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,eACP7P,KAAM4N,EACNnH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,0BAK7B,yBAAKlS,MAAO,CAAEI,SAAU,WAAYH,MAAO,OAAQoT,IAAK,QACnDxD,EAAmB,GAAKA,EAAmB,GACxC,kBAAC,IAAD,CAAiB2B,KAAM8B,IAAcxS,MAAM,qBAC3C,kBAAC,IAAD,CAAiB0Q,KAAM+B,IAAYC,KAAK,QAAQ1S,MAAM,YAKlE,yBAAKD,UAAU,YAAYb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAA7D,cACA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,iBACX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,qBAAf,SAEK+N,EAAclM,GAASgM,EAAahM,GAAS,KAAO,IACjD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,UAAUmS,KAAK,OAAO3S,UAAU,SAA/C,OACA+N,EAAclM,GAASgM,EAAahM,GAAS,KAAO,IAChD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,SAASmS,KAAK,OAAO3S,UAAU,SAA9C,QAAuE,IAG/E,yBAAKA,UAAU,SAAS+N,EAAclM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAlF,MAGJ,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,qBAAf,WAEKgO,EAAgBnM,GAASgM,EAAahM,GAAS,KAAO,KACnD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,UAAUmS,KAAK,OAAO3S,UAAU,SAA/C,OACAgO,EAAgBnM,GAASgM,EAAahM,GAAS,KAAO,KAClD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,SAASmS,KAAK,OAAO3S,UAAU,SAA9C,QAAuE,IAG/E,yBAAKA,UAAU,SAASgO,EAAgBnM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAApF,OAIR,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,iBACX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,0BAAf,SAEK8N,EAAcjM,GAASgM,EAAahM,GAAS,KAAO,EACjD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,UAAUmS,KAAK,OAAO3S,UAAU,SAA/C,OACA8N,EAAcjM,GAASgM,EAAahM,GAAS,KAAO,EAChD,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,SAASmS,KAAK,OAAO3S,UAAU,SAA9C,QAAqE,IAG7E,yBAAKA,UAAU,SAAS8N,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAlF,MAGJ,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,0BAAf,SAEKkN,EAAMrL,GAASiJ,EAAWjJ,GAAS,KAAO,IACvC,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,SAASmS,KAAK,OAAO3S,UAAU,SAA9C,QACAkN,EAAMrL,GAASiJ,EAAWjJ,GAAS,KAAO,IACtC,kBAAC+Q,EAAA,EAAD,CAAOpS,QAAQ,UAAUmS,KAAK,OAAO3S,UAAU,SAA/C,QAAsE,IAG9E,yBAAKA,UAAU,QAAwD,KAA/CkN,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,GAAlE,OAIR,yBAAKnM,UAAU,YAAYb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAA7D,YACA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,SAEX,kBAAC,WAAD,CACIV,MAAO,IACPuR,QAAS,CACLS,SAAU,CACN3J,IAAK,CACD4J,YAAa,IAGrBT,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KAGlB6B,KAAM,CACF2P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACN,CACI5P,KAAM,CAAC+N,EAAOrL,OAAQwL,EAAMxL,OAAQqB,EAAQrB,OAAQyL,EAAOzL,OAAQ0L,EAAQ1L,QAC3EzD,gBAAiBmR,SAUzC,kBAACL,EAAA,EAAD,CAAKnR,UAAU,GAAGb,MAAO,CAAEE,OAAQ,OAAQwT,UAAW,WAClD,yBAAK1T,MAAO,CAAEc,MAAO,OAAQsD,SAAU,QAAUvD,UAAU,QAA3D,eAEA,kBAAC,gBAAD,CACIX,OAA8B,GAAtBwP,EAAa/K,OAErB+M,QAAS,CACLiC,qBAAqB,EACrBhC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,IAEdwT,OAAQ,CAKJC,QAAS,CACLC,KAAM,GACN7T,MAAO,EACPoT,IAAK,EACLU,OAAQ,KAIpB9R,KAAM,CAEF2P,OAAQlC,EACRmC,SAAU,CACN,CACIC,MAAO,aACP7P,KAAM4N,EACN3O,gBAAiB8P,OAMhCtB,EAAa/K,OAAS,IACnB,oCACI,yBAAK3E,MAAO,CAAEc,MAAO,OAAQsD,SAAU,QAAUvD,UAAU,QAA3D,aAEA,kBAAC,gBAAD,CACIX,OAA8B,GAAtBwP,EAAa/K,OAErB+M,QAAS,CACLiC,qBAAqB,EACrBhC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,IAEdwT,OAAQ,CAKJC,QAAS,CACLC,KAAM,GACN7T,MAAO,EACPoT,IAAK,EACLU,OAAQ,KAIpB9R,KAAM,CAEF2P,OAAQlC,EACRmC,SAAU,CACN,CACIC,MAAO,aACP7P,KAAM8K,EACN7L,gBAAiB+P,YAc7D,CACIrQ,GAAI,EACJyQ,MAAO,SAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,CAAKvR,MAAO,CAAEE,OAAQ,OAAQwT,UAAW,WAErC,kBAAC1B,EAAA,EAAD,CAAKnR,UAAU,aAAab,MAAO,CAAEE,OAAQ,SACzC,yBAAKF,MAAO,CAAEc,MAAO,OAAQsD,SAAU,QAAUvD,UAAU,QAA3D,eACA,kBAAC,gBAAD,CAEIX,OAA8B,GAAtBwP,EAAa/K,OACrBxE,MAAO,IACPuR,QAAS,CACLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KASlB6B,KAAM,CACF2P,OAAQlC,EACRmC,SAAU,CACN,CACIC,MAAO,aACP7P,KAAM6N,EACN5O,gBAAiB+P,QAMrC,kBAACe,EAAA,EAAD,CAAKnR,UAAU,QAKX,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE1C,6BAAM6N,EAAcjM,GAAS,KAAMsK,QAAQ,GAA3C,KAAgD,kBAAC,IAAD,CAAiBlM,MAAM,QAAQ0Q,KAAMC,OAErF,6CAIJ,yBAAKzR,MAAO,CAAEc,MAAO,OAAQsD,SAAU,QAAUvD,UAAU,QAA3D,SACA,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,sBACX,kBAAC,OAAD,CACIV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,WAGlB6B,KAAM,CACF2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACP7P,KAAM6N,EACNpH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYjC,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,QAAUvD,UAAU,QAA3D,cACA,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,qBAEX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,YAArC,SAAwD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMrD,EAAclM,GAASiM,EAAcjM,GAAS,KAAKsK,QAAQ,GAAjE,KAA0E,yCAC7N,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASiM,EAAcjM,GAAS,KAAKsK,QAAQ,GAAnE,KAA4E,0CAIlO,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE7M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACI1N,MAAO,IACPuR,QAAS,CAOLS,SAAU,CACN3J,IAAK,CACD4J,YAAa,IAGrBT,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KAGlB6B,KAAM,CACF2P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACN,CACI5P,KAAM,CAACqO,EAAK3L,OAAQ4L,EAAU5L,OAAQ6L,EAAS7L,OAAQ8L,EAAQ9L,OAAQ+L,EAAQ/L,QAC/EzD,gBAAiBmR,WAerD,CACIzR,GAAI,EACJyQ,MAAO,SAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACX,kBAAC,gBAAD,CACIX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KASlB6B,KAAM,CACF2P,OAAQlC,EACRmC,SAAU,CACN,CACIC,MAAO,aACP7P,KAAM8N,EACN7O,gBAAiBgQ,QAMrC,kBAACc,EAAA,EAAD,CAAKnR,UAAU,QAKX,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE1C,6BAAM8N,EAAclM,GAAS,KAAMsK,QAAQ,GAA3C,KAAgD,kBAAC,IAAD,CAAiBlM,MAAM,QAAQ0Q,KAAMS,OAErF,6CAIJ,kBAACV,EAAA,EAAD,CAAK1Q,UAAU,sBACX,kBAAC,OAAD,CACIV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,WAGlB6B,KAAM,CACF2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACP7P,KAAM8N,EACNrH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYjC,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAvC,cACA,kBAACmN,EAAA,EAAD,CAAK1Q,UAAU,qBAEX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,SAAqD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAIpR,UAAU,SAAS6N,EAAahM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAAjF,KAA0F,yCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAIpR,UAAU,SAASgO,EAAgBnM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAApF,KAA6F,0CAIvN,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,kBAAC,IAAD,CAAiBA,MAAM,QAAQ0Q,KAAMC,MAAa,wBAAI5Q,UAAU,SAAS8N,EAAcjM,GAASkM,EAAclM,GAAS,KAAKsK,QAAQ,GAAlF,KAA4F,yBAAKnM,UAAU,QAAf,YACpM,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmB0Q,KAAMS,MAAe,wBAAIpR,UAAU,SAASkN,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAElM,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACI1N,MAAO,IACPuR,QAAS,CAOLS,SAAU,CACN3J,IAAK,CACD4J,YAAa,IAGrBT,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KAGlB6B,KAAM,CACF2P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACN,CACI5P,KAAM,CAAC0O,EAAQhM,OAAQiM,EAAQjM,OAAQkM,EAAQlM,OAAQmM,EAAQnM,OAAQoM,EAAQpM,QAC/EzD,gBAAiBmR,WAarD,CACIzR,GAAI,EACJyQ,MAAO,WAEPC,QAAS,oCACL,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAKnR,UAAU,QACX,kBAAC,gBAAD,CACIX,OAAQ,IACRC,MAAO,IACPuR,QAAS,CACLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KASlB6B,KAAM,CACF2P,OAAQlC,EACRmC,SAAU,CACN,CACIC,MAAO,aACP7P,KAAM4N,EACN3O,gBAAiB8P,QAMrC,kBAACgB,EAAA,EAAD,CAAKnR,UAAU,QAKX,kBAAC0Q,EAAA,EAAD,CAAK1Q,UAAU,eAAeb,MAAO,CAAEc,MAAO,SAE1C,6BAAM4N,EAAahM,GAAS,KAAMsK,QAAQ,GAA1C,KAA+C,kBAAC,IAAD,CAAiBlM,MAAM,QAAQ0Q,KAAMC,OAEpF,+CAIJ,kBAACF,EAAA,EAAD,CAAK1Q,UAAU,sBACX,kBAAC,OAAD,CACIV,MAAO,IACPD,OAAQ,IACRwR,QAAS,CAOLC,OAAQ,CACJnR,SAAS,EACTJ,SAAU,WAGlB6B,KAAM,CACF2P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACP7P,KAAM4N,EACNnH,MAAM,EACNxH,gBAAiB,uBACjBgR,YAAa,2BAYjC,yBAAKlS,MAAO,CAAEc,MAAO,OAAQsD,SAAU,OAAQ2N,WAAY,SAA3D,cACA,kBAACR,EAAA,EAAD,CAAK1Q,UAAU,qBAEX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,SAAqD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMrD,EAAclM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,WAAuD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMpD,EAAgBnM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAlE,KAA2E,yCAIjO,kBAACuE,EAAA,EAAD,CAAK1Q,UAAU,gBACX,kBAACmR,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,QAAQ0Q,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcjM,GAASgM,EAAahM,GAAS,KAAKsK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACgF,EAAA,EAAD,CAAKnR,UAAU,MAAMb,MAAO,CAAEc,MAAO,SAArC,UAAsD,yBAAKD,UAAU,QAAO,kBAAC,IAAD,CAAiBC,MAAM,mBAAmB0Q,KAAMS,OAAqB,6BAAMlE,EAAMrL,GAASiJ,EAAWjJ,IAAQsK,QAAQ,IAAQ,0CAE7M,yBAAKnM,UAAU,OAAOb,MAAO,CAAEc,MAAO,OAAQsD,SAAU,SAAxD,gBAAgFyJ,GAChF,kBAAC,WAAD,CACI1N,MAAO,IACPuR,QAAS,CAOLS,SAAU,CACN3J,IAAK,CACD4J,YAAa,IAGrBT,OAAQ,CACJnR,SAAS,EACTJ,SAAU,KAGlB6B,KAAM,CACF2P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACN,CACI5P,KAAM,CAAC+N,EAAOrL,OAAQwL,EAAMxL,OAAQqB,EAAQrB,OAAQyL,EAAOzL,OAAQ0L,EAAQ1L,QAC3EzD,gBAAiBmR,YA+I/CC,GAAgB,WAAO,IAAD,EACIC,mBAAS,GADb,mBACjBC,EADiB,KACTC,EADS,KAGxB,OACI,yBAAK5R,UAAU,WACX,yBAAKA,UAAU,QACVuQ,GAAS5O,KAAI,gBAAG5B,EAAH,EAAGA,GAAI4Q,EAAP,EAAOA,KAAMH,EAAb,EAAaA,MAAb,OAAyB,kBAACqB,GAAD,CACnCC,IAAKtB,EACLG,KAAMA,EACNH,MAAOA,EACPuB,cAAe,kBAAMH,EAAU7R,IAC/BiS,SAAUL,IAAW5R,QAI7B,yBAAKC,UAAU,WACVuQ,GAAS5O,KAAI,YAAsB,IAAnB5B,EAAkB,EAAlBA,GAAI0Q,EAAc,EAAdA,QACjB,OAAOkB,IAAW5R,EAAK0Q,EAAU,SAO/CoB,GAAmB,SAAC,GAMnB,IAAD,IALFlB,YAKE,MALK,GAKL,MAJFH,aAIE,MAJM,GAIN,MAFFuB,qBAEE,MAFc,kBAAMnM,QAAQqM,MAAM,0CAElC,MADFD,gBACE,SACF,OACI,yBAAKhS,UAAWgS,EAAW,UAAY,4BAA6BzR,QAASwR,GACzE,uBAAG5S,MAAO,CAAEQ,QAAS,QAAUK,UAAU,kBAAkBwQ,EAAOG,EAAlE,OAMZ,OACI,oCACI,yBAAK3Q,UAAWuS,EAAO,UAAY,UAC/B,kBAAC,WAAD,CACIL,YAAY,aACZC,aAAa,UACbC,WAAW,GAGX,yBAAKpS,UAAU,QACX,yBAAKA,UAAYuS,EAAkB,UAAX,UACpB,kBAACF,EAAA,EAAD,KACI,kBAAC3B,EAAA,EAAD,CAAK1Q,UAAU,SACX,kBAACmR,EAAA,EAAD,CAAKmB,GAAI,EAAGtS,UAAU,aAAagN,GACnC,kBAACmE,EAAA,EAAD,CAAKnR,UAAU,QACX,yBAAKb,MAAO,CAAEQ,QAAS,OAAQE,eAAgB,aAC3C,kBAACS,EAAA,EAAD,CAEIC,QAAS6M,EAET5M,QAAQ,eAERR,UAAU,gBAGV,qCAOhB,kBAACyR,GAAD,CAEIxQ,UAAWA,EACXY,MAAOA,EACPmL,OAAQA,EACRa,aAAcA,EACdE,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfZ,MAAOA,WAoBvCsE,EAAY,CACZ,UACA,UACA,UACA,UACA,UACA,mBACA,qBCj8BE2B,G,OAAe,CACjBlG,QAAQ,EACRsF,MAAM,EACNvF,OAAQ,GACRnL,MAAO,KAuPIuR,EApPH,WAAM,MAIkB1B,mBAAS,IAJ3B,mBAIP2B,EAJO,KAIKC,EAJL,KAKd5Q,qBAAU,WAAM,4CACZ,8BAAA6Q,EAAA,+EAE6BhS,MCxBXiS,6BDsBlB,cAEcC,EAFd,gBAGiCA,EAAO/R,OAHxC,OAGc2R,EAHd,OAIQC,EAAU,CAACD,IACXzN,QAAQC,IAAIwN,EAAY,cALhC,kDAOQzN,QAAQC,IAAR,MAPR,2DADY,uBAAC,WAAD,wBAWZ6N,KACD,IAGH,IAAMC,EAAY,SAAC7B,GACf,OAAOuB,EAAW1R,KAAI,SAACP,GAAD,OAAUA,EAAK0Q,OAGnCvE,EAAcoG,EAAU,sBACxBnG,EAAemG,EAAU,uBACzBlG,EAAekG,EAAU,uBACzBjG,EAAiBiG,EAAU,yBAC3BhG,EAAcgG,EAAU,sBAC9B/N,QAAQC,IAAI0H,EAAa,eACzB,IAAMF,EAAmBsG,EAAU,cAC7BlF,EAAckF,EAAU,SA/BhB,EAoCsBjC,mBAAS,IApC/B,mBAoCPkC,EApCO,KAoCKC,EApCL,KAqCdnR,qBAAU,WAAM,4CACZ,8BAAA6Q,EAAA,+EAE6BhS,MCpDRiS,oCDkDrB,cAEcC,EAFd,gBAGiCA,EAAO/R,OAHxC,OAGckS,EAHd,OAIQC,EAAc,YAAID,IAJ1B,kDAOQhO,QAAQC,IAAR,MAPR,2DADY,uBAAC,WAAD,wBAWZ6N,KACD,IAEH,IAAMI,EAAgB,SAAChC,GACnB,OAAO8B,EAAWjS,KAAI,SAACiN,GAAD,OAAeA,EAAUkD,OAG7ChH,EAAagJ,EAAc,cAC3BjG,EAAeiG,EAAc,sBAC7B/F,EAAgB+F,EAAc,uBAC9B9F,EAAkB8F,EAAc,yBAChChG,EAAgBgG,EAAc,uBAC9B7F,EAAe6F,EAAc,sBAM7B5G,GAJQ4G,EAAc,SACbA,EAAc,UACZA,EAAc,YAChBA,EAAc,UACfA,EAAc,UAEtBlG,EAAiBkG,EAAc,aAErClO,QAAQC,IAAI+H,EAAgB,kBAE5B,IAxEc,EA2EoB8D,mBAAS,IA3E7B,mBA2EPzQ,EA3EO,KA2EI8S,EA3EJ,KA4EdrR,qBAAU,WACN,IAAMmM,EAAe,GADT,4CAEZ,gCAAA0E,EAAA,+EAE0BhS,MC/FPiS,mCD6FnB,cAEcQ,EAFd,gBAGgCA,EAAItS,OAHpC,OAMQ,IAHMT,EAHd,OAIQ8S,EAAa,YAAI9S,IAER4C,EAAI,EAAGA,EAAI5C,EAAU6C,OAAQD,IAClCgL,EAAavL,KAAK2Q,OAAOhT,EAAU4C,GAAGzB,UAPlD,kDAUQwD,QAAQC,IAAR,MAVR,2DAFY,0DAeZqO,KACD,IAEmBpC,EAImB,aAH9B7Q,EAAUU,KAAI,SAACS,GAAD,OAAaA,EAAQ0P,MAD9C,IAAsBA,EA9FR,EAuGYJ,mBAAS,CAACyB,IAvGtB,mBAuGPhG,EAvGO,KAuGAgH,EAvGA,KAyKRjV,EAAe,WACjBiV,EAAS,2BACFhB,GADC,IAEJlG,QAAQ,EACRD,OAAQ,SACRnL,MAAO,MAKf,SAASuL,IACL+G,GAAUhH,GAKd,OAFAvH,QAAQC,IAAIsN,EAAc,eAAgBhG,EAAO,SAG7C,oCACI,kBAAC,EAAD,CACIvO,WAzEO,WACfuV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,OACRnL,MAAO,EACPoL,QAAQ,MAoEJpO,aAxDS,WACjBsV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,SACRnL,MAAO,EACPoL,QAAQ,MAmDJmH,OArFG,SAAC,GAAuB,IAArBpH,EAAoB,EAApBA,OAAQnL,EAAY,EAAZA,MACtBsS,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQA,EACRnL,MAAOA,EACPoL,QAAQ,MAgFJ/N,aAAcA,EACdD,aAlDS,WACjBkV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,SACRnL,MAAO,EACPoL,QAAQ,MA6CJjO,mBA1Ce,WACvBmV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,gBACRnL,MAAO,EACPoL,QAAQ,MAqCJlO,mBAlCe,WACvBoV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,gBACRnL,MAAO,EACPoL,QAAQ,MA6BJnO,cAvEU,WAClBqV,EAAS,2BACFhB,GADC,IAEJZ,MAAM,EACNvF,OAAQ,oBACRnL,MAAO,EACPoL,QAAQ,QAmER,yBAAKjN,UAAU,WACX,kBAAC,EAAD,CACIoN,YAAaA,EACbvL,MAAOsL,EAAMtL,MACb0Q,KAAMpF,EAAMoF,KACZvF,OAAQG,EAAMH,OACd/L,UAAWA,EACX2S,WAAYA,EACZ9I,WAAYA,EACZ+C,aAAcA,EACdE,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfG,aAAcA,EACdf,MAAOA,IAEX,kBAACmH,EAAD,CACIlH,MAAOA,EAAMF,OACb/N,aAAcA,EACdkO,YAAaA,EACbvL,MAAOsL,EAAMtL,MACboL,OAAQE,EAAMF,OACdD,OAAQG,EAAMH,OACd/L,UAAWA,EACX2S,WAAYA,EACZ9I,WAAYA,EACZ8C,eAAgBA,EAChBV,MAAOA,EACPK,YAAaA,EACbC,aAAcA,EACdC,aAAcA,EACdC,eAAgBA,EAChBC,YAAaA,EACbE,aAAcA,EACdC,cAAeA,EACfC,cAAeA,EACfC,gBAAiBA,EACjBC,aAAcA,EACdZ,iBAAkBA,EAClBC,OAAQmB,KAGhB,kBAAC,EAAD,CAAKxN,UAAWA,MEpPRoL,QACW,cAA7BiI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAAStN,OACP,kBAAC,IAAMuN,WAAP,KACE,kBAAC,EAAD,OAEFxQ,SAAS4F,eAAe,SDyHpB,kBAAmB6K,WACrBA,UAAUC,cAAcC,MACrBtT,MAAK,SAAAuT,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLrM,QAAQqM,MAAMA,EAAMiD,a","file":"static/js/main.606f7f6a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({ toggleAsia, toggleEurope, toggleOceania, toggleNorthAmerica, toggleSouthAmerica, toggleAfrica, toggleGlobal }) => {\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          right: \"0px\",\r\n          height: \"100vh\", //auto mobile\r\n          width: \"auto\",\r\n          position: \"absolute\",\r\n          background: \"#212529\",\r\n          zIndex: 1,\r\n          opacity: 0.9,\r\n          display: \"flex\",\r\n          flexDirection: \"column\", //row mobile\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          // flexWrap: \"wrap\" //mobile\r\n\r\n        }}\r\n\r\n      >\r\n        <div id=\"\" className=\"legend\" style={{ color: \"grey\" }}>\r\n          <h5 href=\"https://inblockdesign.com\" style={{ marginTop: \"20px\", marginBottom: \"0px\" }}>COVID-19</h5>\r\n          <h5 href=\"https://inblockdesign.com\" style={{ marginTop: \"0px\", marginBottom: \"0px\" }}>DATAMAP</h5>\r\n        </div>\r\n        {/* <div id=\"\" className=\"\" style={{marginTop: '20px', zIndex: '2'}}>\r\n        <h5>Covid-19</h5>\r\n        <h6 >Data Map</h6>\r\n      </div> */}\r\n        <nav id=\"menu\"></nav>\r\n        <div id=\"state-legend\" className=\"legend\">\r\n          {/* <h6 style={{color: \"grey\"}}>KEY</h6> */}\r\n          <div><span style={{ backgroundColor: \"#dd5182\" }}></span>Highest</div>\r\n          <div><span style={{ backgroundColor: \"#ff6e54\" }}></span>Higher</div>\r\n          <div><span style={{ backgroundColor: \"#ffa600\" }}></span>Average</div>\r\n          <div><span style={{ backgroundColor: \"#955196\" }}></span>Lower</div>\r\n          <div><span style={{ backgroundColor: \"#444e86\" }}></span>Lowest</div>\r\n        </div>\r\n        <Button\r\n          className=\"button\"\r\n          id=\"asia\"\r\n          onClick={toggleAsia}\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Asia</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleEurope}\r\n          id=\"europe\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Europe</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleNorthAmerica}\r\n          id=\"northamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>North America</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleAfrica}\r\n          // size=\"md\"\r\n          id=\"africa\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Africa</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleSouthAmerica}\r\n          id=\"southamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>South America</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleOceania}\r\n          id=\"oceania\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>\r\n            Oceania\r\n          </h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>\r\n            Global\r\n          </h6>\r\n        </Button>\r\n        <div id=\"\" className=\"\" style={{ color: \"grey\", lineHeight: 1 }}>\r\n          {/* <p href=\"https://inblockdesign.com\" >   <i className=\"fa fa-info-circle\"></i> Inblock</p> */}\r\n          <p href=\"https://inblockdesign.com\" style={{ marginTop: \"20px\", marginBottom: \"0px\" }} className=\"pb-0\">Inblock</p>\r\n          <p href=\"https://inblockdesign.com\" style={{ marginTop: \"0px\", marginBottom: \"0px\" }} className=\"pt-0\">Design <i className=\"fa fa-info-circle\"></i> </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport \"./Map.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nconst Map2 = ({ countries}) => {\r\n  const mapboxElRef = useRef(null); // DOM element to render map\r\n  \r\n  const fetcher = (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude\r\n            ]\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n      \r\n\r\n          }\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  \r\n \r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const average =\r\n        data.reduce((total, next) => total + next.properties.cases, 0) /\r\n        data.length;\r\n      const min = Math.min(...data.map((item) => item.properties.cases));\r\n      const max = Math.max(...data.map((item) => item.properties.cases));\r\n\r\n      const averageD =\r\n        data.reduce((total, next) => total + next.properties.deaths, 0) /\r\n        data.length;\r\n      const minD = Math.min(...data.map((item) => item.properties.deaths));\r\n      const maxD = Math.max(...data.map((item) => item.properties.deaths));\r\n\r\n      console.log(average, min, max, 'stats')\r\n      console.log(averageD, minD, maxD, 'statsD')\r\n\r\n      const amr = averageD / average;\r\n      const minmr = minD / min;\r\n      const maxmr = maxD / max;\r\n      console.log(amr, minmr, maxmr, 'amr')\r\n\r\n    \r\n      // const countryname = data.map((item) => item.properties.country);\r\n      // console.log(countryname, 'countryname')\r\n    \r\n\r\n\r\n\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [99, 20], // Asia - intial geo location\r\n        zoom: 3 // initial zoom\r\n      });\r\n\r\n\r\n \r\n\r\n\r\n//DOUGHNUT      \r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const cases1 = ['<', ['get', 'cases'], 10000];\r\n      const cases2 = ['all', ['>=', ['get', 'cases'], 10000], ['<', ['get', 'cases'], 100000]];\r\n      const cases3 = ['all', ['>=', ['get', 'cases'], 100000], ['<', ['get', 'cases'], 250000]];\r\n      const cases4 = ['all', ['>=', ['get', 'cases'], 250000], ['<', ['get', 'cases'], 500000]];\r\n      const cases5 = ['>=', ['get', 'cases'], 1000000];\r\n\r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const deaths1 = ['<', ['get', 'deaths'], 100];\r\n      const deaths2 = ['all', ['>=', ['get', 'deaths'], 100], ['<', ['get', 'deaths'], 1000]];\r\n      const deaths3 = ['all', ['>=', ['get', 'deaths'], 1000], ['<', ['get', 'deaths'], 5000]];\r\n      const deaths4 = ['all', ['>=', ['get', 'deaths'], 5000], ['<', ['get', 'deaths'], 20000]];\r\n      const deaths5 = ['>=', ['get', 'deaths'], 20000];\r\n\r\n      const mr1 = deaths1 / cases1;\r\n      const mr2 = deaths2 / cases2;\r\n      const mr3 = deaths3 / cases3;\r\n      const mr4 = deaths4 / cases4;\r\n      const mr5 = deaths5 / cases5;\r\n\r\n      // colors to use for the categories\r\n      const colors = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n      const colors2 = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n//DOT\r\n      const size = 150;\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext('2d');\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(67, 66, 66, ${1 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            radius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n          ).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        }\r\n      };\r\n\r\n//LAYERS\r\n      map.on('load', () => {\r\n        // add a clustered GeoJSON source for a sample set of earthquakes\r\n        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource('dot-point', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            'type': 'FeatureCollection',\r\n            'features': data\r\n          }\r\n        });\r\n        map.addLayer({\r\n          'id': 'layer-with-pulsing-dot',\r\n          'type': 'symbol',\r\n          'source': 'dot-point',\r\n          'layout': {\r\n            'icon-image': 'pulsing-dot'\r\n          }\r\n        });\r\n\r\n        map.addSource('points', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            type: \"FeatureCollection\",\r\n            features: data\r\n          },\r\n          'cluster': true,\r\n          'clusterRadius': 50,\r\n          'clusterProperties': {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            'deaths1': ['+', ['case', deaths1, 1, 0]],\r\n            'deaths2': ['+', ['case', deaths2, 1, 0]],\r\n            'deaths3': ['+', ['case', deaths3, 1, 0]],\r\n            'deaths4': ['+', ['case', deaths4, 1, 0]],\r\n            'deaths5': ['+', ['case', deaths5, 1, 0]],\r\n            'cases1': ['+', ['case', cases1, 1, 0]],\r\n            'cases2': ['+', ['case', cases2, 1, 0]],\r\n            'cases3': ['+', ['case', cases3, 1, 0]],\r\n            'cases4': ['+', ['case', cases4, 1, 0]],\r\n            'cases5': ['+', ['case', cases5, 1, 0]],\r\n         \r\n          },\r\n\r\n        });\r\n\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          'id': 'Deaths',\r\n          'type': 'circle',\r\n          'source': 'points',\r\n\r\n          'filter': ['!=', 'cluster', true],\r\n          'paint': {\r\n            'circle-color': [\r\n              'case',\r\n              deaths1,\r\n              colors2[0],\r\n              deaths2,\r\n              colors2[1],\r\n              deaths3,\r\n              colors2[2],\r\n              deaths4,\r\n              colors2[3],\r\n              colors2[4]\r\n            ],\r\n            'circle-opacity': 0.9,\r\n            'circle-radius': 6,\r\n            // \"circle-radius\": [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     1,\r\n            //     min,\r\n            //     1000,\r\n            //     8,\r\n            //     average / 4,\r\n            //     10,\r\n            //     average / 2,\r\n            //     14,\r\n            //     average,\r\n            //     18,\r\n            //     max,\r\n            //     50\r\n            //   ],\r\n          }\r\n        });\r\n              // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n              map.addLayer({\r\n                'id': 'Cases',\r\n                'type': 'circle',\r\n                'source': 'points',\r\n                'filter': ['!=', 'cluster', true],\r\n                'paint': {\r\n                  'circle-color': [\r\n                    'case',\r\n                    cases1,\r\n                    colors[0],\r\n                    cases2,\r\n                    colors[1],\r\n                    cases3,\r\n                    colors[2],\r\n                    cases4,\r\n                    colors[3],\r\n                    colors[4]\r\n                  ],\r\n                  'circle-opacity': 0.6,\r\n                  'circle-radius': 12,\r\n                }\r\n              });\r\n\r\n        map.addLayer({\r\n          'id': 'clusters',\r\n          'type': 'symbol',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'layout': {\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'points'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10,\r\n            'visibility': 'visible'\r\n          },\r\n          'paint': {\r\n            'text-color': [\r\n              'case',\r\n              ['<', ['get', 'cases'], 3],\r\n              'black',\r\n              'white'\r\n            ],\r\n            // 'circle-color': [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     min,\r\n            //     \"#ffffb2\",\r\n            //     max / 32,\r\n            //     \"#fed976\",\r\n            //     max / 16,\r\n            //     \"#feb24c\",\r\n            //     max / 8,\r\n            //     \"#fd8d3c\",\r\n            //     max / 4,\r\n            //     \"#fc4e2a\",\r\n            //     max / 2,\r\n            //     \"#e31a1c\",\r\n            //     max,\r\n            //     \"#b10026\"\r\n            //   ],\r\n            //   \"circle-opacity\": 0.75,\r\n            //       \"circle-stroke-width\": [\r\n            //         \"interpolate\",\r\n            //         [\"linear\"],\r\n            //         [\"get\", \"cases\"],\r\n            //         1,\r\n            //         1,\r\n            //         max,\r\n            //         1.75\r\n            //       ],\r\n          }\r\n        });\r\n\r\n        map.addLayer({\r\n          'id': 'clusters2',\r\n          'type': 'symbol',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'layout': {\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'points'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10,\r\n            'visibility': 'visible'\r\n          },\r\n          'paint': {\r\n            'text-color': [\r\n              'case',\r\n              ['<', ['get', 'deaths'], 3],\r\n              'black',\r\n              'white'\r\n            ],\r\n\r\n          }\r\n        });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures('points');\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on('render', () => {\r\n          if (!map.isSourceLoaded('points')) return;\r\n          updateMarkers();\r\n        });\r\n      });\r\n\r\n      // code for creating an SVG donut chart from feature properties\r\n      function createDonutChart(props) {\r\n        const offsets = [];\r\n        const counts = [\r\n          props.deaths1,\r\n          props.deaths2,\r\n          props.deaths3,\r\n          props.deaths4,\r\n          props.deaths5\r\n        ];\r\n        let total = 0;\r\n        for (const count of counts) {\r\n          offsets.push(total);\r\n          total += count;\r\n        }\r\n        const fontSize =\r\n          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n        const r =\r\n          total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n        const r0 = Math.round(r * 0.6);\r\n        const w = r * 2;\r\n\r\n        let html = `<div>\r\n        <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n        for (let i = 0; i < counts.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total,\r\n            (offsets[i] + counts[i]) / total,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n        html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n        <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n        ${total.toLocaleString()}\r\n        </text>\r\n        </svg>\r\n        </div>`;\r\n\r\n        const el = document.createElement('div');\r\n        el.innerHTML = html;\r\n        return el.firstChild;\r\n      }\r\n\r\n      function donutSegment(start, end, r, r0, color) {\r\n        if (end - start === 1) end -= 0.00001;\r\n        const a0 = 2 * Math.PI * (start - 0.25);\r\n        const a1 = 2 * Math.PI * (end - 0.25);\r\n        const x0 = Math.cos(a0),\r\n          y0 = Math.sin(a0);\r\n        const x1 = Math.cos(a1),\r\n          y1 = Math.sin(a1);\r\n        const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n        // draw an SVG path\r\n        return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n      }\r\n\r\n      // inspect a cluster on click\r\n      map.on('click', 'clusters', function (e) {\r\n        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });\r\n        var clusterId = features[0].properties.cluster_id;\r\n        console.log('hi')\r\n        map.getSource('points').getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n          if (err)\r\n            return;\r\n\r\n          map.easeTo({\r\n            center: features[0].geometry.coordinates,\r\n            zoom: zoom\r\n          });\r\n          // console.log(clusterId, 'clusterID', features, 'features', features[0].properties.cluster_id)\r\n        });\r\n      });\r\n    \r\n//TOGGLE\r\n      // After the last frame rendered before the map enters an \"idle\" state.\r\n      map.on('idle', () => {\r\n        // If these two layers were not added to the map, abort\r\n        if (!map.getLayer('Cases') || !map.getLayer('Deaths')) {\r\n          return;\r\n        }\r\n\r\n        // Enumerate ids of the layers.\r\n        const toggleableLayerIds = ['Cases', 'Deaths'];\r\n  \r\n        // Set up the corresponding toggle button for each layer.\r\n        for (const id of toggleableLayerIds) {\r\n          // Skip layers that already have a button set up.\r\n          if (document.getElementById(id)) {\r\n            continue;\r\n          }\r\n\r\n          // Create a link.\r\n          const link = document.createElement('a');\r\n          link.id = id;\r\n          link.href = '#';\r\n          link.textContent = id;\r\n          link.className = 'active';\r\n\r\n          // Show or hide layer when the toggle is clicked.\r\n          link.onclick = function (e) {\r\n            const clickedLayer = this.textContent;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            const visibility = map.getLayoutProperty(\r\n              clickedLayer,\r\n              'visibility'\r\n            );\r\n\r\n            // Toggle layer visibility by changing the layout object's visibility property.\r\n            if (visibility === 'visible') {\r\n              map.setLayoutProperty(clickedLayer, 'visibility', 'none');\r\n              this.className = '';\r\n            } else {\r\n              this.className = 'active';\r\n              map.setLayoutProperty(\r\n                clickedLayer,\r\n                'visibility',\r\n                'visible'\r\n              );\r\n            }\r\n          };\r\n          const layers = document.getElementById('menu');\r\n          layers.appendChild(link);\r\n        }\r\n      });\r\n\r\n      //Add navigation controls to the top right of the canvas\r\n      // map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      // Add navigation to center the map on your geo location\r\n      map.addControl(\r\n        new mapboxgl.GeolocateControl({\r\n          fitBoundsOptions: { maxZoom: 6 }\r\n        })\r\n      );\r\n\r\n      console.log(countries, 'countries')\r\n      const populationCountry = countries.map(country => [country.population, country.country]);\r\n      console.log(populationCountry, 'pC')\r\n    \r\n\r\n      //CIRCLES\r\n      map.once(\"load\", function () {\r\n\r\n//POPUP\r\n        const popup2 = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId2;\r\n\r\n        map.on(\"click\", \"clusters\", (e) => {\r\n          // const id = e.features[0].properties.id;\r\n          // Change the pointer type on mouseenter\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n          const coordinates = e.geometry.coordinates.slice();\r\n          popup2.setLngLat([0, 20]).addTo(map);\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"clusters\", function () {\r\n          lastId2 = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup2.remove();\r\n        });\r\n\r\n\r\n        const popup = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId;\r\n\r\n        map.on(\"mousemove\", \"Cases\" && \"Deaths\", (e) => {\r\n          const id = e.features[0].properties.id;\r\n\r\n          if (id !== lastId) {\r\n            lastId = id;\r\n            const {\r\n              cases,\r\n              deaths,\r\n              country,\r\n              province\r\n            } = e.features[0].properties;\r\n\r\n            // Change the pointer type on mouseenter\r\n            map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            const coordinates = e.features[0].geometry.coordinates.slice();\r\n           \r\n            const countryISO =\r\n              lookup.byCountry(country)?.iso2 ||\r\n              lookup.byInternet(country)?.iso2;\r\n            const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n            const provinceHTML =\r\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n            const countryFlagHTML = Boolean(countryISO)\r\n            \r\n              ? `<img src=\"${countryFlag}\"></img>`\r\n              : \"\";\r\n            \r\n\r\n            const HTML = `  ${countryFlagHTML}<p>Country: <b>${country}</b></p>\r\n                ${provinceHTML}\r\n                <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n                <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n                <p>Population: <b>${\"\"}</b></p>\r\n                `;\r\n  // \r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            }\r\n\r\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\r\n          }\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"Cases\" && \"Deaths\", function () {\r\n          lastId = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        // map.doubleClickZoom.enable();\r\n//IDS\r\n        document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [3.2, 1.8],\r\n            essential: true,\r\n          });\r\n        });\r\n        document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 4,\r\n            center: [6, 47],\r\n            essential: true,\r\n          });\r\n        });\r\n        document\r\n          .getElementById(\"northamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [-120, 35],\r\n              essential: true,\r\n            });\r\n          });\r\n        document\r\n          .getElementById(\"southamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.5,\r\n              center: [-74, -4],\r\n              essential: true,\r\n            });\r\n          });\r\n        document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.1,\r\n            center: [100, 17],\r\n            essential: true,\r\n          });\r\n        });\r\n        document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.7,\r\n            center: [131, -28],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"global\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 1.7,\r\n            center: [0, 20],\r\n            essential: true,\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mapContainer\" >\r\n        {/* Mapbox Container */}\r\n        <div className=\"mapBox\" ref={mapboxElRef} />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map2;","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nconst Menu = ({ region, index, population, global, state,\r\n  tests, countries, handleClose, populationGlobal, testsG,\r\n  globalCases, globalDeaths, globalActive, globalCritical, globalTests, continentNames, casesMillion, deathsMillion, activeMillion, criticalMillion, testsMillion\r\n}) => {\r\n\r\n  const casesPerContinent = casesMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const deathsPerContinent = deathsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const activePerContinent = activeMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const criticalPerContinent = criticalMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const testsPerContinent = testsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  console.log(casesPerContinent, 'casesPerContinent')\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(1);\r\n  const activeGlobal = (globalActive / 1000).toFixed(1);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(1);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n\r\n\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(country => country.continent === region)\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries.filter(country => country.continent === region && country.population > 100000).map(selectedCountry => selectedCountry.country.substring(0, 12))\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n  const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n  const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n  const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n  const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n  const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n  // Create strata for classifting cases for doughnut charts\r\n  const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n  const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n  const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n  const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n  const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n  // Create Strata for Deaths\r\n  const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n  const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n  const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n  const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n  const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n  const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n  const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n  const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n  const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) { colorCases.push(\"#444e86\") }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) { colorCases.push(\"#955196\") }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) { colorCases.push(\"#ffa600\") }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 250) { colorCases.push(\"#ff6e54\") }\r\n    if (casesPerContinent[i] >= 250) { colorCases.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n    if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n    if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n    if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n    if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n    if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n    if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n    if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n  }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: 'Cases',\r\n      content:\r\n        <>\r\n          <Row className={'box p-2 m-1'} style={{ color: \"#fff\" }}>\r\n         \r\n        \r\n            <h1>{casesGlobal} <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n            <h5 >Cases / 1000 </h5>\r\n        \r\n          </Row>\r\n          <Row className=\"p-2 mt-1\">\r\n          \r\n            <Bar\r\n              height={200}\r\n              width={300}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: continentNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerContinent,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Row>\r\n          <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n          <Row className=\"subtitle m-1 pt-1\" >\r\n            <Col className=\"box px-4 py-2 ml-4\" >Active <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(activeGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>cases</div></Col>\r\n            <Col className=\"box px-4 py-2 ml-1\">Critical <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3  className=\"mb-0\">{(criticalGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>cases</div></Col>\r\n          </Row>\r\n          <Row className=\"subtitle m-1\" >\r\n            <Col className=\"box px-4 py-2 ml-4\" > Deaths<h3 className=\"mb-0\">{(deathsGlobal / casesGlobal * 100).toFixed(2)}%</h3><div >cases</div></Col>\r\n            <Col className=\"box px-4 py-2 ml-1\"  > Tests <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3  className=\"mb-0\">{(testsG / populationGlobal).toFixed(2)}</h3><div >/person</div></Col>\r\n          </Row>\r\n          <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n\r\n          <Row className=\"subtitle px-3 pt-2\">\r\n            <Line\r\n              width={160}\r\n              height={100}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: 'bottom'\r\n                }\r\n              }}\r\n              data={{\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                datasets: [\r\n                  {\r\n                    label: \"First dataset\",\r\n                    data: casesMillion,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                    borderColor: \"rgba(75,192,192,1)\"\r\n                  },\r\n                ]\r\n              }}\r\n            />\r\n          </Row>\r\n          \r\n         \r\n          <Doughnut\r\n            width={170}\r\n            options={{\r\n              elements: {\r\n                arc: {\r\n                  borderWidth: 0\r\n                }\r\n              },\r\n              legend: {\r\n                display: false,\r\n                position: ''\r\n              },\r\n            }}\r\n            data={{\r\n              labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n              datasets: [\r\n                {\r\n                  data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                  backgroundColor: colorsPie,\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n\r\n\r\n        </>\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Deaths',\r\n      // icon: 'tabitem__icon fas fa-child',\r\n      content:\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: deathsPerContinent,\r\n                      backgroundColor: colorDeaths,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{deathsGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                <h5 >/1000 Deaths</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: deathsMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      title: 'Active',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content:\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: activePerOneMillion,\r\n                      backgroundColor: colorActive,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{activeGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n                <h5 >/1000 Active</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div >/active</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Critical',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content: <>\r\n        <Row>\r\n          <Col className=\"pr-0\">\r\n            <HorizontalBar\r\n              height={830}\r\n              width={200}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n                // title: {\r\n                //   display: true,\r\n                //   text: 'Mortality in ' + region,\r\n                //   fontSize: 13,\r\n\r\n                // },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerOneMillion,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col className=\"px-0\">\r\n\r\n            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n              <h1>{(criticalGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n              <h5 >/1000 Critical</h5>\r\n            </Row>\r\n\r\n            {/* </Row> */}\r\n            <Row className=\"subtitle px-3 pt-2\">\r\n              <Line\r\n                width={160}\r\n                height={100}\r\n                options={{\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Trends in ' + region,\r\n                  //     fontSize: 13,\r\n                  //     postion: 'bottom'\r\n                  // },\r\n                  legend: {\r\n                    display: false,\r\n                    position: 'bottom'\r\n                  }\r\n                }}\r\n                data={{\r\n                  labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"First dataset\",\r\n                      data: casesPerOneMillion,\r\n                      fill: true,\r\n                      backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                      borderColor: \"rgba(75,192,192,1)\"\r\n                    },\r\n                    // {\r\n                    //   label: \"Second dataset\",\r\n                    //   data: [33, 25, 35, 51, 54, 76],\r\n                    //   fill: false,\r\n                    //   borderColor: \"#742774\"\r\n                    // }\r\n                  ]\r\n                }}\r\n              />\r\n            </Row>\r\n            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n            </Row>\r\n\r\n            <Row className=\"subtitle m-1\" >\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n            </Row>\r\n            <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n            <Doughnut\r\n              width={170}\r\n              options={{\r\n                // maintainAspectRatio: true,\r\n                // title: {\r\n                //     display: true,\r\n                //     text: 'Countries in ' + region,\r\n                //     fontSize: 13\r\n                // },\r\n                elements: {\r\n                  arc: {\r\n                    borderWidth: 0\r\n                  }\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                datasets: [\r\n                  {\r\n                    data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                    backgroundColor: colorsPie,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n\r\n\r\n\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Tests',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content: <>\r\n        <Row>\r\n          <Col className=\"pr-0\">\r\n            <HorizontalBar\r\n              height={830}\r\n              width={200}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n                // title: {\r\n                //   display: true,\r\n                //   text: 'Mortality in ' + region,\r\n                //   fontSize: 13,\r\n\r\n                // },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerOneMillion,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col className=\"px-0\">\r\n\r\n            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n              <h1>{(testsGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n              <h5 >/1000 Tests</h5>\r\n            </Row>\r\n\r\n            {/* </Row> */}\r\n            <Row className=\"subtitle px-3 pt-2\">\r\n              <Line\r\n                width={160}\r\n                height={100}\r\n                options={{\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Trends in ' + region,\r\n                  //     fontSize: 13,\r\n                  //     postion: 'bottom'\r\n                  // },\r\n                  legend: {\r\n                    display: false,\r\n                    position: 'bottom'\r\n                  }\r\n                }}\r\n                data={{\r\n                  labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"First dataset\",\r\n                      data: casesPerOneMillion,\r\n                      fill: true,\r\n                      backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                      borderColor: \"rgba(75,192,192,1)\"\r\n                    },\r\n                    // {\r\n                    //   label: \"Second dataset\",\r\n                    //   data: [33, 25, 35, 51, 54, 76],\r\n                    //   fill: false,\r\n                    //   borderColor: \"#742774\"\r\n                    // }\r\n                  ]\r\n                }}\r\n              />\r\n            </Row>\r\n            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n            </Row>\r\n\r\n            <Row className=\"subtitle m-1\" >\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n            </Row>\r\n            <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n            <Doughnut\r\n              width={170}\r\n              options={{\r\n                // maintainAspectRatio: true,\r\n                // title: {\r\n                //     display: true,\r\n                //     text: 'Countries in ' + region,\r\n                //     fontSize: 13\r\n                // },\r\n                elements: {\r\n                  arc: {\r\n                    borderWidth: 0\r\n                  }\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                datasets: [\r\n                  {\r\n                    data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                    backgroundColor: colorsPie,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n\r\n\r\n\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n      ,\r\n    },\r\n  ];\r\n\r\n\r\n  const TabsComponent = () => {\r\n    const [active, setActive] = useState(1);\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n            key={title}\r\n            icon={icon}\r\n            title={title}\r\n            onItemClicked={() => setActive(id)}\r\n            isActive={active === id}\r\n          />\r\n          )}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return active === id ? content : ''\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const TabItemComponent = ({\r\n    icon = '',\r\n    title = '',\r\n    onItemClicked = () => console.error('You passed no action to the component'),\r\n    isActive = false,\r\n  }) => {\r\n    return (\r\n      <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n        <i className={icon}></i>\r\n        <p className=\"tabitem__title\">{title}</p>\r\n      </div>\r\n    )\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={global ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n\r\n          <div className=\"side\">\r\n            <div className={!global ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\" >\r\n              \r\n                  <Col xs={10} className=\"px-0 pt-2\">{region}</Col>\r\n                  <Col className=\"px-0\">\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                      <Button\r\n                        // onClick={toggleAsia}\r\n                        onClick={handleClose}\r\n                        // size=\"lg\"\r\n                        variant=\"outline-info\"\r\n                        // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                        className=\"close button\"\r\n                      >\r\n\r\n                        <h6>x</h6>\r\n\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <TabsComponent\r\n                  countries={countries}\r\n                  index={index}\r\n                  region={region}\r\n                  casesMillion={casesMillion}\r\n                  activeMillion={activeMillion}\r\n                  criticalMillion={criticalMillion}\r\n                  deathsMillion={deathsMillion}\r\n                  tests={tests}\r\n\r\n                />\r\n\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown, faCircleUp, faCircleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst Menu = ({ region, index, population, casesMillion, open,\r\n    activeMillion, criticalMillion, deathsMillion, tests, countries, handleClose,\r\n}) => {\r\n\r\n    // Filter Countries in Region\r\n    const continentCountries = countries.filter(country => country.continent === region)\r\n    // Map Country Names && country.population > 1000000\r\n    const countryNames = countries.filter(country => country.continent === region && country.country.length <= 12).map(selectedCountry => selectedCountry.country)\r\n    //Map mortality rate for those countries\r\n    const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n    const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n    const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n    const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n    const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n    const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n    // Create strata for classifting cases for doughnut charts\r\n    const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n    const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n    const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n    const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n    const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n    // Create Strata for Deaths\r\n    const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n    const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n    const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n    const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n    const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n    // Create Strata for Active\r\n    const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n    const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n    const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n    const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n    const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n    const colorCases = [];\r\n    for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n        if (casesPerOneMillion[i] < 50) { colorCases.push(\"#444e86\") }\r\n        if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) { colorCases.push(\"#955196\") }\r\n        if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) { colorCases.push(\"#ffa600\") }\r\n        if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) { colorCases.push(\"#ff6e54\") }\r\n        if (casesPerOneMillion[i] >= 350) { colorCases.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorDeaths = [];\r\n    for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n        if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n        if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n        if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n        if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n        if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorActive = [];\r\n    for (let i = 0; i < activePerOneMillion.length; i++) {\r\n        if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n        if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n        if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n        if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n        if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n    }\r\n\r\n    const backgroundcolor = [];\r\n    for (let i = 0; i < mortalityRate.length; i++) {\r\n        if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n        if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n        if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n        if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n        if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n    }\r\n\r\n    const tabItems = [\r\n        {\r\n            id: 1,\r\n            title: 'Cases',\r\n            // icon: <a id='menu'></a>,\r\n            content:\r\n                <>\r\n                    <Row className={'box py-2 m-1'} style={{ color: \"#fff\" }}>\r\n\r\n\r\n                        <h1>{(casesMillion[index] / 1000).toFixed(1)} </h1>\r\n                        <h5 >\r\n                            Cases / 1,000\r\n                            {/* {casesMillion[index] / 1000 <= 100 ?\r\n                                <Badge variant=\"success\" text=\"dark\" className=\"badge\" style={{ position: \"fixed\", right: \"40px\", top: \"20px\" }}>\r\n                                    LOW\r\n                                </Badge> :\r\n                                casesMillion[index] / 1000 >= 250 ?\r\n                                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\" style={{ position: \"fixed\", left: \"40px\", top: \"40px\" }}>\r\n                                        HIGH\r\n                                    </Badge> : \" \"\r\n                            } */}\r\n                        </h5>\r\n\r\n                    </Row>\r\n                    <Row style={{ height: \"78vh\" }}>\r\n\r\n\r\n                        <Col className=\"mr-3\">\r\n                            {/* <Row className={'box p-2 m-1'} style={{color: \"#fff\"}}>\r\n                          \r\n                              \r\n\r\n\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n                            <h5 >/1000 Cases</h5>\r\n                        </Row> */}\r\n                            <div className=\"py-2 ml-4\" style={{ color: \"grey\", fontSize: \"14px\" }}>Trend</div>\r\n\r\n                            <Row className=\"subtitle pt-1 ml-0\" >\r\n\r\n                                <Line\r\n                                    width={160}\r\n                                    height={120}\r\n                                    options={{\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom',\r\n\r\n                                        },\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Mortality in ' + region,\r\n                                        //     fontSize: 13,\r\n\r\n                                        // },\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"Cases / 1000\",\r\n                                                data: casesPerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                                <div style={{ position: \"absolute\", right: \"45px\", top: \"6px\" }}>\r\n                                    {casesPerOneMillion[0] > casesPerOneMillion[6] ?\r\n                                        <FontAwesomeIcon icon={faCircleDown} color='rgb(212, 23, 83)' /> :\r\n                                        <FontAwesomeIcon icon={faCircleUp} text=\"light\" color='green' />\r\n\r\n                                    }\r\n                                </div>\r\n                            </Row>\r\n                            <div className=\"py-3 ml-4\" style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle ml-0\" >\r\n                                <Col className=\"box p-2 py-4 mr-1\" >\r\n                                    Active\r\n                                    {activeMillion[index] / casesMillion[index] * 100 <= 2.5 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        activeMillion[index] / casesMillion[index] * 100 >= 4.5 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\"  >HIGH</Badge> : \" \"\r\n\r\n                                    }\r\n                                    <div className=\"mb-0\">{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</div>\r\n                                    {/* <div>of cases</div> */}\r\n                                </Col>\r\n                                <Col className=\"box p-2 py-4 ml-1\">\r\n                                    Critical\r\n                                    {criticalMillion[index] / casesMillion[index] * 100 <= 0.005 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        criticalMillion[index] / casesMillion[index] * 100 >= 0.015 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\"  >HIGH</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /> */}\r\n                                    <div className=\"mb-0\">{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</div>\r\n                                    {/* <div>of cases</div> */}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"subtitle ml-0\" >\r\n                                <Col className=\"box p-2 py-4 mr-1 mt-3\" >\r\n                                    Deaths\r\n                                    {deathsMillion[index] / casesMillion[index] * 100 <= 1.0 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        deathsMillion[index] / casesMillion[index] * 100 >= 2.0 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\">HIGH</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"green\" icon={faArrowUp} /> */}\r\n                                    <div className=\"mb-0\">{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</div>\r\n                                    {/* <div>of cases</div> */}\r\n                                </Col>\r\n                                <Col className=\"box p-2 py-4 ml-1 mt-3\" >\r\n                                    Tested\r\n                                    {tests[index] / population[index] * 100 <= 100 ?\r\n                                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">POOR</Badge> :\r\n                                        tests[index] / population[index] * 100 >= 250 ?\r\n                                            <Badge variant=\"success\" text=\"dark\" className=\"badge\">GOOD</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /> */}\r\n                                    <div className=\"mb-0\">{(tests[index] / population[index]).toFixed(1) * 100}%</div>\r\n                                    {/* <div >of people</div> */}\r\n                                </Col>\r\n                            </Row>\r\n                            <div className=\"py-3 ml-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Analysis</div>\r\n                            <Row className=\" ml-0\">\r\n\r\n                                <Doughnut\r\n                                    width={170}\r\n                                    options={{\r\n                                        elements: {\r\n                                            arc: {\r\n                                                borderWidth: 0\r\n                                            }\r\n                                        },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: ''\r\n                                        },\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                                backgroundColor: colorsPie,\r\n                                            }\r\n                                        ]\r\n                                    }}\r\n                                >\r\n\r\n                                </Doughnut>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col className=\"\" style={{ height: \"100%\", overflowY: \"scroll\" }}>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">Per Country</div>\r\n\r\n                            <HorizontalBar\r\n                                height={countryNames.length * 50}\r\n                                // width={200}\r\n                                options={{\r\n                                    maintainAspectRatio: true,\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    layout: {\r\n                                        // margin: {\r\n                                        //     right: 20,\r\n                                        //     left: 20,\r\n                                        // },\r\n                                        padding: {\r\n                                            left: 20,\r\n                                            right: 0,\r\n                                            top: 0,\r\n                                            bottom: 0\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                data={{\r\n\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: casesPerOneMillion,\r\n                                            backgroundColor: colorCases,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n                            {countryNames.length < 15 &&\r\n                                <>\r\n                                    <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-4\">Mortality</div>\r\n\r\n                                    <HorizontalBar\r\n                                        height={countryNames.length * 50}\r\n                                        // width={200}\r\n                                        options={{\r\n                                            maintainAspectRatio: true,\r\n                                            legend: {\r\n                                                display: false,\r\n                                                position: ''\r\n                                            },\r\n                                            layout: {\r\n                                                // margin: {\r\n                                                //     right: 20,\r\n                                                //     left: 20,\r\n                                                // },\r\n                                                padding: {\r\n                                                    left: 20,\r\n                                                    right: 0,\r\n                                                    top: 0,\r\n                                                    bottom: 0\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        data={{\r\n\r\n                                            labels: countryNames,\r\n                                            datasets: [\r\n                                                {\r\n                                                    label: \"Cases/1000\",\r\n                                                    data: mortalityRate,\r\n                                                    backgroundColor: colorDeaths,\r\n                                                }\r\n                                            ]\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            }\r\n\r\n                        </Col>\r\n\r\n\r\n                    </Row>\r\n                </>\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Deaths',\r\n            // icon: <a id='check1'></a>,\r\n            content:\r\n                <>\r\n                    <Row style={{ height: \"100%\", overflowY: \"scroll\" }}>\r\n\r\n                        <Col className=\"pr-0 pb-10\" style={{ height: \"90vh\" }}>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">Per Country</div>\r\n                            <HorizontalBar\r\n\r\n                                height={countryNames.length * 40}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: deathsPerOneMillion,\r\n                                            backgroundColor: colorDeaths,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(deathsMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                                <h5 >/1000 Deaths</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">Trend</div>\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: deathsPerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n\r\n        {\r\n            id: 3,\r\n            title: 'Active',\r\n            // icon: <a id='check1'></a>,\r\n            content:\r\n                <>\r\n                    <Row>\r\n                        <Col className=\"pr-0\">\r\n                            <HorizontalBar\r\n                                height={830}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: activePerOneMillion,\r\n                                            backgroundColor: colorActive,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(activeMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n                                <h5 >/1000 Active</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: activePerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Active<FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<FontAwesomeIcon color=\"green\" icon={faArrowUp} /><h3 className=\"mb-0\">{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3 ><div className=\"mt-0\">/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n        {\r\n            id: 4,\r\n            title: 'Critical',\r\n            // icon: <a id='check1'></a>,\r\n            content: <>\r\n                <Row>\r\n                    <Col className=\"pr-0\">\r\n                        <HorizontalBar\r\n                            height={830}\r\n                            width={200}\r\n                            options={{\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                                // title: {\r\n                                //   display: true,\r\n                                //   text: 'Mortality in ' + region,\r\n                                //   fontSize: 13,\r\n\r\n                                // },\r\n                            }}\r\n                            data={{\r\n                                labels: countryNames,\r\n                                datasets: [\r\n                                    {\r\n                                        label: \"Cases/1000\",\r\n                                        data: casesPerOneMillion,\r\n                                        backgroundColor: colorCases,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n\r\n                        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                            <h5 >/1000 Critical</h5>\r\n                        </Row>\r\n\r\n                        {/* </Row> */}\r\n                        <Row className=\"subtitle px-3 pt-2\">\r\n                            <Line\r\n                                width={160}\r\n                                height={100}\r\n                                options={{\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Trends in ' + region,\r\n                                    //     fontSize: 13,\r\n                                    //     postion: 'bottom'\r\n                                    // },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: 'bottom'\r\n                                    }\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"First dataset\",\r\n                                            data: casesPerOneMillion,\r\n                                            fill: true,\r\n                                            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                            borderColor: \"rgba(75,192,192,1)\"\r\n                                        },\r\n                                        // {\r\n                                        //   label: \"Second dataset\",\r\n                                        //   data: [33, 25, 35, 51, 54, 76],\r\n                                        //   fill: false,\r\n                                        //   borderColor: \"#742774\"\r\n                                        // }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Row>\r\n                        <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n                        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n                        </Row>\r\n\r\n                        <Row className=\"subtitle m-1\" >\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                        <Doughnut\r\n                            width={170}\r\n                            options={{\r\n                                // maintainAspectRatio: true,\r\n                                // title: {\r\n                                //     display: true,\r\n                                //     text: 'Countries in ' + region,\r\n                                //     fontSize: 13\r\n                                // },\r\n                                elements: {\r\n                                    arc: {\r\n                                        borderWidth: 0\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                datasets: [\r\n                                    {\r\n                                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                        backgroundColor: colorsPie,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        },\r\n        // {\r\n        //     id: 5,\r\n        //     title: 'Tests',\r\n        //     icon: 'tabitem__icon fa fa-network-wired',\r\n        //     content: <>\r\n        //         <Row>\r\n        //             <Col className=\"pr-0\">\r\n        //                 <HorizontalBar\r\n        //                     height={830}\r\n        //                     width={200}\r\n        //                     options={{\r\n        //                         legend: {\r\n        //                             display: false,\r\n        //                             position: ''\r\n        //                         },\r\n        //                         // title: {\r\n        //                         //   display: true,\r\n        //                         //   text: 'Mortality in ' + region,\r\n        //                         //   fontSize: 13,\r\n\r\n        //                         // },\r\n        //                     }}\r\n        //                     data={{\r\n        //                         labels: countryNames,\r\n        //                         datasets: [\r\n        //                             {\r\n        //                                 label: \"Cases/1000\",\r\n        //                                 data: casesPerOneMillion,\r\n        //                                 backgroundColor: colorCases,\r\n        //                             }\r\n        //                         ]\r\n        //                     }}\r\n        //                 />\r\n        //             </Col>\r\n        //             <Col className=\"px-0\">\r\n\r\n        //                 {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n        //                 {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n        //                 <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n        //                     <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n        //                     <h5 >/1000 Tests</h5>\r\n        //                 </Row>\r\n\r\n        //                 {/* </Row> */}\r\n        //                 <Row className=\"subtitle px-3 pt-2\">\r\n        //                     <Line\r\n        //                         width={160}\r\n        //                         height={100}\r\n        //                         options={{\r\n        //                             // title: {\r\n        //                             //     display: true,\r\n        //                             //     text: 'Trends in ' + region,\r\n        //                             //     fontSize: 13,\r\n        //                             //     postion: 'bottom'\r\n        //                             // },\r\n        //                             legend: {\r\n        //                                 display: false,\r\n        //                                 position: 'bottom'\r\n        //                             }\r\n        //                         }}\r\n        //                         data={{\r\n        //                             labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n        //                             datasets: [\r\n        //                                 {\r\n        //                                     label: \"First dataset\",\r\n        //                                     data: casesPerOneMillion,\r\n        //                                     fill: true,\r\n        //                                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        //                                     borderColor: \"rgba(75,192,192,1)\"\r\n        //                                 },\r\n        //                                 // {\r\n        //                                 //   label: \"Second dataset\",\r\n        //                                 //   data: [33, 25, 35, 51, 54, 76],\r\n        //                                 //   fill: false,\r\n        //                                 //   borderColor: \"#742774\"\r\n        //                                 // }\r\n        //                             ]\r\n        //                         }}\r\n        //                     />\r\n        //                 </Row>\r\n        //                 <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n        //                 <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n        //                 </Row>\r\n\r\n        //                 <Row className=\"subtitle m-1\" >\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n        //                 </Row>\r\n        //                 <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n        //                 <Doughnut\r\n        //                     width={170}\r\n        //                     options={{\r\n        //                         // maintainAspectRatio: true,\r\n        //                         // title: {\r\n        //                         //     display: true,\r\n        //                         //     text: 'Countries in ' + region,\r\n        //                         //     fontSize: 13\r\n        //                         // },\r\n        //                         elements: {\r\n        //                             arc: {\r\n        //                                 borderWidth: 0\r\n        //                             }\r\n        //                         },\r\n        //                         legend: {\r\n        //                             display: false,\r\n        //                             position: ''\r\n        //                         },\r\n        //                     }}\r\n        //                     data={{\r\n        //                         labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n        //                         datasets: [\r\n        //                             {\r\n        //                                 data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n        //                                 backgroundColor: colorsPie,\r\n        //                             }\r\n        //                         ]\r\n        //                     }}\r\n        //                 />\r\n        //             </Col>\r\n        //         </Row>\r\n        //     </>\r\n        //     ,\r\n        // },\r\n    ];\r\n\r\n\r\n    const TabsComponent = () => {\r\n        const [active, setActive] = useState(1);\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"tabs\">\r\n                    {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n                        key={title}\r\n                        icon={icon}\r\n                        title={title}\r\n                        onItemClicked={() => setActive(id)}\r\n                        isActive={active === id}\r\n                    />\r\n                    )}\r\n                </div>\r\n                <div className=\"content\">\r\n                    {tabItems.map(({ id, content }) => {\r\n                        return active === id ? content : ''\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const TabItemComponent = ({\r\n        icon = '',\r\n        title = '',\r\n\r\n        onItemClicked = () => console.error('You passed no action to the component'),\r\n        isActive = false,\r\n    }) => {\r\n        return (\r\n            <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n                <p style={{ display: \"flex\" }} className=\"tabitem__title\">{title}{icon} </p>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={open ? \"visible\" : \"hidden\"}>\r\n                <Animated\r\n                    animationIn=\"fadeInLeft\"\r\n                    animationOut=\"fadeOut\"\r\n                    isVisible={true}\r\n                >\r\n\r\n                    <div className=\"side\">\r\n                        <div className={!open ? \"hidden\" : \"visible\"}>\r\n                            <Container>\r\n                                <Row className=\"title\" >\r\n                                    <Col xs={9} className=\"px-0 pt-2\">{region}</Col>\r\n                                    <Col className=\"px-0\">\r\n                                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                            <Button\r\n                                                // onClick={toggleAsia}\r\n                                                onClick={handleClose}\r\n                                                // size=\"lg\"\r\n                                                variant=\"outline-info\"\r\n                                                // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                                                className=\"close button\"\r\n                                            >\r\n\r\n                                                <h6>x</h6>\r\n\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <TabsComponent\r\n\r\n                                    countries={countries}\r\n                                    index={index}\r\n                                    region={region}\r\n                                    casesMillion={casesMillion}\r\n                                    activeMillion={activeMillion}\r\n                                    criticalMillion={criticalMillion}\r\n                                    deathsMillion={deathsMillion}\r\n                                    tests={tests}\r\n\r\n                                />\r\n\r\n\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </Animated>\r\n            </div>\r\n            {/* )\r\n    } */}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n    \"#444e86\",\r\n    \"#955196\",\r\n    \"#ffa600\",\r\n    \"#ff6e54\",\r\n    \"#dd5182\",\r\n    \"rgb(212, 23, 83)\",\r\n    \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map from './components/Map';\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport './App.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\nconst initialState = {\r\n    global: false,\r\n    open: false,\r\n    region: \"\",\r\n    index: \"\",\r\n};\r\n\r\nconst App = () => {\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [globaldata, setGlobal] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(GLOBAL_URL);\r\n                const globaldata = await result.json();\r\n                setGlobal([globaldata]);\r\n                console.log(globaldata, 'globalDATA')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n\r\n    //Map Continents Data\r\n    const getGlobal = (key) => {\r\n        return globaldata.map((data) => data[key]);\r\n    };\r\n\r\n    const globalCases = getGlobal(\"casesPerOneMillion\");\r\n    const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n    const globalActive = getGlobal(\"activePerOneMillion\");\r\n    const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n    const globalTests = getGlobal(\"testsPerOneMillion\");\r\n    console.log(globalCases, 'globalCases')\r\n    const populationGlobal = getGlobal(\"population\")\r\n    const testsGlobal = getGlobal(\"tests\")\r\n\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [continents, setContinents] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(CONTINENT_URL);\r\n                const continents = await result.json();\r\n                setContinents([...continents]);\r\n                // console.log(continents, 'continents')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n    //Map Continents Data\r\n    const getContinents = (key) => {\r\n        return continents.map((continent) => continent[key]);\r\n    };\r\n\r\n    const population = getContinents(\"population\");\r\n    const casesMillion = getContinents(\"casesPerOneMillion\");\r\n    const activeMillion = getContinents(\"activePerOneMillion\");\r\n    const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n    const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n    const testsMillion = getContinents(\"testsPerOneMillion\");\r\n\r\n    const cases = getContinents(\"cases\");\r\n    const active = getContinents(\"active\");\r\n    const critical = getContinents(\"critical\");\r\n    const deaths = getContinents(\"deaths\");\r\n    const tests = getContinents(\"tests\");\r\n\r\n    const continentNames = getContinents(\"continent\")\r\n\r\n    console.log(continentNames, 'continentNames')\r\n\r\n    const mortality = deaths / cases;\r\n\r\n    //Fetch Countries Data\r\n    const [countries, setCountries] = useState([]);\r\n    useEffect(() => {\r\n        const countryNames = [];\r\n        async function fetchCountries() {\r\n            try {\r\n                const res = await fetch(COUNTRY_URL);\r\n                const countries = await res.json();\r\n                setCountries([...countries]);\r\n                // console.log(countries, 'countries')\r\n                for (let i = 0; i < countries.length; i++) {\r\n                    countryNames.push(String(countries[i].country))\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchCountries();\r\n    }, []);\r\n    //Map Country Data\r\n    const getCountries = (key) => {\r\n        return countries.map((country) => country[key]);\r\n    };\r\n\r\n    const populationCountries = getCountries(\"population\");\r\n\r\n\r\n\r\n\r\n    const [state, setState] = useState([initialState]);\r\n\r\n    const toggle = ({ region, index }) => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: region,\r\n            index: index,\r\n            global: false\r\n        });\r\n    };\r\n\r\n    const toggleAsia = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Asia',\r\n            index: 1,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleOceania = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Australia-Oceania',\r\n            index: 4,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleEurope = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Europe',\r\n            index: 3,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleAfrica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Africa',\r\n            index: 5,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleSouthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'South America',\r\n            index: 2,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleNorthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'North America',\r\n            index: 0,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleGlobal = () => {\r\n        setState({\r\n            ...initialState,\r\n            global: true,\r\n            region: 'Global',\r\n            index: 6,\r\n\r\n        });\r\n    };\r\n\r\n    function handleClose() {\r\n        setState(!state);\r\n    }\r\n\r\n    console.log(initialState, 'initialState', state, 'state')\r\n\r\n    return (\r\n        <>\r\n            <ContinentButtons\r\n                toggleAsia={toggleAsia}\r\n                toggleEurope={toggleEurope}\r\n                toggle={toggle}\r\n                toggleGlobal={toggleGlobal}\r\n                toggleAfrica={toggleAfrica}\r\n                toggleSouthAmerica={toggleSouthAmerica}\r\n                toggleNorthAmerica={toggleNorthAmerica}\r\n                toggleOceania={toggleOceania}\r\n            />\r\n            <div className=\"sidebar\">\r\n                <Menu\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    open={state.open}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    casesMillion={casesMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    testsMillion={testsMillion}\r\n                    tests={tests}\r\n                />\r\n                <GlobalMenu\r\n                    state={state.global}\r\n                    toggleGlobal={toggleGlobal}\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    global={state.global}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    continentNames={continentNames}\r\n                    tests={tests}\r\n                    globalCases={globalCases}\r\n                    globalDeaths={globalDeaths}\r\n                    globalActive={globalActive}\r\n                    globalCritical={globalCritical}\r\n                    globalTests={globalTests}\r\n                    casesMillion={casesMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    testsMillion={testsMillion}\r\n                    populationGlobal={populationGlobal}\r\n                    testsG={testsGlobal}\r\n                />\r\n            </div>\r\n            <Map countries={countries} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=all\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}