{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map2.js","components/LineGraph.js","components/GlobalMenu.js","components/DoughnutCases.js","components/HorizontalChart.js","components/Menu.js","components/Search.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","toggleSearch","style","right","height","width","position","background","zIndex","opacity","display","flexDirection","justifyContent","alignItems","boxShadow","id","className","color","href","marginTop","marginBottom","Button","top","left","onClick","variant","Row","Col","backgroundColor","lineHeight","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","mapboxElRef","useRef","fetcher","url","a","fetch","then","r","json","data","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","mort","useSWR","useEffect","renderListings","features","empty","document","createElement","listingEl","innerHTML","length","feature","label","itemLink","appendChild","addEventListener","currentFeature","this","flyTo","center","zoom","createPopUp","activeItem","getElementsByClassName","classList","remove","parentNode","add","popup","setLngLat","setText","addTo","filterEl","value","textContent","setFilter","normalize","string","trim","toLowerCase","popUps","Map","container","current","minZoom","response","rsp","console","log","forEach","countryInfo","lat","long","flag","title","todayCases","toFixed","todayDeaths","tests","todayRecovered","critical","active","active1k","activePerOneMillion","deaths1k","deathsPerOneMillion","cases1k","casesPerOneMillion","tests1k","population","testsPerOneMillion","elactive","elcases","eltests","statusActive","statusCases","statusDeaths","maxHeight","minHeight","maxWidth","minWidth","borderRadius","cursor","Marker","Popup","closeButton","closeOnClick","closeOnMove","setHTML","getCanvas","getElementById","essential","i","points","offset","pulsingDot","Uint8Array","size","onAdd","canvas","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","getImageData","triggerRepaint","on","cases1","cases2","cases3","cases4","colors","addImage","pixelRatio","addSource","addLayer","source","layout","cluster","clusterRadius","clusterProperties","deaths1","deaths2","deaths3","deaths4","deaths5","cases5","mr1","mr2","mr3","mr4","mr5","filter","paint","markers","markersOnScreen","createDonutChart","props","offsets","counts","counts2","total","count","push","total2","count2","fontSize","r0","round","w","fontSize2","r2","w2","html","donutSegment","toLocaleString","el","firstChild","start","end","a0","a1","x0","cos","y0","sin","x1","y1","largeArc","isSourceLoaded","newMarkers","querySourceFeatures","coords","cluster_id","marker","element","updateMarkers","e","slice","getLayer","link","onclick","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","geocoder","MapboxGeocoder","addControl","GeolocateControl","fitBoundsOptions","maxZoom","queryRenderedFeatures","layers","uniqueFeatures","comparatorProperty","uniqueIds","Set","has","getUniqueFeatures","colorCase","statusCase","classText","colorDeath","statusDeath","classText2","provinceHTML","mortalityRate","HTML","ctx","Chart","options","elements","borderColor","borderWidth","responsive","maintainAspectRatio","legend","text","animation","animateScale","animateRotate","tooltips","cornerRadius","displayColors","bodyFontSize","labels","usePointStyle","callbacks","item","datasets","datasetIndex","target","filtered","name","code","includes","ref","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","y","LineGraph","useState","setData","fetchData","scales","yAxes","xAxes","Menu","region","state","global","countries","continents","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","globalRecovered","continentNames","casesMillion","deathsMillion","activeMillion","criticalMillion","recoveredMillion","testsMillion","todayGlobalCases","todayGlobalDeaths","casesPerContinent","selectedContinent","deathsPerContinent","activePerContinent","criticalPerContinent","testsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","recoveredGlobal","continentCountries","continent","selectedCountry","substring","criticalPerOneMillion","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","content","border","overflowY","animationIn","isVisible","colorsPie","stack","yPadding","xPadding","xAlign","ticks","stepSize","duration","separator","decimals","Badge","TabsMenu","tab","setTab","TabItem","icon","onItemClicked","error","isActive","key","animationOut","Container","xs","DoughnutCases","HorizontalChart","countryNames","sort","b","continentCountriesSorted","setSampleData","sorted1","setSorted1","sorted2","setSorted2","sorted3","setSorted3","sorted4","setSorted4","countryNamesSort","casesPerMillionSorted","testsPerMillionSorted","activePerMillionSorted","deathsPerMillionSorted","colorActiv","sortedData","hover","mode","intersect","fontColor","padding","bottom","open","recovered","continentCountrys","sorted","max","maxActive","maxTests","maxCritical","maxDeaths","maxRecovered","recoveredPerOneMillion","colorMortality","colorActivity","Search","placeholder","initialState","search","App","globaldata","setGlobal","BASE_URL","result","fetchContinents","getGlobal","setContinents","getContinents","setCountries","res","String","fetchCountries","cont","setState","setZoom","setCenter","GlobalMenu","handleZoom","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4c97bf8e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({\r\n  toggleAsia,\r\n  toggleEurope,\r\n  toggleOceania,\r\n  toggleNorthAmerica,\r\n  toggleSouthAmerica,\r\n  toggleAfrica,\r\n  toggleGlobal,\r\n  toggleSearch\r\n}) => {\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          right: \"0px\",\r\n          height: \"100vh\", //auto mobile\r\n          width: \"auto\",\r\n          position: \"absolute\",\r\n          background: \"#212529\",\r\n          zIndex: 1,\r\n          opacity: 0.95,\r\n          display: \"flex\",\r\n          flexDirection: \"column\", //row mobile\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          \r\n          // flexWrap: \"wrap\" //mobile\r\n          boxShadow: \"rgba(9, 30, 66, 0.25) 0px 4px 8px -2px, rgba(9, 30, 66, 0.08) 0px 0px 0px 1px\",\r\n        }}\r\n      >\r\n            <div id=\"\" className=\"legend mb-0 mt-5\" style={{ color: \"grey\"}}>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n          >\r\n            COVID-19\r\n          </h5>\r\n          <h5\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n          >\r\n            DATAMAP\r\n          </h5>\r\n        </div>\r\n               {/* <Button\r\n               style={{position: \"absolute\", top: 7}}\r\n          className=\"mr-5 close button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5> <i className=\"fa fa-search\"></i></h5>\r\n        </Button> */}\r\n        <Button\r\n               style={{position: \"absolute\", top: 10, left: 15}}\r\n          className=\" pb-0 \"\r\n          onClick={toggleSearch}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h5 className=\"\"> <i className=\"fa fa-search\"></i></h5>\r\n        </Button>\r\n        \r\n    \r\n \r\n        <Row>\r\n          <Col className=\"box px-0 mx-0 mb-3\" >\r\n          <div id=\"\" className=\"legend pb-0\" >\r\n            <div className=\"mb-0 mt-0\">Cases&nbsp;&nbsp;</div>\r\n          <div >\r\n          <span style={{ height: \"10px\", width: \"9px\", backgroundColor: \"#6a5dfc\", marginBottom: \"2px\"}} ></span>&nbsp;<span style={{ height: \"12px\", width: \"12px\", backgroundColor: \"#ca32ad\", marginBottom: \"1px\"}} ></span> <span style={{ height: \"15px\", width: \"15px\", backgroundColor: \"#ff125e\"}} ></span>\r\n          </div>\r\n          <div className=\"mb-0 mt-1\">Active&nbsp;&nbsp;</div>\r\n          <div>\r\n        <span style={{ backgroundColor: \"#ff8300\", height: \"15px\", width: \"15px\" }}></span>\r\n          </div>\r\n          <div className=\"mb-0 mt-1\">Tests&nbsp;&nbsp;</div>\r\n          <div>\r\n          <span style={{ backgroundColor: \"teal\", height: \"15px\", width: \"15px\" }}></span>\r\n          </div>\r\n          <div className=\"mb-0 mt-1\">Deaths&nbsp;&nbsp;</div>\r\n          <div>\r\n       <span style={{ backgroundColor: \"slategrey\", height: \"15px\", width: \"15px\" }}></span>\r\n          </div>\r\n          {/* <div>\r\n         <span style={{ backgroundColor: \"#6a5dfc\", height: \"11px\", width: \"11px\" }}></span>\r\n          </div> */}\r\n          {/* <div >\r\n            <span style={{ backgroundColor: \"orange\" }} ></span>\r\n          </div> */}\r\n             \r\n          </div>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        <Button\r\n          className=\"button\"\r\n          id=\"asia\"\r\n          onClick={toggleAsia}\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Asia</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleEurope}\r\n          id=\"europe\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Europe</h6>\r\n        </Button>\r\n     \r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleNorthAmerica}\r\n          id=\"northamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>North America</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleAfrica}\r\n          // size=\"md\"\r\n          id=\"africa\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Africa</h6>\r\n        </Button>\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleSouthAmerica}\r\n          id=\"southamerica\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>South America</h6>\r\n        </Button>\r\n\r\n        <Button\r\n          className=\"button\"\r\n          onClick={toggleOceania}\r\n          id=\"oceania\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Oceania</h6>\r\n        </Button>\r\n         <Button\r\n          className=\"button\"\r\n          onClick={toggleGlobal}\r\n          id=\"global\"\r\n          variant=\"outline-info\"\r\n        >\r\n          <h6>Global</h6>\r\n        </Button> \r\n     \r\n\r\n        <div id=\"\" className=\"pt-3\" style={{ color: \"grey\", lineHeight: 1}}>\r\n          {/* <p href=\"https://inblockdesign.com\" >   <i className=\"fa fa-info-circle\"></i> Inblock</p> */}\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n            className=\"pb-0\"\r\n          >\r\n            Inblock\r\n          </p>\r\n          <p\r\n            href=\"https://inblockdesign.com\"\r\n            style={{ marginTop: \"0px\", marginBottom: \"0px\" }}\r\n            className=\"pt-0\"\r\n          >\r\n            Design <i className=\"fa fa-info-circle\"></i>{\" \"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport \"./Map2.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Chart } from \"react-chartjs-2\";\r\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\r\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nimport MapboxChoropleth from \"mapbox-choropleth\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nconst Map2 = () => {\r\n  const mapboxElRef = useRef(null);\r\n\r\n  const fetcher = async (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude,\r\n            ],\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n            mort: point.stats.deaths / point.stats.confirmed,\r\n          },\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  //   const [data1, setCountries] = useState([])\r\n\r\n  //   useEffect(() => {\r\n  //     const getCountriesData = async () => {\r\n  //       await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n  //         .then(response => response.json())\r\n  //         .then(data => {\r\n  //           const data1 = data.map((point, index) => ({\r\n  //             type: \"Feature\",\r\n  //             geometry: {\r\n  //                 type: \"Point\",\r\n  //                 coordinates: [\r\n  //                     point.countryInfo.long,\r\n  //                     point.countryInfo.lat\r\n  //                 ],\r\n  //               },\r\n  //               properties: {\r\n  //                 id: index,\r\n  //                 country: point.country,\r\n  //                 cases: point.casesPerOneMillion,\r\n  //                 deaths: point.deathsPerOneMillion,\r\n  //                 active: point.activePerOneMillion,\r\n  //                 mort: point.deathsPerOneMillion / point.casesPerOneMillion\r\n  //               },\r\n  //           }));\r\n  //           setCountries(data1);\r\n  //         });\r\n  //     };\r\n  //     getCountriesData();\r\n  //   }, []);\r\n  // ;\r\n\r\n  //   console.log(data1)\r\n\r\n  //   const data1 = countries.map((itm, index) => ({\r\n  //     ...data.find((item) => item.properties.country === itm.country && item),\r\n  //     ...itm,\r\n  //   }));\r\n\r\n  //   const continentCountries = countries.filter(\r\n  //     (country) => country.continent === region\r\n  //   );\r\n\r\n  //   const countryNames = continentCountries.map(\r\n  //     (selectedCountry) => selectedCountry.country\r\n  //   );\r\n\r\n  //   const data2 = data1.filter((item) => countryNames.includes(item.country));\r\n\r\n  //   console.log(data2, \"data2\");\r\n  //   console.log(data1, \"data1\");\r\n  //   console.log(data, \"data\");\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [131, -28],\r\n        zoom: 3,\r\n        minZoom: 2.5,\r\n        // pitch: 10,\r\n        // projection: 'globe',\r\n      });\r\n\r\n      // Update map on first load\r\n      updateMap();\r\n\r\n      // updateMap function - Updates data and marks cases on the map\r\n\r\n      function updateMap() {\r\n        // Fetch data from API\r\n        fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n          .then((response) => response.json())\r\n          .then((rsp) => {\r\n            // Displaying data\r\n            console.log(rsp);\r\n            // const data = rsp;\r\n\r\n            // map.addSource(\"ok\", {\r\n            //   type: \"geojson\",\r\n            //   data: {\r\n            //     type: \"FeatureCollection\",\r\n            //     features: data,\r\n            //   },\r\n            // });\r\n\r\n            // map.addLayer({\r\n            //   id: \"ok\",\r\n            //   source: \"ok\",\r\n            //     filter: [\"!=\", \"cluster\", true],\r\n            //   type: \"circle\",\r\n            //   paint: {\r\n            //     \"circle-color\": \"red\",\r\n            //     \"circle-opacity\": 1,\r\n            //     \"circle-radius\": 50,\r\n            //   },\r\n            // });\r\n\r\n            rsp.forEach((country) => {\r\n              // Latitude\r\n              const latitude = country.countryInfo.lat;\r\n              // Longitude\r\n              const longitude = country.countryInfo.long;\r\n              // Confirmed cases today\r\n              const flag = country.countryInfo.flag;\r\n              const title = country.country;\r\n\r\n              const todayCases = country.todayCases.toFixed(0);\r\n              const todayDeaths = country.todayDeaths.toFixed(0);\r\n              const todayRecovered = country.todayRecovered.toFixed(0);\r\n\r\n              const critical = country.critical.toFixed(0);\r\n\r\n              const tests = (country.tests / 1000000).toFixed(2);\r\n              const cases = country.cases.toFixed(0);\r\n              const active = country.active.toFixed(0);\r\n              const deaths = country.deaths.toFixed(0);\r\n\r\n              const active1k = (country.activePerOneMillion / 1000).toFixed(2);\r\n              const deaths1k = (country.deathsPerOneMillion / 1000).toFixed(2);\r\n              const cases1k = (country.casesPerOneMillion / 1000).toFixed(2);\r\n              const tests1k =\r\n                country.population > 0\r\n                  ? (country.testsPerOneMillion / 1000).toFixed(0)\r\n                  : (country.tests / 1000).toFixed(0);\r\n\r\n              const mortality = ((deaths / cases) * 100).toFixed(2);\r\n              const activity = ((active / cases) * 100).toFixed(2);\r\n              const positive = ((cases / tests) * 100).toFixed(2);\r\n\r\n              const population = (country.population / 1000000).toFixed(1);\r\n\r\n              const elactive = document.createElement(\"div\");\r\n              const elcases = document.createElement(\"div\");\r\n              const eltests = document.createElement(\"div\");\r\n\r\n              const statusActive =\r\n                active1k < 5\r\n                  ? `Mild`\r\n                  : active1k < 10\r\n                  ? `Limited`\r\n                  : active1k < 15\r\n                  ? `Moderate`\r\n                  : active1k < 35\r\n                  ? `Serious`\r\n                  : `Extreme`;\r\n\r\n              const statusCases =\r\n                cases1k < 50\r\n                  ? `Mild`\r\n                  : cases1k < 100\r\n                  ? `Limited`\r\n                  : cases1k < 150\r\n                  ? `Moderate`\r\n                  : cases1k < 350\r\n                  ? `Serious`\r\n                  : `Extreme`;\r\n\r\n              const statusDeaths =\r\n                deaths1k < 0.5\r\n                  ? `Mild`\r\n                  : deaths1k < 1.0\r\n                  ? `Limited`\r\n                  : deaths1k < 1.5\r\n                  ? `Moderate`\r\n                  : deaths1k < 3.5\r\n                  ? `Serious`\r\n                  : `Extreme`;\r\n              // el.innerHTML = `i`;\r\n\r\n              // active < .05\r\n              // ? (elactive.className = \"\")\r\n              // :\r\n\r\n              // active1k < 50\r\n              // ? (elactive.className = \"active1\")\r\n              // : active1k < 100\r\n              // ? (elactive.className = \"active2\")\r\n              // : active1k < 150\r\n              // ? (elactive.className = \"active3\")\r\n              // : active1k < 350\r\n              // ? (elactive.className = \"active4\")\r\n              // : (elactive.className = \"active5\");\r\n\r\n              // cases <= 50\r\n              // ? (elcases.className = \"cases1\")\r\n              // : cases <= 100\r\n              // ? (elcases.className = \"cases2\")\r\n              // : cases <= 150\r\n              // ? (elcases.className = \"cases3\")\r\n              // : cases <= 350\r\n              // ? (elcases.className = \"cases4\")\r\n              // : (elcases.className = \"cases5\");\r\n\r\n              // tests1k < 50\r\n              // ? (eltests.className = \"tests1\")\r\n              // : tests1k < 1000\r\n              // ? (eltests.className = \"tests2\")\r\n              // : tests1k < 1500\r\n              // ? (eltests.className = \"tests3\")\r\n              // : tests1k < 20000\r\n              // ? (eltests.className = \"tests4\")\r\n              // : (eltests.className = \"tests5\");\r\n              eltests.style.height = `${tests1k * 0.01}px`;\r\n              eltests.style.maxHeight = \"100px\";\r\n              eltests.style.minHeight = \"10px\";\r\n              eltests.style.width = `${tests1k * 0.01}px`;\r\n              eltests.style.maxWidth = \"100px\";\r\n              eltests.style.minWidth = \"10px\";\r\n              eltests.style.backgroundColor = \"turquoise\";\r\n              eltests.style.borderRadius = \"50%\";\r\n              eltests.style.opacity = 0.25;\r\n\r\n              elactive.style.height = `${active1k * 0.1}px`;\r\n              elactive.style.minHeight = \"3px\";\r\n              elactive.style.width = `${active1k * 0.1}px`;\r\n              elactive.style.minWidth = \"3px\";\r\n              elactive.style.backgroundColor = \"rgb(200,120,0)\";\r\n              elactive.style.borderRadius = \"50%\";\r\n              elactive.style.opacity = 1;\r\n\r\n              elcases.style.height = \"100px\";\r\n              elcases.style.width = \"100px\";\r\n              elcases.style.background = \"transparent\";\r\n              elcases.style.borderRadius = \"50%\";\r\n              elcases.style.opacity = 0.5;\r\n              elcases.style.cursor = \"pointer\";\r\n\r\n              //  function Toggle(e) {\r\n              //    { el3.className ? new mapboxgl.Marker(el3)\r\n              //     .setLngLat([longitude, latitude])\r\n              //     .addTo(map)\r\n\r\n              //    :\r\n\r\n              new mapboxgl.Marker(eltests)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n\r\n              new mapboxgl.Marker(elactive)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n\r\n              //    }\r\n              //   }\r\n\r\n              // elcases.addEventListener(\"mouseenter\", function () {\r\n              //   // Change the cursor style as a UI indicator.\r\n              //   map.getCanvas().style.cursor = \"pointer\";\r\n\r\n              //    \"mouseenter\" ?\r\n\r\n              new mapboxgl.Marker(elcases)\r\n                .setLngLat([longitude, latitude])\r\n                .addTo(map);\r\n\r\n              //   :\r\n\r\n              //   mapboxgl.Marker(el3)\r\n              //   .setLngLat([longitude, latitude])\r\n              //   .remove()\r\n\r\n              // });\r\n\r\n              // elcases.addEventListener(\"mouseleave\", function () {\r\n              //   map.getCanvas().style.cursor = \"\";\r\n              //   mapboxgl.Marker(el3).remove();\r\n              // });\r\n\r\n              // el.addEventListener(\"mouseenter\", function () {\r\n              //   // Change the cursor style as a UI indicator.\r\n              //   map.getCanvas().style.cursor = \"pointer\";\r\n              // })\r\n\r\n              elcases.addEventListener(\"mouseenter\", function () {\r\n                // Change the cursor style as a UI indicator.\r\n\r\n                // <p class=\"deaths\">Mortality: <b>${numberWithCommas(mortality)}%</b>&nbsp;</p>\r\n\r\n                //\r\n                //  <button class=\"close\"><h6>x</h6></button>\r\n                // <p>Population: <b>${numberWithCommas(population)}m </b>&nbsp;</p>\r\n                // <p>Recovered: <b>+${numberWithCommas(todayRecovered)}</b>&nbsp;</p>\r\n                // <p class=\"deaths\">Mortality: <b>${numberWithCommas(mortality)}%</b>&nbsp;&nbsp;&nbsp;</p>\r\n                // <p>Critical: <b>${numberWithCommas(critical)} </b>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n                const popup =\r\n                  \"mouseenter\" === true\r\n                    ? \" \"\r\n                    : new mapboxgl.Popup({\r\n                        // offset: 5,\r\n\r\n                        closeButton: true,\r\n                        closeOnClick: true,\r\n                        closeOnMove: false,\r\n                        className: \"popup2 animated fadeInUp\",\r\n                      });\r\n\r\n                popup\r\n                  .setLngLat([longitude, latitude])\r\n                  .setHTML(\r\n                    `<div class=\"right\">\r\n                  \r\n                    <p><img src=${flag} alt=\"flag\" /></p>\r\n                    <p><b>${title}</b>&nbsp;&nbsp;</p>\r\n                     \r\n                    <p class=\"deaths\">Deaths Today:<b>+${numberWithCommas(\r\n                      todayDeaths\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"deaths\">Deaths/1k:<b>${numberWithCommas(\r\n                      deaths1k\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"deaths\">(${statusDeaths})&nbsp;&nbsp;&nbsp;</p>\r\n\r\n                    <p class=\"active\">Active:<b>${numberWithCommas(\r\n                      active\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"active\">Active/1k:<b>${numberWithCommas(\r\n                      active1k\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"active\">(${statusActive})&nbsp;&nbsp;&nbsp;</p>\r\n\r\n                    <p class=\"cases\">Cases Today:<b>+${numberWithCommas(\r\n                      todayCases\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"cases\">Cases/1k:<b>${numberWithCommas(\r\n                      cases1k\r\n                    )}</b>&nbsp;</p>\r\n                    <p class=\"cases\">(${statusCases})</p>&nbsp;&nbsp;&nbsp;\r\n              \r\n                    <p class=\"tests\">Tests: <b>${numberWithCommas(\r\n                      tests\r\n                    )}m</b>&nbsp;</p>\r\n                    <p class=\"tests\">Tests/1k:<b >${numberWithCommas(\r\n                      tests1k\r\n                    )}</b>&nbsp;</p>\r\n\r\n                    </div>`\r\n                  )\r\n                  .addTo(map);\r\n\r\n                elcases.addEventListener(\"mouseleave\", function () {\r\n                  map.getCanvas().style.cursor = \"\";\r\n                  popup.remove();\r\n                });\r\n              });\r\n            });\r\n          });\r\n      }\r\n\r\n      // // Updates data after 20000ms\r\n      // let interval = 20000;\r\n\r\n      // // Calls updateMap function after set intervals\r\n      // setInterval(updateMap, interval);\r\n\r\n      document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3,\r\n          center: [3.2, 1.8],\r\n          essential: true,\r\n        });\r\n      });\r\n      document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 4,\r\n          center: [6, 47],\r\n          essential: true,\r\n        });\r\n      });\r\n      document\r\n        .getElementById(\"northamerica\")\r\n        .addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [-120, 35],\r\n            essential: true,\r\n          });\r\n        });\r\n      document\r\n        .getElementById(\"southamerica\")\r\n        .addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.5,\r\n            center: [-74, -4],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n      document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3.1,\r\n          center: [100, 17],\r\n          essential: true,\r\n        });\r\n      });\r\n      document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n        map.flyTo({\r\n          zoom: 3,\r\n          center: [131, -28],\r\n          essential: true,\r\n        });\r\n      });\r\n\r\n      /**\r\n       * Assign a unique id to each store. You'll use this `id`\r\n       * later to associate each point on the map with a listing\r\n       * in the sidebar.\r\n       */\r\n\r\n      data.forEach((point, i) => {\r\n        point.properties.id = i;\r\n      });\r\n\r\n      // Holds visible features for filtering\r\n      let points = [];\r\n\r\n      // Create a popup, but don't add it to the map yet.\r\n      const popup = new mapboxgl.Popup({\r\n        closeButton: false,\r\n        className: \"popup\",\r\n        // offset: [0, 30]\r\n        // className: \"pop\",\r\n\r\n        offset: 12,\r\n      });\r\n\r\n      const filterEl = document.getElementById(\"feature-filter\");\r\n      const listingEl = document.getElementById(\"feature-listing\");\r\n\r\n      function renderListings(features) {\r\n        const empty = document.createElement(\"p\");\r\n        // Clear any existing listings\r\n        listingEl.innerHTML = `<div class=\"deaths\">SELECT A LOCATION</div>`;\r\n        if (features.length) {\r\n          for (const feature of features) {\r\n            const label =\r\n              feature.properties.province !== \"null\"\r\n                ? `Hover over marker to view...  ${feature.properties.province}, ${feature.properties.country}  `\r\n                : `Hover over marker to view...  ${feature.properties.country}.`;\r\n\r\n            // itemLink.href = feature.properties.wikipedia;\r\n            // itemLink.target = '_blank';\r\n\r\n            /* Add the link to the individual listing created above. */\r\n            const itemLink = listingEl.appendChild(document.createElement(\"a\"));\r\n            itemLink.href = \"#\";\r\n            itemLink.className = \"item\";\r\n            itemLink.id = `link-${feature.properties.id}`;\r\n            itemLink.innerHTML =\r\n              feature.properties.province !== \"null\"\r\n                ? `<b>${feature.properties.province}, ${feature.properties.country}.</b><em> View details...</em></b>`\r\n                : `<b>${feature.properties.country}.</b><em> View details...</em>`;\r\n\r\n            // itemLink.textContent = label;\r\n            /* Add dbetails to the individual listing. */\r\n            // const details = listingEl.appendChild(\r\n            //   document.createElement(\"div\")\r\n            // );\r\n            //  details.innerHTML = `${point.properties.province}`;\r\n            // if (feature.properties.province) {\r\n            //   details.innerHTML += `${feature.properties.country}`;\r\n            // }\r\n\r\n            itemLink.addEventListener(\"click\", function () {\r\n              for (const feature of features) {\r\n                if (this.id === `link-${feature.properties.id}`) {\r\n                  flyToStore(feature);\r\n                  createPopUp(feature);\r\n                }\r\n              }\r\n              const activeItem = document.getElementsByClassName(\"active\");\r\n              if (activeItem[0]) {\r\n                activeItem[0].classList.remove(\"active\");\r\n              }\r\n              this.parentNode.classList.add(\"active\");\r\n            });\r\n\r\n            function flyToStore(currentFeature) {\r\n              map.flyTo({\r\n                center: currentFeature.geometry.coordinates,\r\n                zoom: 5,\r\n              });\r\n            }\r\n\r\n            itemLink.addEventListener(\"mouseover\", () => {\r\n              // Highlight corresponding feature on the map\r\n              popup\r\n                .setLngLat(feature.geometry.coordinates)\r\n                .setText(label)\r\n                .addTo(map);\r\n            });\r\n            listingEl.appendChild(itemLink);\r\n          }\r\n\r\n          // Show the filter input\r\n          filterEl.parentNode.style.display = \"block\";\r\n        } else if (features.length === 0 && filterEl.value !== \"\") {\r\n          empty.textContent = \"No results found\";\r\n          listingEl.appendChild(empty);\r\n        } else {\r\n          empty.textContent = \"Drag the map to populate results\";\r\n          listingEl.appendChild(empty);\r\n\r\n          // Hide the filter input\r\n          filterEl.parentNode.style.display = \"none\";\r\n\r\n          // remove features filter\r\n          map.setFilter(\"Cases\", [\"has\", \"id\"]);\r\n        }\r\n      }\r\n\r\n      function normalize(string) {\r\n        return string.trim().toLowerCase();\r\n      }\r\n\r\n      // Because features come from tiled vector data,\r\n      // feature geometries may be split\r\n      // or duplicated across tile boundaries.\r\n      // As a result, features may appear\r\n      // multiple times in query results.\r\n      function getUniqueFeatures(features, comparatorProperty) {\r\n        const uniqueIds = new Set();\r\n        const uniqueFeatures = [];\r\n        for (const feature of features) {\r\n          const id = feature.properties[comparatorProperty];\r\n          if (!uniqueIds.has(id)) {\r\n            uniqueIds.add(id);\r\n            uniqueFeatures.push(feature);\r\n          }\r\n        }\r\n        return uniqueFeatures;\r\n      }\r\n\r\n      //DOT\r\n      const size = 150;\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement(\"canvas\");\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext(\"2d\");\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(160, 160, 160, ${0.4 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(0, 0, this.width, this.height).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        },\r\n      };\r\n\r\n      map.on(\"load\", () => {\r\n        /**\r\n         * This is where your '.addLayer()' used to be, instead\r\n         * add only the source without styling a layer\r\n         */\r\n        const cases1 = [\"<\", [\"get\", \"cases\"], 50000];\r\n        const cases2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 50000],\r\n          [\"<\", [\"get\", \"cases\"], 100000],\r\n        ];\r\n        const cases3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 100000],\r\n          [\"<\", [\"get\", \"cases\"], 400000],\r\n        ]; //800,000\r\n        const cases4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"cases\"], 400000],\r\n          [\"<\", [\"get\", \"cases\"], 1600000],\r\n        ]; //32,000,000\r\n        const cases5 = [\">=\", [\"get\", \"cases\"], 1600000];\r\n\r\n        const deaths1 = [\"<\", [\"get\", \"deaths\"], 2500];\r\n        const deaths2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 2500],\r\n          [\"<\", [\"get\", \"deaths\"], 5000],\r\n        ];\r\n        const deaths3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 5000],\r\n          [\"<\", [\"get\", \"deaths\"], 20000],\r\n        ]; //8,000\r\n        const deaths4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"deaths\"], 20000],\r\n          [\"<\", [\"get\", \"deaths\"], 80000],\r\n        ]; // 175,000\r\n        const deaths5 = [\">=\", [\"get\", \"deaths\"], 80000];\r\n\r\n        const mr1 = [\"<\", [\"get\", \"mort\"], 0.003];\r\n        const mr2 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.003],\r\n          [\"<\", [\"get\", \"mort\"], 0.005],\r\n        ];\r\n        const mr3 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.005],\r\n          [\"<\", [\"get\", \"mort\"], 0.02],\r\n        ]; //.011 amr\r\n        const mr4 = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"mort\"], 0.02],\r\n          [\"<\", [\"get\", \"mort\"], 0.05],\r\n        ]; //.18\r\n        const mr5 = [\">=\", [\"get\", \"mort\"], 0.05];\r\n\r\n        const colors = [\"#6a5dfc\", \"#a13ed5\", \"#ca32ad\", \"#e72585\", \"#ff125e\"];\r\n        // const colors2 = [\"#ff7200\", \"#ff8300\",\"#ff9400\",\"#ffa400\", \"#ffb300\"];\r\n\r\n        //DOT\r\n        map.addImage(\"pulsing-dot\", pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource(\"dot-point\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n        });\r\n        map.addLayer({\r\n          id: \"layer-with-pulsing-dot\",\r\n          type: \"symbol\",\r\n          source: \"dot-point\",\r\n          layout: {\r\n            \"icon-image\": \"pulsing-dot\",\r\n          },\r\n        });\r\n\r\n        map.addSource(\"points\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data,\r\n          },\r\n          cluster: true,\r\n          clusterRadius: 50,\r\n          clusterProperties: {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            deaths1: [\"+\", [\"case\", deaths1, 1, 0]],\r\n            deaths2: [\"+\", [\"case\", deaths2, 1, 0]],\r\n            deaths3: [\"+\", [\"case\", deaths3, 1, 0]],\r\n            deaths4: [\"+\", [\"case\", deaths4, 1, 0]],\r\n            deaths5: [\"+\", [\"case\", deaths5, 1, 0]],\r\n            cases1: [\"+\", [\"case\", cases1, 1, 0]],\r\n            cases2: [\"+\", [\"case\", cases2, 1, 0]],\r\n            cases3: [\"+\", [\"case\", cases3, 1, 0]],\r\n            cases4: [\"+\", [\"case\", cases4, 1, 0]],\r\n            cases5: [\"+\", [\"case\", cases5, 1, 0]],\r\n            mr1: [\"+\", [\"case\", mr1, 1, 0]],\r\n            mr2: [\"+\", [\"case\", mr2, 1, 0]],\r\n            mr3: [\"+\", [\"case\", mr3, 1, 0]],\r\n            mr4: [\"+\", [\"case\", mr4, 1, 0]],\r\n            mr5: [\"+\", [\"case\", mr5, 1, 0]],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"Mortality\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n\r\n          paint: {\r\n            \"circle-color\": \"grey\",\r\n            //    [\r\n            //     \"case\",\r\n            //     mr1,\r\n            //     colors[0],\r\n            //     mr2,\r\n            //     colors[1],\r\n            //     mr3,\r\n            //     colors[2],\r\n            //     mr4,\r\n            //     colors[3],\r\n            //     colors[4],\r\n            //   ],\r\n            \"circle-opacity\": 0.5,\r\n\r\n            // 'circle-radius': 18,\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"mort\"],\r\n              0.0001,\r\n              5,\r\n              0.2,\r\n              50,\r\n            ],\r\n          },\r\n        });\r\n\r\n        // map.addLayer({\r\n        //   id: \"Cases\",\r\n        //   type: \"heatmap\",\r\n        //   source: \"points\",\r\n        //   filter: [\"!=\", \"cluster\", true],\r\n        //   paint: {\r\n        //     'heatmap-intensity': .7,\r\n        //     'heatmap-weight': 3,\r\n        //     'heatmap-radius': [ 'interpolate', [ 'linear' ], [ 'get', 'cases' ],\r\n        //     1,\r\n        //     10,\r\n        //     1000000,\r\n        //     200, ],\r\n        //     'heatmap-opacity': 0.2,\r\n        //   },\r\n\r\n        // });\r\n\r\n        //initialize choropleth colors\r\n\r\n        map.addLayer({\r\n          id: \"Deaths\",\r\n          type: \"circle\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n          paint: {\r\n            \"circle-color\": \"grey\",\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"deaths\"],\r\n              10,\r\n              5,\r\n              1000000,\r\n              36,\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"Cases\",\r\n          source: \"points\",\r\n          filter: [\"!=\", \"cluster\", true],\r\n          type: \"circle\",\r\n          paint: {\r\n            \"circle-color\": [\r\n              \"case\",\r\n              cases1,\r\n              colors[0],\r\n              cases2,\r\n              colors[1],\r\n              cases3,\r\n              colors[2],\r\n              cases4,\r\n              colors[3],\r\n              colors[4],\r\n            ],\r\n            \"circle-opacity\": 0.5,\r\n\r\n            \"circle-radius\": [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"get\", \"cases\"],\r\n              1,\r\n              10,\r\n              10000000,\r\n              50,\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"Pop\",\r\n          source: \"points\",\r\n          // filter: [\"!=\", \"cluster\", true],\r\n          type: \"circle\",\r\n          paint: {\r\n            \"circle-color\": \"transparent\",\r\n            \"circle-radius\": 30,\r\n          },\r\n        });\r\n\r\n        //START DOUGHNUT\r\n\r\n        // map.addLayer({\r\n        //   id: \"clusters\",\r\n        //   type: \"symbol\",\r\n        //   source: \"points\",\r\n        //   // filter: [\"!=\", \"cluster\", true],\r\n        //   layout: {\r\n        //     \"text-field\": [\r\n        //       \"number-format\",\r\n        //       [\"get\", \"points\"],\r\n        //       { \"min-fraction-digits\": 1, \"max-fraction-digits\": 1 },\r\n        //     ],\r\n        //     \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n        //     \"text-size\": 10,\r\n        //     visibility: \"visible\",\r\n        //   },\r\n        //   paint: {\r\n        //     \"text-color\": [\r\n        //       \"case\",\r\n        //       [\"<\", [\"get\", \"cases\"], 3],\r\n        //       \"black\",\r\n        //       \"white\",\r\n        //     ],\r\n        //   },\r\n        // });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures(\"points\");\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el,\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on(\"render\", () => {\r\n          if (!map.isSourceLoaded(\"points\")) return;\r\n          updateMarkers();\r\n        });\r\n\r\n        // code for creating an SVG donut chart from feature properties\r\n        function createDonutChart(props) {\r\n          const offsets = [];\r\n          const counts = [\r\n            props.deaths1,\r\n            props.deaths2,\r\n            props.deaths3,\r\n            props.deaths4,\r\n            props.deaths5,\r\n          ];\r\n          const counts2 = [\r\n            props.cases1,\r\n            props.cases2,\r\n            props.cases3,\r\n            props.cases4,\r\n            props.cases5,\r\n          ];\r\n\r\n          let total = 0;\r\n          for (const count of counts) {\r\n            offsets.push(total);\r\n            total += count;\r\n          }\r\n          let total2 = 0;\r\n          for (const count2 of counts2) {\r\n            offsets.push(total2);\r\n            total2 += count2;\r\n          }\r\n          const fontSize =\r\n            total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n          const r =\r\n            total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n          const r0 = Math.round(r * 0.6);\r\n          const w = r * 2;\r\n\r\n          const fontSize2 =\r\n            total2 >= 1000 ? 22 : total2 >= 100 ? 20 : total2 >= 10 ? 18 : 16;\r\n          const r2 =\r\n            total2 >= 1000 ? 50 : total2 >= 100 ? 32 : total2 >= 10 ? 24 : 18;\r\n          const r02 = Math.round(r2 * 0.6);\r\n          const w2 = r2 * 2;\r\n\r\n          let html = `<div>\r\n          <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n          let html2 = `<div>\r\n          <svg \"class=\"zoom\" width=\"${w2}\" height=\"${w2}\" viewbox=\"0 0 ${w2} ${w2}\" text-anchor=\"middle\" style=\"font: ${fontSize2}px ; display: \"block\"; >`;\r\n\r\n          for (let i = 0; i < counts.length; i++) {\r\n            html += donutSegment(\r\n              offsets[i] / total,\r\n              (offsets[i] + counts[i]) / total,\r\n              r,\r\n              r0,\r\n              colors[i]\r\n            );\r\n          }\r\n\r\n          for (let i = 0; i < counts2.length; i++) {\r\n            html += donutSegment(\r\n              offsets[i] / total2,\r\n              (offsets[i] + counts2[i]) / total2,\r\n              r,\r\n              r0,\r\n              colors[i]\r\n            );\r\n          }\r\n          html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n          <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n          ${total.toLocaleString()}\r\n          </text>\r\n          </svg>\r\n          </div>`;\r\n\r\n          const el = document.createElement(\"div\");\r\n          el.innerHTML = html;\r\n          return el.firstChild;\r\n        }\r\n\r\n        function donutSegment(start, end, r, r0, color) {\r\n          if (end - start === 1) end -= 0.00001;\r\n          const a0 = 2 * Math.PI * (start - 0.25);\r\n          const a1 = 2 * Math.PI * (end - 0.25);\r\n          const x0 = Math.cos(a0),\r\n            y0 = Math.sin(a0);\r\n          const x1 = Math.cos(a1),\r\n            y1 = Math.sin(a1);\r\n          const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n          // draw an SVG path\r\n          return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${\r\n            r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${\r\n            r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${\r\n            r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n        }\r\n\r\n        //END DOUGHNUT\r\n\r\n        // inspect a cluster on click\r\n        map.on(\"click\", \"Cases\", function (e) {\r\n          const coordinates = e.features[0].geometry.coordinates.slice();\r\n          map.flyTo({ center: coordinates, zoom: 6 });\r\n        });\r\n\r\n        map.on(\"click\", \"Pop\", function (e) {\r\n          const coordinates = e.features[0].geometry.coordinates.slice();\r\n          map.flyTo({ center: coordinates, zoom: 6 });\r\n        });\r\n\r\n        //TOGGLE\r\n        // After the last frame rendered before the map enters an \"idle\" state.\r\n        map.on(\"idle\", () => {\r\n          // If these two layers were not added to the map, abort\r\n          if (\r\n            !map.getLayer(\"Cases\") ||\r\n            !map.getLayer(\"Deaths\") ||\r\n            !map.getLayer(\"Mortality\")\r\n          ) {\r\n            return;\r\n          }\r\n\r\n          // Enumerate ids of the layers.\r\n          const toggleableLayerIds = [\"Cases\", \"Deaths\", \"Mortality\"];\r\n\r\n          // Set up the corresponding toggle button for each layer.\r\n          for (const id of toggleableLayerIds) {\r\n            // Skip layers that already have a button set up.\r\n            if (document.getElementById(id)) {\r\n              continue;\r\n            }\r\n\r\n            // Create a link.\r\n            const link = document.createElement(\"a\");\r\n            link.id = id;\r\n            link.href = \"#\";\r\n            link.textContent = id;\r\n            link.className = \"active\";\r\n\r\n            // Show or hide layer when the toggle is clicked.\r\n            link.onclick = function (e) {\r\n              const clickedLayer = this.textContent;\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n\r\n              const visibility = map.getLayoutProperty(\r\n                clickedLayer,\r\n                \"visibility\"\r\n              );\r\n\r\n              // Toggle layer visibility by changing the layout object's visibility property.\r\n              if (visibility === \"visible\") {\r\n                map.setLayoutProperty(clickedLayer, \"visibility\", \"none\");\r\n                this.className = \"\";\r\n              } else {\r\n                this.className = \"active\";\r\n                map.setLayoutProperty(clickedLayer, \"visibility\", \"visible\");\r\n              }\r\n            };\r\n            const layers = document.getElementById(\"menu\");\r\n            layers.appendChild(link);\r\n          }\r\n        }); // map(idle) End\r\n\r\n        //Add navigation controls to the top right of the canvas\r\n        //   map.addControl(new mapboxgl.NavigationControl());\r\n\r\n        // Add navigation to center the map on your geo location\r\n        const geocoder = new MapboxGeocoder({\r\n          accessToken: mapboxgl.accessToken,\r\n          mapboxgl: mapboxgl,\r\n        });\r\n\r\n        document.getElementById(\"geocoder\").appendChild(geocoder.onAdd(map));\r\n\r\n        map.addControl(\r\n          new mapboxgl.GeolocateControl({\r\n            fitBoundsOptions: { maxZoom: 6 },\r\n          })\r\n        );\r\n\r\n        map.on(\"movestart\", () => {\r\n          // reset features filter as the map starts moving\r\n          map.setFilter(\"Cases\", [\"has\", \"id\"]);\r\n        });\r\n\r\n        map.on(\"moveend\", () => {\r\n          const features = map.queryRenderedFeatures({ layers: [\"Cases\"] });\r\n\r\n          if (features) {\r\n            const uniqueFeatures = getUniqueFeatures(features, \"id\");\r\n            // Populate features for the listing overlay.\r\n            renderListings(uniqueFeatures);\r\n\r\n            // Clear the input container\r\n            filterEl.value = \"\";\r\n\r\n            // Store the current features in sn `airports` variable to\r\n            // later use for filtering on `keyup`.\r\n            points = uniqueFeatures;\r\n            console.log(points, \"points\");\r\n          }\r\n        });\r\n\r\n        var i = 0;\r\n\r\n        map.on(\"mouseenter\", \"Pop\", (e) => {\r\n          // Change the cursor style as a UI indicator.\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          // Populate the popup and set its coordinates based on the feature.\r\n          const feature = e.features[0];\r\n\r\n          const { cases, deaths, country, province } = e.features[0].properties;\r\n\r\n          const colorCase = [];\r\n          const statusCase = [];\r\n          const classText = [];\r\n          if (cases < 50000) {\r\n            colorCase.push(\"#6a5dfc\");\r\n            statusCase.push(\"Mild\");\r\n            classText.push(\"mild\");\r\n          }\r\n          if (cases >= 50000 && cases < 100000) {\r\n            colorCase.push(\"#a13ed5\");\r\n            statusCase.push(\"Limited\");\r\n            classText.push(\"limited\");\r\n          }\r\n          if (cases >= 100000 && cases < 400000) {\r\n            colorCase.push(\"#ca32ad\");\r\n            statusCase.push(\"Moderate\");\r\n            classText.push(\"moderate\");\r\n          }\r\n          if (cases >= 400000 && cases < 16000000) {\r\n            colorCase.push(\"#e72585\");\r\n            statusCase.push(\"Serious\");\r\n            classText.push(\"serious\");\r\n          }\r\n          if (cases >= 16000000) {\r\n            colorCase.push(\"#ff125e\");\r\n            statusCase.push(\"Extreme\");\r\n            classText.push(\"extreme\");\r\n            //   pink\r\n          }\r\n\r\n          const colorDeath = [];\r\n          const statusDeath = [];\r\n          const classText2 = [];\r\n          if (deaths < 2500) {\r\n            colorDeath.push(\"#6a5dfc\");\r\n            statusDeath.push(\"Mild\");\r\n            classText2.push(\"mild\");\r\n            //   blue\r\n          }\r\n          if (deaths >= 2500 && deaths < 5000) {\r\n            colorDeath.push(\"#a13ed5\");\r\n            statusDeath.push(\"Limited\");\r\n            classText2.push(\"limited\");\r\n          }\r\n          if (deaths >= 5000 && deaths < 20000) {\r\n            colorDeath.push(\"#ca32ad\");\r\n            statusDeath.push(\"Moderate\");\r\n            classText2.push(\"moderate\");\r\n          }\r\n          if (deaths >= 20000 && deaths < 80000) {\r\n            colorDeath.push(\"#e72585\");\r\n            statusDeath.push(\"Serious\");\r\n            classText2.push(\"serious\");\r\n          }\r\n          if (deaths >= 80000) {\r\n            colorDeath.push(\"#ff125e\");\r\n            statusDeath.push(\"Extreme\");\r\n            classText2.push(\"extreme\");\r\n            //   pink\r\n          }\r\n\r\n          //POPUP\r\n          // const countryISO =\r\n          //   lookup.byCountry(feature.properties.country)?.iso2 ||\r\n          //   lookup.byInternet(feature.properties.country)?.iso2;\r\n          // const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n          const provinceHTML =\r\n            feature.properties.province !== \"null\"\r\n              ? `<p>Province: <b>${feature.properties.province}</b></p>`\r\n              : \"\";\r\n          const mortalityRate = (\r\n            (feature.properties.deaths / feature.properties.cases) *\r\n            100\r\n          ).toFixed(2);\r\n          // const countryFlagHTML = Boolean(countryISO)\r\n          //   ? `<img src=\"${countryFlag}\"></img>`\r\n          //   : \"\";\r\n\r\n          const HTML = country\r\n            ? ` \r\n        \r\n          <p>Country: <b>${country}</b></p>\r\n          ${provinceHTML}\r\n          <p>Cases: <b>${numberWithCommas(\r\n            cases\r\n          )}</b><span class=\"${classText}\">${statusCase}</span></p>\r\n          <p>Deaths: <b>${numberWithCommas(\r\n            deaths\r\n          )}</b><span class=\"${classText2}\"}>${statusDeath}</span></p>\r\n          <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n         \r\n          `\r\n            : ` \r\n          <p class=\"\"><em>Click on the cluster to zoom in...</em></p>\r\n       \r\n         \r\n          `;\r\n\r\n          popup\r\n            .setLngLat(feature.geometry.coordinates)\r\n            .setHTML(\r\n              '<canvas className=\"info\" id=\"foo' +\r\n                feature.properties.country +\r\n                '\"></canvas>' +\r\n                HTML\r\n            )\r\n            .addTo(map);\r\n\r\n          var ctx = document.getElementById(\"foo\" + country).getContext(\"2d\");\r\n\r\n          // document\r\n          // .getElementById(ctx)\r\n          // .addEventListener(\"click\", function () {\r\n          //   map.flyTo({\r\n          //     zoom: 3,\r\n          //     center: [3.2, 1.8],\r\n          //     essential: true,\r\n          //   });\r\n          // });\r\n\r\n          console.log(ctx);\r\n          var chart = new Chart(ctx, {\r\n            type: \"doughnut\",\r\n            options: {\r\n              elements: {\r\n                arc: {\r\n                  borderColor: \"#212529\",\r\n                  borderWidth: 1,\r\n                },\r\n              },\r\n\r\n              responsive: true,\r\n              maintainAspectRatio: true,\r\n              legend: {\r\n                display: false,\r\n                position: \"\",\r\n              },\r\n              title: {\r\n                display: false,\r\n                text: \"\",\r\n              },\r\n              animation: {\r\n                animateScale: true,\r\n                animateRotate: true,\r\n              },\r\n              tooltips: {\r\n                backgroundColor: \"#212529\",\r\n                borderColor: \"turquoise\",\r\n                borderWidth: 1,\r\n                cornerRadius: 2,\r\n                displayColors: true,\r\n                bodyFontSize: 12,\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n                callbacks: {\r\n                  label: function (item, data) {\r\n                    console.log(data.labels, item);\r\n                    return (\r\n                      data.datasets[item.datasetIndex].label +\r\n                      \": \" +\r\n                      data.labels[item.index] +\r\n                      \": \" +\r\n                      data.datasets[item.datasetIndex].data[item.index]\r\n                    );\r\n                  },\r\n                },\r\n              },\r\n            },\r\n            data: {\r\n              labels: [\"Cases\", \"Deaths\"],\r\n              datasets: [\r\n                {\r\n                  label: \"Distribution\",\r\n                  backgroundColor: [colorDeath, colorCase],\r\n                  borderColor: colorCase,\r\n                  // data: caseChart,\r\n                  // data: [12, 34, 16, 52, 13]\r\n                  data: [deaths * 2, cases],\r\n                },\r\n              ],\r\n            },\r\n          });\r\n          i++;\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"Pop\", () => {\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        filterEl.addEventListener(\"keyup\", (e) => {\r\n          const value = normalize(e.target.value);\r\n\r\n          // Filter visible features that match the input value.\r\n          const filtered = [];\r\n          for (const feature of points) {\r\n            const name = normalize(feature.properties.country);\r\n            const code = normalize(feature.properties.province);\r\n            if (name.includes(value) || code.includes(value)) {\r\n              filtered.push(feature);\r\n            }\r\n          }\r\n\r\n          // Populate the sidebar with filtered results\r\n          renderListings(filtered);\r\n\r\n          // Set the filter to populate features into the layer.\r\n          if (filtered.length) {\r\n            map.setFilter(\"Cases\", [\r\n              \"match\",\r\n              [\"get\", \"id\"],\r\n              filtered.map((feature) => {\r\n                return feature.properties.province;\r\n              }),\r\n              true,\r\n              false,\r\n            ]);\r\n          }\r\n        });\r\n\r\n        // Call this function on initialization\r\n        // passing an empty array to render an empty state\r\n        renderListings([]);\r\n      });\r\n\r\n      //Create a Mapbox GL JS `Popup`.\r\n\r\n      function createPopUp(currentFeature) {\r\n        const popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n        if (popUps[0]) popUps[0].remove();\r\n      }\r\n    }\r\n  }, [data]);\r\n  //useEffect End\r\n\r\n  return (\r\n    <div className=\"mapContainer\">\r\n      {/* <div className=\"sb\">\r\n      \r\n        \r\n      </div> */}\r\n\r\n      <div id=\"map\" className=\"mapBox map\" ref={mapboxElRef} />\r\n    </div>\r\n  );\r\n};\r\n//Map End\r\nexport default Map2;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport {  Col, Row } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=180\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  // console.log(data[178], 'DATA178')\r\n\r\n  return (\r\n    <Col className=\"px-0\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          width={160}\r\n          height={110}\r\n        //   options={options}\r\n\r\n        options={{\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"bottom\",\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  display: true,\r\n                  // stacked: true,\r\n                //   type: \"logarithmic\",\r\n                  display: false,\r\n                },\r\n              ],\r\n              xAxes: [\r\n                {\r\n                  // display: false,\r\n                },\r\n              ],\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n            },\r\n          }}\r\n          data={{\r\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                borderColor: \"#e72585\",\r\n                // data: data,\r\n                data: [data[30], data[60], data[90], data[120], data[150], data[178]],\r\n              \r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </Col>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default LineGraph;\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport TabsComponent from \"../misc/TabsComponent\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport CountUp from \"react-countup\";\r\nimport BarGraph from \"../misc/BarGraph\";\r\nimport LineGraph from \"./LineGraph\";\r\n\r\nconst Menu = ({\r\n  region,\r\n  index,\r\n  population,\r\n  global,\r\n  state,\r\n  tests,\r\n  countries,\r\n  continents,\r\n  handleClose,\r\n  populationGlobal,\r\n  testsG,\r\n  globalCases,\r\n  globalDeaths,\r\n  globalActive,\r\n  globalCritical,\r\n  globalTests,\r\n  globalRecovered,\r\n  continentNames,\r\n  casesMillion,\r\n  deathsMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  recoveredMillion,\r\n  testsMillion,\r\n  todayGlobalCases,\r\n  todayGlobalDeaths,\r\n  toggleSearch\r\n}) => {\r\n  const casesPerContinent = casesMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const deathsPerContinent = deathsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const activePerContinent = activeMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const criticalPerContinent = criticalMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const testsPerContinent = testsMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  const recoveredPerContinent = recoveredMillion.map((selectedContinent) =>\r\n    (selectedContinent / 1000).toFixed(1)\r\n  );\r\n  // console.log(casesPerContinent, \"casesPerContinent\");\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(3);\r\n  const activeGlobal = (globalActive / 1000).toFixed(2);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(4);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n  const recoveredGlobal = (globalRecovered / 1000).toFixed(1);\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(\r\n    (country) => country.continent === region\r\n  );\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries\r\n    .filter(\r\n      (country) => country.continent === region && country.population > 100000\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country.substring(0, 12));\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  // Create strata for classifting cases for doughnut charts\r\n  const cases1 = continents.filter(\r\n    (selectedContinent) => selectedContinent.casesPerOneMillion / 1000 < 50\r\n  );\r\n  // console.log((cases1[6]), 'cases1')\r\n  const cases2 = continents.filter(\r\n    (selectedContinent) =>\r\n      selectedContinent.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedContinent.casesPerOneMillion / 1000 < 100\r\n  );\r\n  // console.log(cases2.countries, 'cases2')\r\n  const cases3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const cases4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const cases5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Deaths\r\n  const deaths1 = continents.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 < 0.5\r\n  );\r\n  const deaths2 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 0.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1\r\n  );\r\n  const deaths3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 1.5\r\n  );\r\n  const deaths4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.deathsPerOneMillion / 1000 >= 1.5 &&\r\n      selectedCountry.deathsPerOneMillion / 1000 < 2.5\r\n  );\r\n  const deaths5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.deathsPerOneMillion / 1000 > 2.5\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continents.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continents.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 25\r\n  );\r\n  const active5 = continents.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 25\r\n  );\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) {\r\n      colorCases.push(\"#444e86\");\r\n    }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) {\r\n      colorCases.push(\"#955196\");\r\n    }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) {\r\n      colorCases.push(\"#ffa600\");\r\n    }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 300) {\r\n      colorCases.push(\"#ff6e54\");\r\n    }\r\n    if (casesPerContinent[i] >= 300) {\r\n      colorCases.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 2.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < 3) {\r\n      colorActive.push(\"#444e86\");\r\n    }\r\n    if (activePerOneMillion[i] >= 3 && activePerOneMillion[i] < 5) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activePerOneMillion[i] >= 5 && activePerOneMillion[i] < 8) {\r\n      colorActive.push(\"#ffa600\");\r\n    }\r\n    if (activePerOneMillion[i] >= 8 && activePerOneMillion[i] < 15) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activePerOneMillion[i] >= 15) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      backgroundcolor.push(\"#444e86\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      backgroundcolor.push(\"#955196\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      backgroundcolor.push(\"#ffa600\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      backgroundcolor.push(\"#ff6e54\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      backgroundcolor.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n  // const ok = function (item, data) {\r\n  //   console.log(data.labels, item);\r\n  //   return (\r\n  //     data.datasets[item.datasetIndex].label +\r\n  //     \": \" +\r\n  //     data.labels[item.index] +\r\n  //     \": \" +\r\n  //     data.datasets[item.datasetIndex].data[item.index]\r\n  //   );\r\n  // }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"\",\r\n      content: (\r\n        <>\r\n           <Row style={{ height: \"95vh\", border: \"\" }} className=\"\">\r\n            {/* COLUMN ONE */}\r\n\r\n            <Col\r\n              className=\"subtitle\"\r\n              style={{ maxWidth: \"100%\", overflowY: \"scroll\", height: \"100%\" }}\r\n            >\r\n              <Row className=\"mb-2\">\r\n                <Col className=\"pt-3 mr-2\">\r\n                  <h1>\r\n                    {\" \"}\r\n                   {casesGlobal}\r\n                  \r\n                 \r\n                    {casesGlobal[0] / 1000 >= casesGlobal[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\"}}\r\n                        className=\"fa fa-arrow-up cases\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\" }}\r\n                        className=\"fa fa-arrow-down cases\"\r\n                      ></i>\r\n                    )}{\" \"}\r\n                    <h6 className=\"cases\">Global Cases/1k</h6>\r\n                    \r\n                  </h1>\r\n         \r\n                </Col>\r\n\r\n                <Col className=\"pt-4\">\r\n                <Animated animationIn=\"fadeInUp\" isVisible={true}>\r\n                  <h6 style={{ color: \"#fff\" }}>Today&nbsp;</h6>\r\n                  <h3 className=\"mb-0\">\r\n                    +\r\n                    {numberWithCommas(\r\n                      (todayGlobalCases /1000).toFixed(1) + 'k'\r\n                    )}\r\n                  </h3>\r\n                </Animated>\r\n           \r\n                </Col>\r\n              </Row>\r\n\r\n\r\n              <Row className=\"subtitle mt-2 \">\r\n                {/* <Col className=\"box \" style={{maxWidth: \"50%\"}}> */}\r\n                {/* <div\r\n                  className=\"py-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Cases Trend\r\n                </div> */}\r\n                <LineGraph casesType={casesType} />\r\n                {/* </Col> */}\r\n                {/* <Col className=\"box ml-2\" style={{maxWidth: \"50%\"}}>\r\n            </Col> \r\n            */}\r\n              </Row>\r\n\r\n              <Row className=\"mt-4\">\r\n                <Col className=\"px-3 pt-0 mr-2\">\r\n                  <h3 className=\"\">\r\n                    {deathsGlobal}\r\n                    {deathsPerOneMillion[0] / 1000 <=\r\n                    deathsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"slategrey\" }}>Deaths/1k</h6>\r\n                </Col>\r\n                <Col className=\" px-2 pt-0 mr-2\">\r\n                  <h3 className=\"\">\r\n                    {activeGlobal}\r\n                    {activePerOneMillion[0] / 1000 <=\r\n                    activePerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"#ff9400\" }}>Active/1k</h6>\r\n\r\n                  <h6></h6>\r\n                </Col>\r\n                <Col className=\"px-2 pt-0\">\r\n                  <h3 className=\"\">\r\n                    {testsGlobal}\r\n                    {testsPerOneMillion[0] / 1000 <=\r\n                    testsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"teal\" }}>Tests/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n\r\n             \r\n\r\n\r\n              \r\n\r\n              <Row className=\" my-2 py-3\">\r\n               \r\n\r\n    \r\n\r\n                {/* <Col\r\n                  className=\"box ml-2 px-0\"\r\n                  style={{ color: \"#fff\", fontSize: \"14px\", maxWidth: \"50%\" }}\r\n                > */}\r\n                  <h6 style={{display: \"flex\", justifyContent:\"center\",   alignItems: \"center\", width: \"100%\"}}\r\n                className=\" pt-2 pb-1 ml-2\"\r\n              \r\n              >\r\n                {region}\r\n              </h6>\r\n                  <Doughnut\r\n                    // width={200}\r\n                    height={160}\r\n                    data={{\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            cases1.length,\r\n                            cases2.length,\r\n                            cases3.length,\r\n                            cases4.length,\r\n                            cases5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Cases\",\r\n                          stack: \"0\",\r\n                        },\r\n                        {\r\n                          data: [\r\n                            active1.length,\r\n                            active2.length,\r\n                            active3.length,\r\n                            active4.length,\r\n                            active5.length,\r\n                          ],\r\n                          backgroundColor:  [\"#ffb300\",\"#ffa400\",\"#ff9400\",\"#ff8300\",\"#ff7200\"],\r\n                          label: \"Active\",\r\n                          stack: \"0\",\r\n                        },\r\n                      ],\r\n                      labels: [\r\n                        \"Lowest\",\r\n                        \"Lower\",\r\n                        \"Average\",\r\n                        \"Higher\",\r\n                        \"Highest\",\r\n                      ],\r\n                    }}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderColor: \"#212529\",\r\n                          borderWidth: 1,\r\n                        },\r\n                      },\r\n                      responsive: true,\r\n                      maintainAspectRatio: true,\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                      title: {\r\n                        display: false,\r\n                        text: ''    \r\n                      },\r\n                      animation: {\r\n                        animateScale: true,\r\n                        animateRotate: true,\r\n                      },\r\n                      tooltips: {\r\n                        backgroundColor: \"#212529\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        cornerRadius: 2,\r\n                        displayColors: true,\r\n                        bodyFontSize: 12,\r\n                        labels: {\r\n                          usePointStyle: true,\r\n                        },\r\n                        callbacks: {\r\n                          label: function (item, data) {\r\n                            console.log(data.labels, item);\r\n                            return (\r\n                              data.datasets[item.datasetIndex].label +\r\n                              \": \" +\r\n                              data.labels[item.index] +\r\n                              \": \" +\r\n                              data.datasets[item.datasetIndex].data[item.index]\r\n                            );\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  ></Doughnut>\r\n                        <h6 style={{display: \"flex\", justifyContent:\"center\",   alignItems: \"center\", width: \"100%\"}}\r\n                className=\" pt-4 pb-2 ml-2\"\r\n              \r\n              >\r\n                Continents Grouped by Severity\r\n              </h6>\r\n                {/* </Col> */}\r\n              </Row>\r\n\r\n              <Row className=\"subtitle pb-4\">\r\n                <Col className=\"px-2 mr-2\">\r\n                  <h6 style={{ color: \"slategrey\" }}>Mortality&nbsp;</h6>\r\n                  <h3 className=\"\">\r\n                    {(\r\n                      (deathsGlobal / casesGlobal) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                </Col>\r\n                <Col className=\"px-2 mr-2\">\r\n                  <h6 style={{ color: \"#ff9400\" }}>Active&nbsp;</h6>\r\n                  <h3 className=\"\">\r\n                    {(\r\n                      (activeGlobal / casesGlobal) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                </Col>\r\n\r\n                <Col className=\"px-2\">\r\n                  <h6 className=\"\" style={{ color: \"teal\" }}>\r\n                    Positive&nbsp;\r\n                  </h6>\r\n                  <h3>\r\n                    {numberWithCommas(\r\n                      (\r\n                        (casesGlobal / testsGlobal) *\r\n                        100\r\n                      ).toFixed(2) + \"%\"\r\n                    )}\r\n                  </h3>\r\n                </Col>\r\n              </Row>\r\n\r\n   {/* <BarGraph /> */}\r\n   <Row className=\"px-3\" style={{ display: \"flex\", justifyContent: \"center\"}}>\r\n                <h6\r\n                  className=\" pb-1\"\r\n               \r\n                >\r\n                 Continents Per/1k \r\n                </h6>\r\n\r\n                <HorizontalBar\r\n                  // pointStyle=\"star\"\r\n                  height={190}\r\n                  width={300}\r\n                  options={{\r\n                    legend: {\r\n                      display: true,\r\n                      position: \"top\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    //   scales:{\r\n                    //     xAxes:[{\r\n                    //        ticks:{\r\n                    //        display: false\r\n                    //       }\r\n                    //     }]\r\n                    // },\r\n\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          // ticks: {\r\n                          //   min: 0,\r\n                          //   max: 3,\r\n                          //   stepWidth: 2,\r\n                          //   stepSize: 2,\r\n                          // },\r\n                          ticks: {\r\n                            display: false,\r\n                          },\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          // type: \"logarithmic\",\r\n                          ticks: {\r\n                            // min: 0,\r\n                            // max: 3,\r\n                            // stepWidth: 100,\r\n                            stepSize: 1000,\r\n                          },\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: continentNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Deaths\",\r\n                        data: deathsPerContinent,\r\n                        backgroundColor: \"grey\",\r\n                        stack: \"0\",\r\n                      },\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerContinent,\r\n                        backgroundColor: \"orange\",\r\n                        stack: \"0\",\r\n                      },\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerContinent,\r\n                        backgroundColor: [colorsPie[4], colorsPie[0], colorsPie[3], colorsPie[1], colorsPie[2], colorsPie[0]],\r\n                        stack: \"0\",\r\n                      },\r\n\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerContinent,\r\n                        backgroundColor: \"teal\",\r\n                        stack: \"0\",\r\n                      },\r\n                   \r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n              <Col>\r\n                  {/* <Row className=\"box mb-2\">\r\n            <div\r\n                className=\"py-2 ml-4\"\r\n              >\r\n                Global Statistics\r\n              </div>\r\n              </Row> */}\r\n\r\n          \r\n                </Col>\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"100vh\" }} className=\"px-3\">\r\n            <Col\r\n              className=\"subtitle\"\r\n              style={{\r\n                height: \"100%\",\r\n                overflowY: \"scroll\",\r\n              }}\r\n            >\r\n              <Row className=\"mb-2\">\r\n                <Col className=\"box pt-2 mr-2\">\r\n                  <h1>\r\n                    {\" \"}\r\n                    <CountUp\r\n                      start={deathsGlobal - 3}\r\n                      end={deathsGlobal - 0}\r\n                      duration={0.3}\r\n                      separator=\",\"\r\n                      decimals={1}\r\n                    />\r\n                    {deathsGlobal[0] / 1000 >= deathsGlobal[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#bb2124\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#22bb33\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}{\" \"}\r\n                    <h5 className=\"\">Deaths/1k</h5>\r\n                  </h1>\r\n                </Col>\r\n\r\n                <Col className=\"\">\r\n                  <Row style={{}} className=\"box pt-1 \">\r\n                    {\" \"}\r\n                    <h3 className=\"\">{recoveredGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Recovered/1k</h6>\r\n                  </Row>\r\n                  <Row style={{}} className=\"box mt-2 pt-1\">\r\n                    {\" \"}\r\n                    <h3>{criticalGlobal}</h3>&nbsp;\r\n                    <h6 className=\"pt-2\">Critical/1k</h6>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* <BarGraph /> */}\r\n              <Row className=\"box px-3\">\r\n                <div\r\n                  className=\"pt-1 pb-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Deaths Per Continent\r\n                </div>\r\n\r\n                <HorizontalBar\r\n                  // pointStyle=\"star\"\r\n                  height={150}\r\n                  width={300}\r\n                  options={{\r\n                    legend: {\r\n                      display: true,\r\n                      position: \"bottom\",\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    tooltips: {\r\n                      yPadding: 10,\r\n                      xPadding: 10,\r\n                      xAlign: \"left\",\r\n                      cornerRadius: 2,\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n\r\n                    //   scales:{\r\n                    //     xAxes:[{\r\n                    //        ticks:{\r\n                    //        display: false\r\n                    //       }\r\n                    //     }]\r\n                    // },\r\n\r\n                    scales: {\r\n                      xAxes: [\r\n                        {\r\n                          // ticks: {\r\n                          //   min: 0,\r\n                          //   max: 3,\r\n                          //   stepWidth: 2,\r\n                          //   stepSize: 2,\r\n                          // },\r\n                          ticks: {\r\n                            display: false,\r\n                          },\r\n                        },\r\n                      ],\r\n                      yAxes: [\r\n                        {\r\n                          // type: \"logarithmic\",\r\n                          ticks: {\r\n                            // min: 0,\r\n                            // max: 3,\r\n                            // stepWidth: 100,\r\n                            stepSize: 1000,\r\n                          },\r\n                        },\r\n                      ],\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: continentNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Deaths\",\r\n                        data: deathsPerContinent,\r\n                        backgroundColor: colorCases,\r\n                        stack: \"0\",\r\n                      },\r\n\r\n                      // {\r\n                      //   label: \"Tests\",\r\n                      //   data: recoveredPerContinent,\r\n                      //   backgroundColor: 'teal',\r\n                      //   stack: \"0\",\r\n                      // },\r\n                      {\r\n                        label: \"Critical\",\r\n                        data: criticalPerContinent,\r\n                        backgroundColor: \"orange\",\r\n                        stack: \"0\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col>\r\n                  {/* <Row className=\"box mb-2\">\r\n            <div\r\n                className=\"py-2 ml-4\"\r\n              >\r\n                Global Statistics\r\n              </div>\r\n              </Row> */}\r\n\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Critical\r\n                      {((criticalGlobal / casesGlobal) * 100).toFixed(2) <=\r\n                      0.025 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalGlobal / casesGlobal) * 100 >= 0.045 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {((criticalGlobal / casesGlobal) * 100).toFixed(2)}%\r\n                      </strong>\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Today\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        +\r\n                        {numberWithCommas(\r\n                          (todayGlobalDeaths / 1000).toFixed(0) + \"k\"\r\n                        )}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"subtitle mt-2\">\r\n                    <Col className=\"box py-4 mr-2\">\r\n                      Positive\r\n                      {(criticalMillion[index] / casesMillion[index]) * 100 <=\r\n                      0.005 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          LOW\r\n                        </Badge>\r\n                      ) : (criticalMillion[index] / casesMillion[index]) *\r\n                          100 >=\r\n                        0.015 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          HIGH\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong>\r\n                        {numberWithCommas(\r\n                          ((casesGlobal / testsGlobal) * 100).toFixed(2) + \"%\"\r\n                        )}\r\n                      </strong>\r\n                      {/* <Doughnut\r\n                    width={170}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0,\r\n                        },\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Tested\", \"Untested\"],\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            testsG,\r\n                          casesGlobal,\r\n                          ],\r\n                          backgroundColor: colorCases,\r\n                        },\r\n                      ],\r\n                    }}\r\n                  ></Doughnut> */}\r\n                    </Col>\r\n                    <Col className=\"box py-4\">\r\n                      Tests\r\n                      {(tests[index] / population[index]) * 100 <= 100 ? (\r\n                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">\r\n                          POOR\r\n                        </Badge>\r\n                      ) : (tests[index] / population[index]) * 100 >= 250 ? (\r\n                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">\r\n                          GOOD\r\n                        </Badge>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                      <strong className=\"\">\r\n                        {(testsG / populationGlobal).toFixed(2)}pp\r\n                        {/* <i className=\"fa fa-male\"></i> */}\r\n                      </strong>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n\r\n                <Col\r\n                  className=\"box ml-2 px-0\"\r\n                  style={{ color: \"#fff\", fontSize: \"14px\", maxWidth: \"50%\" }}\r\n                >\r\n                  {/* <div\r\n                className=\"pt-2 pb-4 ml-2\"\r\n              \r\n              >\r\n                Continent Analysis\r\n              </div> */}\r\n                  <Doughnut\r\n                    // width={200}\r\n                    height={250}\r\n                    data={{\r\n                      datasets: [\r\n                        {\r\n                          data: [\r\n                            deaths1.length,\r\n                            deaths2.length,\r\n                            deaths3.length,\r\n                            deaths4.length,\r\n                            deaths5.length,\r\n                          ],\r\n                          backgroundColor: colorsPie,\r\n                          label: \"Deaths\",\r\n                          stack: \"0\",\r\n                        },\r\n                        {\r\n                          data: [\r\n                            active1.length,\r\n                            active2.length,\r\n                            active3.length,\r\n                            active4.length,\r\n                            active5.length,\r\n                          ],\r\n                          backgroundColor: [\"#ffb300\",\"#ffa400\",\"#ff9400\",\"#ff8300\",\"#ff7200\"],\r\n                          label: \"Active\",\r\n                          stack: \"0\",\r\n                        },\r\n                      ],\r\n\r\n                      labels: [\r\n                        \"Lowest\",\r\n                        \"Lower\",\r\n                        \"Average\",\r\n                        \"Higher\",\r\n                        \"Highest\",\r\n                      ],\r\n                    }}\r\n                    options={{\r\n                      elements: {\r\n                        arc: {\r\n                          // borderWidth: 0.5,\r\n                          // borderColor: \"turquoise\",\r\n                          borderColor: \"#212529\",\r\n                          borderWidth: 1,\r\n                        },\r\n                      },\r\n                      responsive: true,\r\n                      maintainAspectRatio: true,\r\n                      legend: {\r\n                        display: false,\r\n                        position: \"\",\r\n                      },\r\n                      title: {\r\n                        display: false,\r\n                        text: \"\",\r\n                      },\r\n                      animation: {\r\n                        animateScale: true,\r\n                        animateRotate: true,\r\n                      },\r\n                      tooltips: {\r\n                        backgroundColor: \"#212529\",\r\n                        borderColor: \"turquoise\",\r\n                        borderWidth: 1,\r\n                        cornerRadius: 2,\r\n                        displayColors: true,\r\n                        bodyFontSize: 12,\r\n                        labels: {\r\n                          usePointStyle: true,\r\n                        },\r\n                        callbacks: {\r\n                          label: function (item, data) {\r\n                            console.log(data.labels, item);\r\n                            return (\r\n                              data.datasets[item.datasetIndex].label +\r\n                              \": \" +\r\n                              data.labels[item.index] +\r\n                              \": \" +\r\n                              data.datasets[item.datasetIndex].data[item.index] \r\n                          \r\n                            );\r\n                          },\r\n                        },\r\n                      },\r\n                    }}\r\n                  ></Doughnut>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"subtitle box mt-2 px-0\">\r\n                {/* <Col className=\"box \" style={{maxWidth: \"50%\"}}> */}\r\n                <div\r\n                  className=\"py-1\"\r\n                  style={{ color: \"grey\", fontSize: \"14px\" }}\r\n                >\r\n                  Cases Trend\r\n                </div>\r\n                <LineGraph casesType={casesType} />\r\n                {/* </Col> */}\r\n                {/* <Col className=\"box ml-2\" style={{maxWidth: \"50%\"}}>\r\n            </Col> */}\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n\r\n  ];\r\n\r\n  const TabsMenu = () => {\r\n\r\n    const [tab, setTab] = useState(1);\r\n    const TabItem = ({\r\n      icon = \"\",\r\n      title = \"\",\r\n\r\n      onItemClicked = () =>\r\n        console.error(\"You passed no action to the component\"),\r\n      isActive = false,\r\n    }) => {\r\n      return (\r\n        <div\r\n          className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n          onClick={onItemClicked}\r\n        >\r\n          <p style={{ display: \"flex\" }} className=\"tabitem__title\">\r\n            {title}\r\n            {icon}{\" \"}\r\n          </p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItem\r\n              key={id}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setTab(id)}\r\n              isActive={tab === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return tab === id ? content : \"\";\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={state ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\">\r\n          <Container>\r\n            <Row className=\"title my-1\"  style={{ boxShadow: \"2px 2px 2px 1px  rgb(0 0 0 / 10%)\" }}>\r\n              <Col xs=\"auto\" className=\"pl-3\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                  className=\"\"\r\n                >\r\n                  {\" \"}\r\n                  {region}&nbsp;\r\n                  <Button\r\n                    style={{}}\r\n                    className=\"button close  \"\r\n                    onClick={toggleSearch}\r\n                    id=\"global\"\r\n                    variant=\"outline-info\"\r\n                  >\r\n                    <h5>\r\n                      {\" \"}\r\n                      <i className=\"fa fa-filter\"></i>\r\n                    </h5>\r\n                  </Button>\r\n                </Animated>\r\n              </Col>\r\n\r\n              <Col className=\" pr-2 \">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    onClick={handleClose}\r\n                    variant=\"outline-info\"\r\n                    className=\"close button\"\r\n                  >\r\n                    <h5>\r\n                      {\" \"}\r\n                      <i className=\"fa fa-close\"></i>\r\n                    </h5>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <TabsMenu\r\n              countries={countries}\r\n              key={index}\r\n              index={index}\r\n              region={region}\r\n              casesMillion={casesMillion}\r\n              activeMillion={activeMillion}\r\n              criticalMillion={criticalMillion}\r\n              deathsMillion={deathsMillion}\r\n              tests={tests}\r\n              tabItems={tabItems}\r\n            />\r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\r\n  \"#6a5dfc\",\r\n  \"#a13ed5\",\r\n  \"#ca32ad\",\r\n  \"#e72585\",\r\n  \"#ff125e\",\r\n];\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nconst DoughnutCases = ({\r\n  casesMillion,\r\n  activeMillion,\r\n  index,\r\n  colorsPie,\r\n  continentCountries,\r\n  colorActive,\r\n  region\r\n}) => {\r\n  // Create strata for Cases\r\n  const cases1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 < 50\r\n  );\r\n  // const c1 = data.datasets[item.datasetIndex].data[item.index];\r\n  const cases2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 50 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 100\r\n  );\r\n  const cases3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 100 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 150\r\n  );\r\n  const cases4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.casesPerOneMillion / 1000 >= 150 &&\r\n      selectedCountry.casesPerOneMillion / 1000 < 350\r\n  );\r\n  const cases5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.casesPerOneMillion / 1000 > 350\r\n  );\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 < 5\r\n  );\r\n  const active2 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 5 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 10\r\n  );\r\n  const active3 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 10 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 15\r\n  );\r\n  const active4 = continentCountries.filter(\r\n    (selectedCountry) =>\r\n      selectedCountry.activePerOneMillion / 1000 >= 15 &&\r\n      selectedCountry.activePerOneMillion / 1000 < 35\r\n  );\r\n  const active5 = continentCountries.filter(\r\n    (selectedCountry) => selectedCountry.activePerOneMillion / 1000 > 35\r\n  );\r\n\r\n  return (\r\n<>\r\n      <div\r\n        className=\"pb-5\"\r\n        style={{\r\n          position: \"absolute\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          color: \"#ccc\",\r\n        }}\r\n      >\r\n        {activeMillion[index] / 1000 < 5 ? (\r\n          <h6>Mild</h6>\r\n        ) : activeMillion[index] / 1000 < 10 ? (\r\n          <h6 >Limited</h6>\r\n        ) : activeMillion[index] / 1000 < 15 ? (\r\n          <h6>Moderate</h6>\r\n        ) : activeMillion[index] / 1000 < 35 ? (\r\n          <h6>Serious</h6>\r\n        ) : (\r\n          <h6>Extreme</h6>\r\n        )}\r\n      </div>\r\n\r\n      {/* <h6 className=\"py-2 \" style={{ color: \"#ccc\", fontSize: \"14px\" }}>\r\n       {region} Analysis: {continentCountries.length}\r\n      </h6> */}\r\n   \r\n\r\n \r\n      <div style={{ zIndex: 1 }}>\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: [\r\n                  cases1.length,\r\n                  cases2.length,\r\n                  cases3.length,\r\n                  cases4.length,\r\n                  cases5.length,\r\n                ],\r\n                backgroundColor: colorsPie,\r\n                label: \"Cases\",\r\n                stack: \"0\",\r\n              },\r\n              {\r\n                data: [\r\n                  active1.length,\r\n                  active2.length,\r\n                  active3.length,\r\n                  active4.length,\r\n                  active5.length,\r\n                ],\r\n                backgroundColor: [\"#ffb300\",\"#ffa400\",\"#ff9400\",\"#ff8300\",\"#ff7200\"],\r\n                label: \"Active\",\r\n                stack: \"0\",\r\n              },\r\n            ],\r\n\r\n            labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n          }}\r\n          options={{\r\n            elements: {\r\n              arc: {\r\n                // borderWidth: 0.5,\r\n                // borderColor: \"turquoise\",\r\n                borderColor: \"#212529\",\r\n                borderWidth: 1,\r\n              },\r\n            },\r\n            responsive: true,\r\n            maintainAspectRatio: true,\r\n            legend: {\r\n              display: false,\r\n              position: \"\",\r\n            },\r\n            title: {\r\n              display: false,\r\n              text: \" \"\r\n             \r\n            },\r\n            animation: {\r\n              animateScale: true,\r\n              animateRotate: true,\r\n            },\r\n            tooltips: {\r\n              backgroundColor: \"#212529\",\r\n              borderColor: \"turquoise\",\r\n              borderWidth: 1,\r\n              cornerRadius: 2,\r\n              displayColors: true,\r\n              bodyFontSize: 12,\r\n              labels: {\r\n                usePointStyle: true,\r\n              },\r\n              callbacks: {\r\n                label: function (item, data) {\r\n                  console.log(data.labels, item);\r\n                  return (\r\n                    data.datasets[item.datasetIndex].label +\r\n                    \": \" +\r\n                    data.labels[item.index] +\r\n                    \": \" +\r\n                    data.datasets[item.datasetIndex].data[item.index]\r\n                  );\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        ></Doughnut>\r\n   \r\n  \r\n\r\n    \r\n  \r\n     \r\n      </div>\r\n      <Row className=\"px-2 pt-4\" >\r\n      <h6 className=\"pb-0\">Countries Grouped by Severity</h6>  \r\n     \r\n                </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DoughnutCases;\r\n\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { Row, Button } from \"react-bootstrap\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\n\r\nconst HorizontalChart = ({ countryNames, continentCountries }) => {\r\n  const [continentCountriesSorted, setSampleData] = useState(\r\n    continentCountries.sort((a, b) =>\r\n      a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1\r\n    )\r\n  );\r\n  const [sorted1, setSorted1] = useState();\r\n  const [sorted2, setSorted2] = useState();\r\n  const [sorted3, setSorted3] = useState();\r\n  const [sorted4, setSorted4] = useState();\r\n\r\n  useEffect(() => {\r\n    setSampleData(continentCountriesSorted);\r\n    setSorted1(!sorted1);\r\n    setSorted2(!sorted2);\r\n    setSorted3(!sorted3);\r\n    setSorted4(!sorted4);\r\n  }, []);\r\n\r\n  function handleSortActive() {\r\n    const sortedData = sorted1\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.activePerOneMillion < b.activePerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.activePerOneMillion > b.activePerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted1(!sorted1);\r\n  }\r\n\r\n  function handleSort() {\r\n    const sortedData = sorted2\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.casesPerOneMillion > b.casesPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.casesPerOneMillion < b.casesPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted2(!sorted2);\r\n  }\r\n\r\n  function handleSortTests() {\r\n    const sortedData = sorted3\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.testsPerOneMillion < b.testsPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.testsPerOneMillion > b.testsPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted3(!sorted3);\r\n  }\r\n\r\n  function handleSortDeaths() {\r\n    const sortedData = sorted4\r\n      ? [...continentCountries].sort((a, b) => {\r\n          return a.deathsPerOneMillion < b.deathsPerOneMillion ? 1 : -1;\r\n        })\r\n      : [...continentCountries].sort((a, b) => {\r\n          return a.deathsPerOneMillion > b.deathsPerOneMillion ? 1 : -1;\r\n        });\r\n\r\n    setSampleData(sortedData);\r\n    setSorted4(!sorted4);\r\n  }\r\n\r\n  const countryNamesSort = continentCountriesSorted.map(\r\n    (selectedCountry) => selectedCountry.country\r\n  );\r\n\r\n\r\n \r\n\r\n  const casesPerMillionSorted = continentCountriesSorted.map(\r\n    (selectedCountry) => (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n\r\n  const testsPerMillionSorted = continentCountriesSorted.map(\r\n    (selectedCountry) => (selectedCountry.testsPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  const activePerMillionSorted = continentCountriesSorted.map(\r\n    (selectedCountry) => (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n\r\n  const deathsPerMillionSorted = continentCountriesSorted.map(\r\n    (selectedCountry) => (selectedCountry.deathsPerOneMillion / 1000).toFixed(3)\r\n  );\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerMillionSorted.length; i++) {\r\n    if (casesPerMillionSorted[i] < 50) {\r\n      colorCases.push(\"#885dfc\");\r\n    }\r\n    if (casesPerMillionSorted[i] >= 50 && casesPerMillionSorted[i] < 100) {\r\n      colorCases.push(\"#a13ed5\");\r\n    }\r\n    if (casesPerMillionSorted[i] >= 100 && casesPerMillionSorted[i] < 150) {\r\n      colorCases.push(\"#ca32ad\");\r\n    }\r\n    if (casesPerMillionSorted[i] >= 150 && casesPerMillionSorted[i] < 350) {\r\n      colorCases.push(\"#e72585\");\r\n    }\r\n    if (casesPerMillionSorted[i] >= 350) {\r\n      colorCases.push(\"#ff125e\");\r\n    }\r\n  }\r\n\r\n  const colorActiv = [];\r\n  for (let i = 0; i < activePerMillionSorted.length; i++) {\r\n    if (activePerMillionSorted[i] < 5) {\r\n      colorActiv.push(\"#ffb300\");\r\n    }\r\n    if (activePerMillionSorted[i] >= 5 && activePerMillionSorted[i] < 10) {\r\n      colorActiv.push(\"#ffa400\");\r\n    }\r\n    if (activePerMillionSorted[i] >= 10 && activePerMillionSorted[i] < 15) {\r\n      colorActiv.push(\"#ff9400\");\r\n    }\r\n    if (activePerMillionSorted[i] >= 15 && activePerMillionSorted[i] < 35) {\r\n      colorActiv.push(\"#ff8300\");\r\n    }\r\n    if (activePerMillionSorted[i] >= 35) {\r\n      colorActiv.push(\"#ff7200\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row\r\n      className={\"\"}\r\n      style={{\r\n        color: \"#fff\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Row className=\"\">\r\n        <strong style={{ color: \"\", fontSize: \"14px\" }} className=\"pt-1 \">\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-0 mx-1\"\r\n            onClick={handleSortDeaths}\r\n            style={{ color: \"#fff\" }}\r\n          >\r\n            {sorted4 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Deaths\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mx-1\"\r\n            onClick={handleSortActive}\r\n            style={{ color: \"#fff\" }}\r\n          >\r\n            {sorted1 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Active\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mx-1\"\r\n            onClick={handleSort}\r\n            style={{ color: \"#fff\" }}\r\n          >\r\n            {sorted2 ? (\r\n              <i className=\"fa fa-arrow-up icon\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-down icon\"></i>\r\n            )}\r\n            &nbsp;Cases\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline-dark\"\r\n            className=\"sort p-1 mx-1\"\r\n            onClick={handleSortTests}\r\n            style={{ color: \"#fff\" }}\r\n          >\r\n            {sorted3 ? (\r\n              <i className=\"fa fa-arrow-down\"></i>\r\n            ) : (\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            )}\r\n            &nbsp;Tests\r\n          </Button>\r\n        </strong>\r\n      </Row>\r\n      <HorizontalBar\r\n        data={{\r\n          labels: countryNamesSort ,\r\n          type: \"bar\",\r\n          datasets: [\r\n            {\r\n              label: \"Deaths\",\r\n              data: deathsPerMillionSorted,\r\n              backgroundColor: \"#646464\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Active\",\r\n              data: activePerMillionSorted,\r\n              backgroundColor: colorActiv,\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Cases\",\r\n              data: casesPerMillionSorted,\r\n              backgroundColor: colorCases,\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n            {\r\n              label: \"Tests\",\r\n              data: testsPerMillionSorted,\r\n              backgroundColor: \"teal\",\r\n              borderColor: \"#212529\",\r\n              borderWidth: 1,\r\n              stack: \"0\",\r\n            },\r\n          ],\r\n        }}\r\n        height={countryNames.length * 25}\r\n        options={{\r\n         \r\n          tooltips: {\r\n            yPadding: 10,\r\n            xPadding: 10,\r\n            xAlign: \"right\",\r\n            cornerRadius: 2,\r\n            backgroundColor: \"#212529\",\r\n            borderColor: \"turquoise\",\r\n            borderWidth: 1,\r\n            displayColors: true,\r\n            bodyFontSize: 12,\r\n            labels: {\r\n              usePointStyle: true,\r\n            },\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          hover: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              fontSize: 10,\r\n              fontColor: \"#fff\",\r\n              padding: 15,\r\n            },\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 5,\r\n              top: 0,\r\n              bottom: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                display: false,\r\n                type: \"logarithmic\",\r\n              },\r\n            ],\r\n          //   yAxes: [{\r\n          //     ticks: {\r\n          //         callback: function(value) { \r\n          //              return value + ' <a href=\"https://www.w3schools.com/\">(Show me)</a> '\r\n          //         }\r\n          //     },\r\n          //            onClick: function(e) {\r\n          //             return e + ' <a href=\"https://www.w3schools.com/\">(Show me)</a> '\r\n\r\n         \r\n          // },\r\n            \r\n          // }]\r\n          },\r\n        }}\r\n      />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default HorizontalChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { HorizontalBar, Line, Doughnut } from \"react-chartjs-2\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport DoughnutCases from \"./DoughnutCases\";\r\nimport DoughnutDeaths from \"./DoughnutDeaths\";\r\nimport HorizontalChart from \"./HorizontalChart\";\r\n\r\nconst Menu = ({\r\n  countries,\r\n  region,\r\n  index,\r\n  open,\r\n  casesMillion,\r\n  activeMillion,\r\n  criticalMillion,\r\n  deathsMillion,\r\n  testsMillion,\r\n  recoveredMillion,\r\n  cases,\r\n  tests,\r\n  deaths,\r\n  critical,\r\n  active,\r\n  recovered,\r\n  population,\r\n  todayCases,\r\n  todayDeaths,\r\n  todayRecovered,\r\n  handleClose,\r\n  toggleSearch,\r\n}) => {\r\n  console.log(testsMillion, \"testsMillion\");\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(\r\n    (country) => country.continent === region\r\n  );\r\n  // Map Country Names && country.population > 1000000\r\n\r\n  const countryNames = continentCountries.map(\r\n    (selectedCountry) => selectedCountry.country\r\n  );\r\n\r\n  const [continentCountrys, setSampleData] = useState(continentCountries);\r\n  const [sorted, setSorted] = useState(false);\r\n\r\n  //Max Stats\r\n  const max = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.casesPerOneMillion)\r\n  );\r\n\r\n  // console.log(max, \"MAX\");\r\n\r\n  const maxName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.casesPerOneMillion === max\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxActive = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.activePerOneMillion)\r\n  );\r\n  // console.log(continentCountries);\r\n\r\n  const maxActiveName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.activePerOneMillion === maxActive\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxTests = Math.max(\r\n    ...continentCountries.map((item) => item.testsPerOneMillion)\r\n  );\r\n\r\n  const maxTestsName = continentCountries\r\n    .filter(\r\n      (country) =>\r\n        //   country.country.length <= 12 &&\r\n        country.testsPerOneMillion === maxTests\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxCritical = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.criticalPerOneMillion)\r\n  );\r\n  const maxCriticalName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.criticalPerOneMillion === maxCritical\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxDeaths = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.deathsPerOneMillion)\r\n  );\r\n  const maxDeathsName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.deathsPerOneMillion === maxDeaths\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  const maxRecovered = Math.max(\r\n    ...continentCountries\r\n      //   .filter((country) => country.country.length <= 12)\r\n      .map((item) => item.recoveredPerOneMillion)\r\n  );\r\n  const maxRecoveredName = countries\r\n    .filter(\r\n      (country) =>\r\n        country.continent === region &&\r\n        // country.country.length <= 12 &&\r\n        country.recoveredPerOneMillion === maxRecovered\r\n    )\r\n    .map((selectedCountry) => selectedCountry.country);\r\n\r\n  //   console.log(deathsPerOneMillion, \"deathsPerOneMillion\");\r\n  const mortalityRate = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsPerOneMillion /\r\n        selectedCountry.casesPerOneMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n\r\n  const mortalityMillion = continentCountries.map((selectedCountry) =>\r\n    (\r\n      (selectedCountry.deathsMillion / selectedCountry.casesMillion) *\r\n      100\r\n    ).toFixed(2)\r\n  );\r\n\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.casesPerOneMillion / 1000).toFixed(1)\r\n  );\r\n  const deathsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.deathsPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  // console.log(deathsPerOneMillion, 'deathsPerOneMillion')\r\n  const activePerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.activePerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const criticalPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.criticalPerOneMillion / 1000).toFixed(2)\r\n  );\r\n  const testsPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.testsPerOneMillion / 1000).toFixed(0)\r\n  );\r\n  const recoveredPerOneMillion = continentCountries.map((selectedCountry) =>\r\n    (selectedCountry.recoveredPerOneMillion / 1000).toFixed(0)\r\n  );\r\n\r\n  //Color Schemes\r\n  const colorMortality = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) {\r\n      colorMortality.push(\"#5748ff\");\r\n    }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) {\r\n      colorMortality.push(\"#a13ed5\");\r\n    }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) {\r\n      colorMortality.push(\"#ca32ad\");\r\n    }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) {\r\n      colorMortality.push(\"#e72585\");\r\n    }\r\n    if (mortalityRate[i] >= 6.0) {\r\n      colorMortality.push(\"#ff125e\");\r\n    }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < 0.5) {\r\n      colorDeaths.push(\"#444e86\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 0.5 && deathsPerOneMillion[i] < 1) {\r\n      colorDeaths.push(\"#955196\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) {\r\n      colorDeaths.push(\"#ffa600\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 3.5) {\r\n      colorDeaths.push(\"#ff6e54\");\r\n    }\r\n    if (deathsPerOneMillion[i] >= 3.5) {\r\n      colorDeaths.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorCase = [];\r\n  for (let i = 0; i < casesMillion.length; i++) {\r\n    if (casesMillion[i] / 1000 < 50) {\r\n      colorCase.push(\"#6a5dfc\");\r\n      //   blue\r\n    }\r\n    if (casesMillion[i] / 1000 >= 50 && casesMillion[i] / 1000 < 100) {\r\n      colorCase.push(\"#a13ed5\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 100 && casesMillion[i] / 1000 < 150) {\r\n      colorCase.push(\"#ca32ad\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 150 && casesMillion[i] / 1000 < 350) {\r\n      colorCase.push(\"#e72585\");\r\n    }\r\n    if (casesMillion[i] / 1000 >= 350) {\r\n      colorCase.push(\"#ff125e\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  const colorDeath = [];\r\n  for (let i = 0; i < deathsMillion.length; i++) {\r\n    if (deathsMillion[i] / 1000 < 0.5) {\r\n      colorDeath.push(\"#5d67a1\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 0.5 && deathsMillion[i] / 1000 < 1.0) {\r\n      colorDeath.push(\"#955196\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.0 && deathsMillion[i] / 1000 < 1.5) {\r\n      colorDeath.push(\"#ffa600\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 1.5 && deathsMillion[i] / 1000 < 3.5) {\r\n      colorDeath.push(\"#cf8c11\");\r\n    }\r\n    if (deathsMillion[i] / 1000 >= 3.5) {\r\n      colorDeath.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const colorActivity = [];\r\n  for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n    if (casesPerOneMillion[i] < 50) {\r\n      colorActivity.push(\"#00a5f1\");\r\n      //   blue\r\n    }\r\n    if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) {\r\n      colorActivity.push(\"#ad93f9\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) {\r\n      colorActivity.push(\"#ffa600\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) {\r\n      colorActivity.push(\"#ff7972\");\r\n    }\r\n    if (casesPerOneMillion[i] >= 350) {\r\n      colorActivity.push(\"#ff76c8\");\r\n      //   pink\r\n    }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activeMillion.length; i++) {\r\n    if (activeMillion[i] / 1000 < 5) {\r\n      colorActive.push(\"#5d67a1\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 5 && activeMillion[i] / 1000 < 10) {\r\n      colorActive.push(\"#955196\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 10 && activeMillion[i] / 1000 < 15) {\r\n      colorActive.push(\"#cf8c11\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 15 && activeMillion[i] / 1000 < 35) {\r\n      colorActive.push(\"#ff6e54\");\r\n    }\r\n    if (activeMillion[i] / 1000 >= 35) {\r\n      colorActive.push(\"#dd5182\");\r\n    }\r\n  }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: \"\",\r\n      icon: \"\",\r\n      content: (\r\n        <>\r\n          <Row style={{ height: \"95vh\", border: \"\" }} className=\" \">\r\n            {/* COLUMN ONE */}\r\n\r\n            <Col\r\n              className=\"subtitle\"\r\n              style={{ maxWidth: \"100%\", overflowY: \"scroll\", height: \"100%\" }}\r\n            >\r\n               <Row className=\"mb-2\">\r\n                <Col className=\"pt-3 mr-2\">\r\n                  <h1 className=\"mb-0\">\r\n                    {(casesMillion[index] / 1000).toFixed(1)}\r\n                    {casesPerOneMillion[0] / 1000 <=\r\n                    casesPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: colorCase[index] }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h1>\r\n                  <h6 style={{ color: colorCase[index] }}>Total Cases/1k</h6>\r\n                  {/* {casesMillion[index] / 1000 <= 50 ? (\r\n                    <Badge\r\n                      variant=\"success\"\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                    >\r\n                      MILD\r\n                    </Badge>\r\n                  ) : casesMillion[index] / 1000 <= 100 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                    >\r\n                      LIMITED\r\n                    </Badge>\r\n                  ) : casesMillion[index] / 1000 <= 150 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                    >\r\n                      MODERATE\r\n                    </Badge>\r\n                  ) : casesMillion[index] / 1000 <= 350 ? (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                    >\r\n                      SERIOUS\r\n                    </Badge>\r\n                  ) : (\r\n                    <Badge\r\n                      text=\"dark\"\r\n                      className=\"badge\"\r\n                      style={{ zIndex: 1, backgroundColor: colorCase[index] }}\r\n                    >\r\n                      EXTREME\r\n                    </Badge>\r\n                  )} */}\r\n                </Col>\r\n       <Col className=\"pt-4\">\r\n                <Animated animationIn=\"fadeInUp\" isVisible={true}>\r\n                  <h6 style={{ color: \"#fff\" }}>Today&nbsp;</h6>\r\n                  <h3 className=\"mb-0\">\r\n                    +\r\n                    {numberWithCommas(\r\n                      (todayCases[index] / 1000).toFixed(1) + \"k\"\r\n                    )}\r\n                  </h3>\r\n                </Animated>\r\n                </Col>\r\n             \r\n              </Row>\r\n\r\n              <Row className=\"subtitle pt-1 mt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={110}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: \"bottom\",\r\n                    },\r\n                    scales: {\r\n                      yAxes: [\r\n                        {\r\n                          // display: false,\r\n                          // stacked: true,\r\n                          type: \"logarithmic\",\r\n                          display: false,\r\n                        },\r\n                      ],\r\n                      xAxes: [\r\n                        {\r\n                          // display: false,\r\n                        },\r\n                      ],\r\n                    },\r\n                    tooltips: {\r\n                      backgroundColor: \"#212529\",\r\n                      borderColor: \"turquoise\",\r\n                      borderWidth: 1,\r\n                      cornerRadius: 2,\r\n                      displayColors: true,\r\n                      bodyFontSize: 12,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                      },\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"Active\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"#ff8300\",\r\n                      },\r\n                      {\r\n                        label: \"Cases\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: colorCase[index],\r\n                      },\r\n                      {\r\n                        label: \"Tests\",\r\n                        data: testsPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.05)\",\r\n                        borderColor: \"teal\",\r\n                      },\r\n                    ],\r\n                  }}\r\n                />\r\n              </Row>\r\n\r\n              <Row\r\n                className=\"subtitle pt-4\"\r\n                style={{ display: \"flex\", justifyContent: \"space-around\" }}\r\n              >\r\n                {/* {deathsMillion[index] / 1000 < 0.5 ? (\r\n                  <Badge className=\"mild\">Mild </Badge>\r\n                ) : deathsMillion[index] / 1000 < 1 ? (\r\n                  <Badge className=\"limited\">Limited </Badge>\r\n                ) : deathsMillion[index] / 1000 < 1.5 ? (\r\n                  <Badge className=\"moderate\">Moderate </Badge>\r\n                ) : deathsMillion[index] / 1000 < 3.5 ? (\r\n                  <Badge className=\"serious\">Serious </Badge>\r\n                ) : (\r\n                  <Badge className=\"extreme\">Extreme </Badge>\r\n                )} */}\r\n                {/* <h6>deaths.&nbsp;</h6> */}\r\n\r\n                {/* {activeMillion[index] / 1000 < 5 ? (\r\n                  <Badge className=\"mild\">&nbsp;Mild </Badge>\r\n                ) : activeMillion[index] / 1000 < 10 ? (\r\n                  <Badge className=\"limited\">&nbsp;Limited </Badge>\r\n                ) : activeMillion[index] / 1000 < 15 ? (\r\n                  <Badge className=\"moderate\">&nbsp;Moderate </Badge>\r\n                ) : activeMillion[index] / 1000 < 35 ? (\r\n                  <Badge className=\"serious\">&nbsp;Serious </Badge>\r\n                ) : (\r\n                  <Badge className=\"extreme\">&nbsp;Extreme </Badge>\r\n                )} */}\r\n                {/* <h6>&nbsp;activity.&nbsp;</h6> */}\r\n\r\n                {/* {testsMillion[index] / 1000 < 100 ? (\r\n                  <Badge variant=\"dark\">Very Low</Badge>\r\n                ) : testsMillion[index] / 1000 < 1000 ? (\r\n                  <Badge variant=\"dark\">Low</Badge>\r\n                ) : testsMillion[index] / 1000 < 1500 ? (\r\n                  <Badge variant=\"dark\">Average</Badge>\r\n                ) : testsMillion[index] / 1000 < 3500 ? (\r\n                  <Badge variant=\"dark\">High</Badge>\r\n                ) : (\r\n                  <Badge variant=\"dark\">Very High</Badge>\r\n                )} */}\r\n                {/* <h6>&nbsp;testing.</h6> */}\r\n              </Row>\r\n\r\n              <Row className=\"\">\r\n                <Col className=\"px-2 pt-0 mr-2\">\r\n                  <h3 className=\"\">\r\n                    {(deathsMillion[index] / 1000).toFixed(2)}\r\n                    {deathsPerOneMillion[0] / 1000 <=\r\n                    deathsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"slategrey\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"slategrey\" }}>Deaths/1k</h6>\r\n                </Col>\r\n                <Col className=\" px-2 pt-0 mr-2\">\r\n                  <h3 className=\"\">\r\n                    {(activeMillion[index] / 1000).toFixed(2)}\r\n                    {activePerOneMillion[0] / 1000 <=\r\n                    activePerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"#ff9400\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"#ff9400\" }}>Active/1k</h6>\r\n\r\n                  <h6></h6>\r\n                </Col>\r\n                <Col className=\"px-2 pt-0\">\r\n                  <h3 className=\"\">\r\n                    {(testsMillion[index] / 1000).toFixed(0)}\r\n                    {testsPerOneMillion[0] / 1000 <=\r\n                    testsPerOneMillion[5] / 1000 ? (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-up\"\r\n                      ></i>\r\n                    ) : (\r\n                      <i\r\n                        style={{ fontSize: \"0.7em\", color: \"teal\" }}\r\n                        className=\"fa fa-arrow-down\"\r\n                      ></i>\r\n                    )}\r\n                  </h3>\r\n                  <h6 style={{ color: \"teal\" }}>Tests/1k</h6>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row\r\n                className={\" mt-3 pb-1\"}\r\n                style={{\r\n                  color: \"#ccc\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n\r\n      \r\n                <DoughnutCases\r\n                  casesMillion={casesMillion}\r\n                  activeMillion={activeMillion}\r\n                  index={index}\r\n                  colorsPie={colorsPie}\r\n                  continentCountries={continentCountries}\r\n                  region={region}\r\n                />\r\n              </Row>\r\n\r\n              <Row className=\"subtitle mt-2\">\r\n                <Col className=\" pb-4 pt-3 px-2 mr-2\">\r\n                  <h6 style={{ color: \"slategrey\" }}>Mortality&nbsp;</h6>\r\n                  <h3 className=\"\">\r\n                    {(\r\n                      (deathsMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                </Col>\r\n                <Col className=\" pb-4 pt-3 px-2 mr-2\">\r\n                  <h6 style={{ color: \"#ff9400\" }}>Active&nbsp;</h6>\r\n                  <h3 className=\"\">\r\n                    {(\r\n                      (activeMillion[index] / casesMillion[index]) *\r\n                      100\r\n                    ).toFixed(2)}\r\n                    %\r\n                  </h3>\r\n                </Col>\r\n\r\n                <Col className=\" pb-4 pt-3 px-2\">\r\n                  <h6 className=\"\" style={{ color: \"teal\" }}>\r\n                    Positive&nbsp;\r\n                  </h6>\r\n                  <h3>\r\n                    {numberWithCommas(\r\n                      (\r\n                        (casesMillion[index] / testsMillion[index]) *\r\n                        100\r\n                      ).toFixed(2) + \"%\"\r\n                    )}\r\n                  </h3>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row style={{ display: \"flex\", justifyContent: \"center\"}}>\r\n                {/* COLUMN TWO */}\r\n                <h6\r\n                  className=\"pt-1 pb-1\"\r\n               \r\n                >\r\n                 Countries Per/1k \r\n                </h6>\r\n\r\n                <Col\r\n                  className=\"mt-2\"\r\n                  style={{\r\n                    maxWidth: \"100%\",\r\n                  }}\r\n                >\r\n                  <HorizontalChart\r\n                    countryNames={countryNames}\r\n                    activePerOneMillion={activePerOneMillion}\r\n                    colorActivity={colorActivity}\r\n                    casesPerOneMillion={casesPerOneMillion}\r\n                    // colorCases={colorCases}\r\n                    testsPerOneMillion={testsPerOneMillion}\r\n                    casesMillion={casesMillion}\r\n                    activeMillion={activeMillion}\r\n                    testsMillion={testsMillion}\r\n                    index={index}\r\n                    region={region}\r\n                    colorCase={colorCase}\r\n                    continentCountries={continentCountries}\r\n                    continentCountrys={continentCountrys}\r\n                    sorted={sorted}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const TabsMenu = () => {\r\n    const [tab, setTab] = useState(1);\r\n    const TabItem = ({\r\n      icon = \"\",\r\n      title = \"\",\r\n\r\n      onItemClicked = () =>\r\n        console.error(\"You passed no action to the component\"),\r\n      isActive = false,\r\n    }) => {\r\n      return (\r\n        <div\r\n          className={isActive ? \"tabitem\" : \"tabitem tabitem--inactive\"}\r\n          onClick={onItemClicked}\r\n        >\r\n          <p style={{ display: \"flex\" }} className=\"tabitem__title\">\r\n            {title}\r\n            {icon}{\" \"}\r\n          </p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => (\r\n            <TabItem\r\n              key={id}\r\n              icon={icon}\r\n              title={title}\r\n              onItemClicked={() => setTab(id)}\r\n              isActive={tab === id}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return tab === id ? content : \"\";\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={open ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\">\r\n          <Container>\r\n            <Row\r\n              className=\"title my-1\"\r\n              style={{ boxShadow: \"2px 2px 2px 1px  rgb(0 0 0 / 10%)\" }}\r\n            >\r\n              <Col xs=\"auto\" className=\"pl-3\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                  className=\"\"\r\n                >\r\n                  {\" \"}\r\n                  {region}&nbsp;\r\n                  <Button\r\n                    style={{}}\r\n                    className=\"button close  \"\r\n                    onClick={toggleSearch}\r\n                    id=\"global\"\r\n                    variant=\"outline-info\"\r\n                  >\r\n                    <h5>\r\n                      {\" \"}\r\n                      <i className=\"fa fa-filter\"></i>\r\n                    </h5>\r\n                  </Button>\r\n                </Animated>\r\n              </Col>\r\n\r\n              <Col className=\" pr-2 \">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    onClick={handleClose}\r\n                    variant=\"outline-info\"\r\n                    className=\"close button\"\r\n                  >\r\n                    <h5>\r\n                      {\" \"}\r\n                      <i className=\"fa fa-close\"></i>\r\n                    </h5>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <TabsMenu\r\n              countries={countries}\r\n              key={index}\r\n              index={index}\r\n              region={region}\r\n              casesMillion={casesMillion}\r\n              activeMillion={activeMillion}\r\n              criticalMillion={criticalMillion}\r\n              deathsMillion={deathsMillion}\r\n              tests={tests}\r\n              tabItems={tabItems}\r\n            />\r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nlet colorsPie = [\"#6a5dfc\", \"#a13ed5\", \"#ca32ad\", \"#e72585\", \"#ff125e\"];\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport TabsComponent from \"../misc/TabsComponent\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport CountUp from \"react-countup\";\r\nimport BarGraph from \"../misc/BarGraph\";\r\nimport LineGraph from \"./LineGraph\";\r\n\r\nconst Search = ({ region, state, handleClose }) => {\r\n  return (\r\n    <div className={state ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"side\">\r\n          <Container>\r\n            <Row className=\"title my-1\">\r\n              <Col xs=\"auto\" className=\"pl-3\">\r\n                <Animated\r\n                  animationIn=\"fadeInLeft\"\r\n                  animationOut=\"fadeOut\"\r\n                  isVisible={true}\r\n                  className=\"pl-1 pb-2\"\r\n                >\r\n                  {\" \"}\r\n                  Search&nbsp;\r\n                </Animated>\r\n              </Col>\r\n\r\n              <Col className=\" pr-2 \">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    onClick={handleClose}\r\n                    variant=\"outline-info\"\r\n                    className=\"close button\"\r\n                  >\r\n                    <h5>\r\n                      {\" \"}\r\n                      <i className=\"fa fa-close\"></i>\r\n                    </h5>\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"map-overlay\" style={{ height: \"94vh\", border: \"\" }}>\r\n              <Col style={{ overflowY: \"scroll\", height: \"100%\" }}>\r\n                <div id=\"geocoder\" className=\"geocoder\"></div>\r\n\r\n                <div className=\"title mt-4 mb-2 \">Filter</div>\r\n                <div id=\"menu\" className=\"\"></div>\r\n\r\n                <div id=\"toggle\" className=\"\"></div>\r\n\r\n                <fieldset className=\"mb-2\">\r\n                  <input\r\n                    id=\"feature-filter\"\r\n                    type=\"text\"\r\n                    placeholder=\"Filter Locations...\"\r\n                    className=\"mb-2\"\r\n                  />\r\n                </fieldset>\r\n\r\n                <div id=\"feature-listing\" className=\"listing\"></div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map2 from \"./components/Map2\";\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport Search from \"./components/Search\";\r\nimport \"./App.css\";\r\n\r\n\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\n\r\nconst initialState = {\r\n  global: false,\r\n  open: false,\r\n  region: \"\",\r\n  index: \"\",\r\n  search: false\r\n};\r\n\r\nconst App = () => {\r\n  //Fetch Continents Data\r\n  const [globaldata, setGlobal] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(GLOBAL_URL);\r\n        const globaldata = await result.json();\r\n        setGlobal([globaldata]);\r\n        // console.log(globaldata, \"globalDATA\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  //Map Continents Data\r\n  const getGlobal = (key) => {\r\n    return globaldata.map((data) => data[key]);\r\n  };\r\n\r\n  const globalCases = getGlobal(\"casesPerOneMillion\");\r\n  const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n  const globalActive = getGlobal(\"activePerOneMillion\");\r\n  const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n  const globalTests = getGlobal(\"testsPerOneMillion\");\r\n  const globalRecovered = getGlobal(\"recoveredPerOneMillion\");\r\n  // console.log(globalCases, \"globalCases\");\r\n  const populationGlobal = getGlobal(\"population\");\r\n  const testsGlobal = getGlobal(\"tests\");\r\n  const todayGlobalCases = getGlobal(\"todayCases\");\r\n  const todayGlobalDeaths = getGlobal(\"todayDeaths\");\r\n\r\n  //Fetch Continents Data\r\n  const [continents, setContinents] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        // console.log(continents, 'continents')\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n  //Map Continents Data\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n  const todayCases = getContinents(\"todayCases\");\r\n  const todayDeaths = getContinents(\"todayDeaths\");\r\n  const todayRecovered = getContinents(\"todayRecovered\");\r\n\r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n  const recoveredMillion = getContinents(\"recoveredPerOneMillion\");\r\n\r\n  const cases = getContinents(\"cases\");\r\n  const active = getContinents(\"active\");\r\n  const critical = getContinents(\"critical\");\r\n  const deaths = getContinents(\"deaths\");\r\n  const tests = getContinents(\"tests\");\r\n  const recovered = getContinents(\"recovered\");\r\n\r\n  const continentNames = getContinents(\"continent\");\r\n\r\n \r\n\r\n  //Fetch Countries Data\r\n  const [countries, setCountries] = useState([]);\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n      \r\n        const countries = await res.json();\r\n        // console.log({countries}, 'res')\r\n        setCountries([\r\n          ...countries.filter((country) => country.country.length <= 12),\r\n        ]);\r\n        // console.log(countries, 'countries')\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country));\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n  //Map Country Data\r\n  const getCountries = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n  const cont = { countries }\r\n \r\n\r\n  // const populationCountries = getCountries(\"population\");\r\n\r\n  const [state, setState] = useState(\"Asia\");\r\n\r\n  const [zoom, setZoom ] = useState([3])\r\n  const [center, setCenter ] = useState([90, 20])\r\n\r\n  // const toggle = ({ region, index }) => {\r\n  //   setState({\r\n  //     ...initialState,\r\n  //     open: true,\r\n  //     region: region,\r\n  //     index: index,\r\n  //     global: false,\r\n  //   });\r\n  // };\r\n\r\n  const toggleAsia = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Asia\",\r\n      index: 1,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleOceania = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Australia-Oceania\",\r\n      index: 4,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleEurope = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Europe\",\r\n      index: 2,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleAfrica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"Africa\",\r\n      index: 5,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleSouthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"South America\",\r\n      index: 3,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleNorthAmerica = () => {\r\n    setState({\r\n      ...initialState,\r\n      open: true,\r\n      region: \"North America\",\r\n      index: 0,\r\n      global: false,\r\n      search: false\r\n    });\r\n  };\r\n  const toggleGlobal = () => {\r\n    setState({\r\n      ...initialState,\r\n      global: true,\r\n      region: \"Global\",\r\n      index: 6,\r\n      search: false\r\n    });\r\n  };\r\n\r\n  const toggleSearch = () => {\r\n    setState({\r\n      ...initialState,\r\n      search: true,\r\n      region: \"Global\",\r\n      index: 7,\r\n      global: false\r\n    });\r\n  };\r\n\r\n  function handleClose() {\r\n    setState(!state);\r\n  }\r\n\r\n  const handleZoom = () => {\r\n    setZoom({\r\n     zoom: 6,\r\n    });\r\n  }\r\n\r\n  // const Places = () => {\r\n  //   return (\r\n  //   <div style={{position: \"absolute\", zIndex: 10 }}>\r\n  //     {countries.map((country, index) => (\r\n  //      <div><Button size=\"sm\" key={index} id={country.country}>{country.country}</Button><br/></div>\r\n  //   ))}\r\n  //   </div>\r\n  //   );\r\n  \r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      <ContinentButtons\r\n        toggleAsia={toggleAsia}\r\n        toggleEurope={toggleEurope}\r\n        // toggle={toggle}\r\n        toggleGlobal={toggleGlobal}\r\n        toggleAfrica={toggleAfrica}\r\n        toggleSouthAmerica={toggleSouthAmerica}\r\n        toggleNorthAmerica={toggleNorthAmerica}\r\n        toggleOceania={toggleOceania}\r\n        toggleSearch={toggleSearch}\r\n      />\r\n      {/* <Places /> */}\r\n\r\n      <div className=\"sidebar\">\r\n        <Menu\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          open={state.open}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          casesMillion={casesMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          deathsMillion={deathsMillion}\r\n          testsMillion={testsMillion}\r\n          recoveredMillion={recoveredMillion}\r\n          cases={cases}\r\n          tests={tests}\r\n          deaths={deaths}\r\n          critical={critical}\r\n          active={active}\r\n          recovered={recovered}\r\n          todayCases={todayCases}\r\n          todayDeaths={todayDeaths}\r\n          todayRecovered={todayRecovered}\r\n          toggleSearch={toggleSearch}\r\n        />\r\n        <GlobalMenu\r\n          state={state.global}\r\n          toggleGlobal={toggleGlobal}\r\n          handleClose={handleClose}\r\n          index={state.index}\r\n          // global={state.global}\r\n          region={state.region}\r\n          countries={countries}\r\n          continents={continents}\r\n          population={population}\r\n          continentNames={continentNames}\r\n          tests={tests}\r\n          globalCases={globalCases}\r\n          globalDeaths={globalDeaths}\r\n          globalActive={globalActive}\r\n          globalCritical={globalCritical}\r\n          globalTests={globalTests}\r\n          globalRecovered={globalRecovered}\r\n          casesMillion={casesMillion}\r\n          deathsMillion={deathsMillion}\r\n          activeMillion={activeMillion}\r\n          criticalMillion={criticalMillion}\r\n          testsMillion={testsMillion}\r\n          recoveredMillion={recoveredMillion}\r\n          populationGlobal={populationGlobal}\r\n          testsG={testsGlobal}\r\n          todayGlobalCases={todayGlobalCases}\r\n          todayGlobalDeaths={todayGlobalDeaths}\r\n          toggleSearch={toggleSearch}\r\n        />\r\n        <Search \r\n        state={state.search}\r\n        handleClose={handleClose}\r\n        />\r\n      </div>\r\n   \r\n\r\n      <Map2\r\n        countries={countries}\r\n        region={state.region}\r\n        zoom={zoom}\r\n        center={center}\r\n        handleZoom={handleZoom}\r\n        setCenter={setCenter}\r\n        cont={cont}\r\n    \r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=180\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import App2 from './App2';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    {/* <App2/> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}