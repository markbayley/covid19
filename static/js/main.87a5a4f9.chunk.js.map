{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map.js","components/GlobalMenu.js","components/Menu.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","position","Button","className","id","onClick","variant","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","casesMillion","population","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","useEffect","createDonutChart","props","offsets","counts","deaths1","deaths2","deaths3","deaths4","deaths5","total","count","push","fontSize","r0","Math","round","w","html","i","length","donutSegment","colors","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","color","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","average","reduce","next","min","item","max","averageD","minD","maxD","console","log","amr","minmr","maxmr","Map","container","current","center","zoom","cases1","cases2","cases3","cases4","cases5","colors2","pulsingDot","width","Uint8Array","size","onAdd","canvas","this","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","fillStyle","fill","getImageData","triggerRepaint","on","addImage","pixelRatio","addSource","addLayer","features","markers","markersOnScreen","isSourceLoaded","newMarkers","querySourceFeatures","feature","coords","cluster","cluster_id","marker","Marker","element","setLngLat","addTo","remove","updateMarkers","e","queryRenderedFeatures","layers","clusterId","getSource","getClusterExpansionZoom","err","easeTo","getLayer","getElementById","link","href","textContent","onclick","clickedLayer","preventDefault","stopPropagation","getLayoutProperty","setLayoutProperty","appendChild","addControl","NavigationControl","GeolocateControl","fitBoundsOptions","maxZoom","once","popup2","Popup","closeButton","closeOnClick","getCanvas","cursor","slice","undefined","lastId","popup","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","toLowerCase","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","abs","lngLat","lng","setHTML","addEventListener","flyTo","essential","ref","backgroundColor","Menu","region","global","tests","state","countries","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","continentNames","deathsMillion","activeMillion","criticalMillion","testsMillion","casesPerContinent","selectedContinent","deathsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","continentCountries","filter","continent","countryNames","selectedCountry","substring","casesPerOneMillion","deathsPerOneMillion","activePerOneMillion","lowest","criticalPerOneMillion","testsPerOneMillion","lower","higher","highest","mild","contained","moderate","serious","extreme","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","title","content","Row","icon","faArrowUp","options","legend","display","labels","datasets","label","paddingTop","Col","faArrowDown","borderColor","elements","borderWidth","colorsPie","TabsComponent","useState","active","setActive","TabItemComponent","key","onItemClicked","isActive","error","animationIn","animationOut","isVisible","Container","xs","justifyContent","open","top","faCircleDown","faCircleUp","text","paddingBottom","Badge","initialState","App","globaldata","setGlobal","a","BASE_URL","result","fetchContinents","getGlobal","continents","setContinents","getContinents","setCountries","res","String","fetchCountries","setState","toggle","GlobalMenu","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8NAiFeA,EA9EU,SAAC,GAAqH,IAAnHC,EAAkH,EAAlHA,WAAYC,EAAsG,EAAtGA,aAAcC,EAAwF,EAAxFA,cAAeC,EAAyE,EAAzEA,mBAAoBC,EAAqD,EAArDA,mBAAoBC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAEzH,OACE,yBACEC,MAAO,CACLC,MAAO,QACPC,OAAQ,QACRC,SAAU,aAGZ,kBAACC,EAAA,EAAD,CACEC,UAAU,cACVC,GAAG,OACHC,QAASd,EACTe,QAAQ,gBAER,qCAEF,kBAACJ,EAAA,EAAD,CACEC,UAAU,gBACVE,QAASb,EACTY,GAAG,SACHE,QAAQ,gBAER,uCAEF,kBAACJ,EAAA,EAAD,CACEC,UAAU,sBACVE,QAASX,EACTU,GAAG,eACHE,QAAQ,gBAER,8CAEF,kBAACJ,EAAA,EAAD,CACEC,UAAU,gBACVE,QAAST,EAETQ,GAAG,SACHE,QAAQ,gBAGR,uCAGF,kBAACJ,EAAA,EAAD,CACEC,UAAU,sBACVE,QAASV,EACTS,GAAG,eACHE,QAAQ,gBAER,8CAEF,kBAACJ,EAAA,EAAD,CACEC,UAAU,iBACVE,QAASZ,EACTW,GAAG,UACHE,QAAQ,gBAER,wCAIF,kBAACJ,EAAA,EAAD,CACEC,UAAU,gBACVE,QAASR,EACTO,GAAG,SACHE,QAAQ,gBAER,yC,8DCxED,SAASC,EAAiBC,GAC/B,OAAKA,EACEA,EAAEC,WAAWC,QAAQ,wBAAyB,KADtC,I,YCSjBC,IAASC,YACP,yFAEF,IA+sBeC,EA/sBF,SAAC,GAA+B,EAA9BC,aAA+B,IAAjBC,EAAgB,EAAhBA,WACrBC,EAAcC,iBAAO,MA2BnBC,EAASC,YAAO,0CAzBR,SAACC,GAAD,OACdC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACJ,GAAD,OACJA,EAAKO,KAAI,SAACC,EAAOC,GAAR,MAAmB,CAC1BC,KAAM,UACNC,SAAU,CACRD,KAAM,QACNE,YAAa,CACXJ,EAAMI,YAAYC,UAClBL,EAAMI,YAAYE,WAGtBC,WAAY,CACV7B,GAAIuB,EACJO,QAASR,EAAMQ,QACfC,SAAUT,EAAMS,SAChBC,MAAOV,EAAMW,MAAMC,UACnBC,OAAQb,EAAMW,MAAME,kBAOtBrB,KAiqBR,OA9pBAsB,qBAAU,WACR,GAAItB,EAAM,KAyXCuB,EAAT,SAA0BC,GAUxB,IATA,IAAMC,EAAU,GACVC,EAAS,CACbF,EAAMG,QACNH,EAAMI,QACNJ,EAAMK,QACNL,EAAMM,QACNN,EAAMO,SAEJC,EAAQ,EACZ,MAAoBN,EAApB,eAA4B,CAAvB,IAAMO,EAAK,KACdR,EAAQS,KAAKF,GACbA,GAASC,EAYX,IAVA,IAAME,EACJH,GAAS,IAAO,GAAKA,GAAS,IAAM,GAAKA,GAAS,GAAK,GAAK,GACxD3B,EACJ2B,GAAS,IAAO,GAAKA,GAAS,IAAM,GAAKA,GAAS,GAAK,GAAK,GACxDI,EAAKC,KAAKC,MAAU,GAAJjC,GAChBkC,EAAQ,EAAJlC,EAENmC,EAAI,mDACoBD,EADpB,qBACkCA,EADlC,0BACqDA,EADrD,YAC0DA,EAD1D,+CACkGJ,EADlG,4BAGCM,EAAI,EAAGA,EAAIf,EAAOgB,OAAQD,IACjCD,GAAQG,EACNlB,EAAQgB,GAAKT,GACZP,EAAQgB,GAAKf,EAAOe,IAAMT,EAC3B3B,EACA+B,EACAQ,EAAOH,IAGXD,GAAI,sBAAmBnC,EAAnB,iBAA6BA,EAA7B,gBAAsC+B,EAAtC,gGACsD/B,EADtD,aAC4DA,EAD5D,wCAEF2B,EAAMa,iBAFJ,qDAOJ,IAAMC,EAAKC,SAASC,cAAc,OAElC,OADAF,EAAGG,UAAYT,EACRM,EAAGI,YAGHP,EAAT,SAAsBQ,EAAOC,EAAK/C,EAAG+B,EAAIiB,GACnCD,EAAMD,IAAU,IAAGC,GAAO,MAC9B,IAAME,EAAK,EAAIjB,KAAKkB,IAAMJ,EAAQ,KAC5BK,EAAK,EAAInB,KAAKkB,IAAMH,EAAM,KAC1BK,EAAKpB,KAAKqB,IAAIJ,GAClBK,EAAKtB,KAAKuB,IAAIN,GACVO,EAAKxB,KAAKqB,IAAIF,GAClBM,EAAKzB,KAAKuB,IAAIJ,GACVO,EAAWX,EAAMD,EAAQ,GAAM,EAAI,EAGzC,MAAM,eAAN,OAAsB9C,EAAI+B,EAAKqB,EAA/B,YAAqCpD,EAAI+B,EAAKuB,EAA9C,cAAsDtD,EAAIA,EAAIoD,EAA9D,YAAoEpD,EAAIA,EAAIsD,EAA5E,cACQtD,EADR,YACaA,EADb,cACoB0D,EADpB,cACkC1D,EAAIA,EAAIwD,EAD1C,YACgDxD,EAAIA,EAAIyD,EADxD,cACgEzD,EAAI+B,EAAKyB,EADzE,YAEMxD,EAAI+B,EAAK0B,EAFf,cAEuB1B,EAFvB,YAE6BA,EAF7B,cAEqC2B,EAFrC,cAEmD1D,EAAI+B,EAAKqB,EAF5D,YAEkEpD,EAAI+B,EAAKuB,EAF3E,mBAGaN,EAHb,SAhbIW,EACJhE,EAAKiE,QAAO,SAACjC,EAAOkC,GAAR,OAAiBlC,EAAQkC,EAAKnD,WAAWG,QAAO,GAC5DlB,EAAK0C,OACDyB,EAAM9B,KAAK8B,IAAL,MAAA9B,KAAI,YAAQrC,EAAKO,KAAI,SAAC6D,GAAD,OAAUA,EAAKrD,WAAWG,WACrDmD,EAAMhC,KAAKgC,IAAL,MAAAhC,KAAI,YAAQrC,EAAKO,KAAI,SAAC6D,GAAD,OAAUA,EAAKrD,WAAWG,WAErDoD,EACJtE,EAAKiE,QAAO,SAACjC,EAAOkC,GAAR,OAAiBlC,EAAQkC,EAAKnD,WAAWM,SAAQ,GAC7DrB,EAAK0C,OACD6B,EAAOlC,KAAK8B,IAAL,MAAA9B,KAAI,YAAQrC,EAAKO,KAAI,SAAC6D,GAAD,OAAUA,EAAKrD,WAAWM,YACtDmD,EAAOnC,KAAKgC,IAAL,MAAAhC,KAAI,YAAQrC,EAAKO,KAAI,SAAC6D,GAAD,OAAUA,EAAKrD,WAAWM,YAE5DoD,QAAQC,IAAIV,EAASG,EAAKE,EAAK,SAC/BI,QAAQC,IAAIJ,EAAUC,EAAMC,EAAM,UAElC,IAAMG,EAAML,EAAWN,EACjBY,EAAQL,EAAOJ,EACfU,EAAQL,EAAOH,EACrBI,QAAQC,IAAIC,EAAKC,EAAOC,EAAO,OAE/B,IAAMtE,EAAM,IAAId,IAASqF,IAAI,CAC3BC,UAAWjF,EAAYkF,QACvBpG,MAAO,kCACPqG,OAAQ,CAAC,GAAI,IACbC,KAAM,IAQFC,EAAS,CAAC,IAAK,CAAC,MAAO,SAAU,KACjCC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,KAAQ,CAAC,IAAK,CAAC,MAAO,SAAU,MAC1EC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,KAAS,CAAC,IAAK,CAAC,MAAO,SAAU,OAC3EC,EAAS,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,SAAU,MAAS,CAAC,IAAK,CAAC,MAAO,SAAU,MAC3EC,EAAS,CAAC,KAAM,CAAC,MAAO,SAAU,KAGlC5D,EAAU,CAAC,IAAK,CAAC,MAAO,UAAW,IACnCC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAM,CAAC,IAAK,CAAC,MAAO,UAAW,MAC3EC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAO,CAAC,IAAK,CAAC,MAAO,UAAW,MAC5EC,EAAU,CAAC,MAAO,CAAC,KAAM,CAAC,MAAO,UAAW,KAAO,CAAC,IAAK,CAAC,MAAO,UAAW,MAC5EC,EAAU,CAAC,KAAM,CAAC,MAAO,UAAW,KASpCa,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,mBACA,qBAGI4C,EAAU,CACd,UACA,UACA,UACA,UACA,UACA,mBACA,qBAOIC,EAAa,CACjBC,MAJW,IAKX5G,OALW,IAMXkB,KAAM,IAAI2F,WAAWC,KAIrBC,MAAO,WACL,IAAMC,EAAS/C,SAASC,cAAc,UACtC8C,EAAOJ,MAAQK,KAAKL,MACpBI,EAAOhH,OAASiH,KAAKjH,OACrBiH,KAAKC,QAAUF,EAAOG,WAAW,OAInCC,OAAQ,WACN,IACMC,EAAKC,YAAYC,MADN,QAIXC,EAAeV,KAAkBO,EADvBP,IAEVI,EAAUD,KAAKC,QA2CrB,OAxCAA,EAAQO,UAAU,EAAG,EAAGR,KAAKL,MAAOK,KAAKjH,QACzCkH,EAAQQ,YACRR,EAAQS,IACNV,KAAKL,MAAQ,EACbK,KAAKjH,OAAS,EACdwH,EACA,EACU,EAAVjE,KAAKkB,IAEPyC,EAAQU,UAAR,2BAAwC,EAAIP,EAA5C,KACAH,EAAQW,OAGRX,EAAQQ,YACRR,EAAQS,IACNV,KAAKL,MAAQ,EACbK,KAAKjH,OAAS,EArBA8G,IAuBd,EACU,EAAVvD,KAAKkB,IASPwC,KAAK/F,KAAOgG,EAAQY,aAClB,EACA,EACAb,KAAKL,MACLK,KAAKjH,QACLkB,KAIFO,EAAIsG,kBAGG,IAKXtG,EAAIuG,GAAG,QAAQ,WAEbvG,EAAIwG,SAAS,cAAetB,EAAY,CAAEuB,WAAY,IAEtDzG,EAAI0G,UAAU,YAAa,CACzB,KAAQ,UACR,KAAQ,CACN,KAAQ,oBACR,SAAYjH,KAGhBO,EAAI2G,SAAS,CACX,GAAM,yBACN,KAAQ,SACR,OAAU,YACV,OAAU,CACR,aAAc,iBAIlB3G,EAAI0G,UAAU,SAAU,CACtB,KAAQ,UACR,KAAQ,CACNvG,KAAM,oBACNyG,SAAUnH,GAEZ,SAAW,EACX,cAAiB,GACjB,kBAAqB,CAEnB,QAAW,CAAC,IAAK,CAAC,OAAQ2B,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,QAAW,CAAC,IAAK,CAAC,OAAQC,EAAS,EAAG,IACtC,OAAU,CAAC,IAAK,CAAC,OAAQoD,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,IACpC,OAAU,CAAC,IAAK,CAAC,OAAQC,EAAQ,EAAG,OAMxChF,EAAI2G,SAAS,CACX,GAAM,SACN,KAAQ,SACR,OAAU,SAEV,OAAU,CAAC,KAAM,WAAW,GAC5B,MAAS,CACP,eAAgB,CACd,OACAvF,EACA6D,EAAQ,GACR5D,EACA4D,EAAQ,GACR3D,EACA2D,EAAQ,GACR1D,EACA0D,EAAQ,GACRA,EAAQ,IAEV,iBAAkB,GAClB,gBAAiB,KAqBfjF,EAAI2G,SAAS,CACX,GAAM,QACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,MAAS,CACP,eAAgB,CACd,OACA/B,EACAvC,EAAO,GACPwC,EACAxC,EAAO,GACPyC,EACAzC,EAAO,GACP0C,EACA1C,EAAO,GACPA,EAAO,IAET,iBAAkB,GAClB,gBAAiB,MAI3BrC,EAAI2G,SAAS,CACX,GAAM,WACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,OAAU,CACR,aAAc,CACZ,gBACA,CAAC,MAAO,UACR,CAAE,sBAAuB,EAAG,sBAAuB,IAErD,YAAa,CAAC,qBAAsB,yBACpC,YAAa,GACb,WAAc,WAEhB,MAAS,CACP,aAAc,CACZ,OACA,CAAC,IAAK,CAAC,MAAO,SAAU,GACxB,QACA,YAkCN3G,EAAI2G,SAAS,CACX,GAAM,YACN,KAAQ,SACR,OAAU,SACV,OAAU,CAAC,KAAM,WAAW,GAC5B,OAAU,CACR,aAAc,CACZ,gBACA,CAAC,MAAO,UACR,CAAE,sBAAuB,EAAG,sBAAuB,IAErD,YAAa,CAAC,qBAAsB,yBACpC,YAAa,GACb,WAAc,WAEhB,MAAS,CACP,aAAc,CACZ,OACA,CAAC,IAAK,CAAC,MAAO,UAAW,GACzB,QACA,YAON,IAAME,EAAU,GACZC,EAAkB,GAiCtB9G,EAAIuG,GAAG,UAAU,WACVvG,EAAI+G,eAAe,WAhC1B,WACE,IADuB,EACjBC,EAAa,GACbJ,EAAW5G,EAAIiH,oBAAoB,UAFlB,cAMDL,GANC,IAMvB,2BAAgC,CAAC,IAAtBM,EAAqB,QACxBC,EAASD,EAAQ9G,SAASC,YAC1BY,EAAQiG,EAAQ1G,WACtB,GAAKS,EAAMmG,QAAX,CACA,IAAMzI,EAAKsC,EAAMoG,WAEbC,EAAST,EAAQlI,GACrB,IAAK2I,EAAQ,CACX,IAAM/E,EAAKvB,EAAiBC,GAC5BqG,EAAST,EAAQlI,GAAM,IAAIO,IAASqI,OAAO,CACzCC,QAASjF,IACRkF,UAAUN,GAEfH,EAAWrI,GAAM2I,EAEZR,EAAgBnI,IAAK2I,EAAOI,MAAM1H,KArBlB,8BAwBvB,IAAK,IAAMrB,KAAMmI,EACVE,EAAWrI,IAAKmI,EAAgBnI,GAAIgJ,SAE3Cb,EAAkBE,EAMlBY,SAoEJ5H,EAAIuG,GAAG,QAAS,YAAY,SAAUsB,GACpC,IAAIjB,EAAW5G,EAAI8H,sBAAsBD,EAAE5H,MAAO,CAAE8H,OAAQ,CAAC,cACzDC,EAAYpB,EAAS,GAAGpG,WAAW6G,WACvCnD,QAAQC,IAAI,MACZnE,EAAIiI,UAAU,UAAUC,wBAAwBF,GAAW,SAAUG,EAAKxD,GACpEwD,GAGJnI,EAAIoI,OAAO,CACT1D,OAAQkC,EAAS,GAAGxG,SAASC,YAC7BsE,KAAMA,UAQZ3E,EAAIuG,GAAG,QAAQ,WAEb,GAAKvG,EAAIqI,SAAS,UAAarI,EAAIqI,SAAS,UAQ5C,IAHA,IAGA,MAH2B,CAAC,QAAS,UAGrC,eAAqC,CAAhC,IAAM1J,EAAE,KAEX,IAAI6D,SAAS8F,eAAe3J,GAA5B,CAKA,IAAM4J,EAAO/F,SAASC,cAAc,KACpC8F,EAAK5J,GAAKA,EACV4J,EAAKC,KAAO,IACZD,EAAKE,YAAc9J,EACnB4J,EAAK7J,UAAY,SAGjB6J,EAAKG,QAAU,SAAUb,GACvB,IAAMc,EAAenD,KAAKiD,YAC1BZ,EAAEe,iBACFf,EAAEgB,kBAQiB,YANA7I,EAAI8I,kBACrBH,EACA,eAKA3I,EAAI+I,kBAAkBJ,EAAc,aAAc,QAClDnD,KAAK9G,UAAY,KAEjB8G,KAAK9G,UAAY,SACjBsB,EAAI+I,kBACFJ,EACA,aACA,aAISnG,SAAS8F,eAAe,QAChCU,YAAYT,QAKvBvI,EAAIiJ,WAAW,IAAI/J,IAASgK,mBAG5BlJ,EAAIiJ,WACF,IAAI/J,IAASiK,iBAAiB,CAC5BC,iBAAkB,CAAEC,QAAS,MAKjCrJ,EAAIsJ,KAAK,QAAQ,WAGf,IAAMC,EAAS,IAAIrK,IAASsK,MAAM,CAChCC,aAAa,EACbC,cAAc,IAKhB1J,EAAIuG,GAAG,QAAS,YAAY,SAACsB,GAG3B7H,EAAI2J,YAAYtL,MAAMuL,OAAS,UACX/B,EAAEzH,SAASC,YAAYwJ,QAC3CN,EAAO9B,UAAU,CAAC,EAAG,KAAKC,MAAM1H,MAGlCA,EAAIuG,GAAG,aAAc,YAAY,gBACrBuD,EACV9J,EAAI2J,YAAYtL,MAAMuL,OAAS,GAC/BL,EAAO5B,YAIT,IAKIoC,EALEC,EAAQ,IAAI9K,IAASsK,MAAM,CAC/BC,aAAa,EACbC,cAAc,IAKhB1J,EAAIuG,GAAG,YAAwB,UAAU,SAACsB,GACxC,IAAMlJ,EAAKkJ,EAAEjB,SAAS,GAAGpG,WAAW7B,GAEpC,GAAIA,IAAOoL,EAAQ,CAAC,IAAD,IACjBA,EAASpL,EADQ,MAObkJ,EAAEjB,SAAS,GAAGpG,WAJhBG,EAHe,EAGfA,MACAG,EAJe,EAIfA,OACAL,EALe,EAKfA,QACAC,EANe,EAMfA,SAIFV,EAAI2J,YAAYtL,MAAMuL,OAAS,UA4B/B,IA1BA,IAAMvJ,EAAcwH,EAAEjB,SAAS,GAAGxG,SAASC,YAAYwJ,QAEjDI,GACJ,UAAAC,IAAOC,UAAU1J,UAAjB,eAA2B2J,QAA3B,UACAF,IAAOG,WAAW5J,UADlB,aACA,EAA4B2J,MACxBE,EAAW,uGAA4FL,QAA5F,IAA4FA,OAA5F,EAA4FA,EAAYM,cAAxG,QACXC,EACS,SAAb9J,EAAA,0BAAyCA,EAAzC,YAA8D,GAC1D+J,GAAkB3J,EAASH,EAAS,KAAK+J,QAAQ,GACjDC,EAAkBC,QAAQX,GAAR,oBAEPK,EAFO,YAGpB,GAGEO,EAAI,YAAQF,EAAR,0BAAyClK,EAAzC,qCACJ+J,EADI,0CAES1L,EAAiB6B,GAF1B,mDAGU7B,EAAiBgC,GAH3B,2DAIkB2J,EAJlB,wDAKcnL,EALd,8BAWHwC,KAAKgJ,IAAIjD,EAAEkD,OAAOC,IAAM3K,EAAY,IAAM,KAC/CA,EAAY,IAAMwH,EAAEkD,OAAOC,IAAM3K,EAAY,GAAK,KAAO,IAG3D2J,EAAMvC,UAAUpH,GAAa4K,QAAQJ,GAAMnD,MAAM1H,OAIrDA,EAAIuG,GAAG,aAAyB,UAAU,WACxCwD,OAASD,EACT9J,EAAI2J,YAAYtL,MAAMuL,OAAS,GAC/BI,EAAMrC,YAKRnF,SAAS8F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DlL,EAAImL,MAAM,CACRxG,KAAM,EACND,OAAQ,CAAC,IAAK,KACd0G,WAAW,OAGf5I,SAAS8F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DlL,EAAImL,MAAM,CACRxG,KAAM,EACND,OAAQ,CAAC,EAAG,IACZ0G,WAAW,OAGf5I,SACG8F,eAAe,gBACf4C,iBAAiB,SAAS,WACzBlL,EAAImL,MAAM,CACRxG,KAAM,EACND,OAAQ,EAAE,IAAK,IACf0G,WAAW,OAGjB5I,SACG8F,eAAe,gBACf4C,iBAAiB,SAAS,WACzBlL,EAAImL,MAAM,CACRxG,KAAM,IACND,OAAQ,EAAE,IAAK,GACf0G,WAAW,OAGjB5I,SAAS8F,eAAe,QAAQ4C,iBAAiB,SAAS,WACxDlL,EAAImL,MAAM,CACRxG,KAAM,IACND,OAAQ,CAAC,IAAK,IACd0G,WAAW,OAGf5I,SAAS8F,eAAe,WAAW4C,iBAAiB,SAAS,WAC3DlL,EAAImL,MAAM,CACRxG,KAAM,IACND,OAAQ,CAAC,KAAM,IACf0G,WAAW,OAIf5I,SAAS8F,eAAe,UAAU4C,iBAAiB,SAAS,WAC1DlL,EAAImL,MAAM,CACRxG,KAAM,IACND,OAAQ,CAAC,EAAG,IACZ0G,WAAW,aAKlB,CAAC3L,IAIF,yBAAKf,UAAU,OACb,yBAAKA,UAAU,gBAEb,yBAAKA,UAAU,SAAS2M,IAAK9L,KAE/B,yBAAKZ,GAAG,eAAeD,UAAU,UAC/B,wCACA,6BAAK,0BAAML,MAAO,CAAEiN,gBAAiB,aAArC,WACA,6BAAK,0BAAMjN,MAAO,CAAEiN,gBAAiB,aAArC,UACA,6BAAK,0BAAMjN,MAAO,CAAEiN,gBAAiB,aAArC,WACA,6BAAK,0BAAMjN,MAAO,CAAEiN,gBAAiB,aAArC,SACA,6BAAK,0BAAMjN,MAAO,CAAEiN,gBAAiB,aAArC,a,gDC0GOC,EAtzBF,SAAC,GAGP,IAHSC,EAGV,EAHUA,OAAQtL,EAGlB,EAHkBA,MAAOZ,EAGzB,EAHyBA,WAAYmM,EAGrC,EAHqCA,OACzCC,GAEI,EAH6CC,MAG7C,EAFJD,OAAOE,EAEH,EAFGA,UAAWC,EAEd,EAFcA,YAAaC,EAE3B,EAF2BA,iBAAkBC,EAE7C,EAF6CA,OACjDC,EACI,EADJA,YAAaC,EACT,EADSA,aAAcC,EACvB,EADuBA,aAAcC,EACrC,EADqCA,eAAgBC,EACrD,EADqDA,YAAaC,EAClE,EADkEA,eAAgBhN,EAClF,EADkFA,aAAciN,EAChG,EADgGA,cAAeC,EAC/G,EAD+GA,cAAeC,EAC9H,EAD8HA,gBAAiBC,EAC/I,EAD+IA,aAG7IC,EAAoBrN,EAAaW,KAAI,SAAA2M,GAAiB,OAAMA,EAAoB,KAAMjC,QAAQ,MAC9FkC,EAAqBN,EAActM,KAAI,SAAA2M,GAAiB,OAAMA,EAAoB,KAAMjC,QAAQ,MAC3E6B,EAAcvM,KAAI,SAAA2M,GAAiB,OAAMA,EAAoB,KAAMjC,QAAQ,MACzE8B,EAAgBxM,KAAI,SAAA2M,GAAiB,OAAMA,EAAoB,KAAMjC,QAAQ,MAChF+B,EAAazM,KAAI,SAAA2M,GAAiB,OAAMA,EAAoB,KAAMjC,QAAQ,MACpGxG,QAAQC,IAAIuI,EAAmB,qBA2C/B,IAzCA,IAAMG,GAAeb,EAAc,KAAMtB,QAAQ,GAC3CoC,GAAgBb,EAAe,KAAMvB,QAAQ,GAC7CqC,GAAgBb,EAAe,KAAMxB,QAAQ,GAC7CsC,GAAkBb,EAAiB,KAAMzB,QAAQ,GACjDuC,GAAeb,EAAc,KAAM1B,QAAQ,GAK3CwC,EAAqBtB,EAAUuB,QAAO,SAAA1M,GAAO,OAAIA,EAAQ2M,YAAc5B,KAEvE6B,EAAezB,EAAUuB,QAAO,SAAA1M,GAAO,OAAIA,EAAQ2M,YAAc5B,GAAU/K,EAAQnB,WAAa,OAAQU,KAAI,SAAAsN,GAAe,OAAIA,EAAgB7M,QAAQ8M,UAAU,EAAG,OAEpKC,EAAqBN,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBE,mBAAsB,KAAM9C,QAAQ,MACtH+C,EAAsBP,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBG,oBAAuB,KAAM/C,QAAQ,MACxHD,EAAgByC,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBG,oBAAsBH,EAAgBE,mBAAuB,KAAK9C,QAAQ,MACvJgD,EAAsBR,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBI,oBAAuB,KAAMhD,QAAQ,MAIxHiD,GAHwBT,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBM,sBAAyB,KAAMlD,QAAQ,MACvGwC,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBO,mBAAsB,KAAMnD,QAAQ,MAE7GwC,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OACnGM,EAAQZ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,IAAMF,EAAgBE,mBAAqB,IAAO,OACrJ/J,EAAUyJ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACxJO,EAASb,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACvJQ,EAAUd,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OAGpGS,EAAOf,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,MAClGS,EAAYhB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,IAAMH,EAAgBG,oBAAsB,IAAO,KAC3JU,EAAWjB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,GAAKH,EAAgBG,oBAAsB,IAAO,OACzJW,GAAUlB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,KAAOH,EAAgBG,oBAAsB,IAAO,OAC1JY,GAAUnB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,OAGrGa,GAAUpB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,KACrGa,GAAUrB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,GAAKJ,EAAgBI,oBAAsB,IAAO,MACxJc,GAAUtB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJe,GAAUvB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJgB,GAAUxB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,MAErGiB,GAAa,GACVzM,GAAI,EAAGA,GAAIwK,EAAkBvK,OAAQD,KACxCwK,EAAkBxK,IAAK,IAAMyM,GAAWhN,KAAK,WAC7C+K,EAAkBxK,KAAM,IAAMwK,EAAkBxK,IAAK,KAAOyM,GAAWhN,KAAK,WAC5E+K,EAAkBxK,KAAM,KAAOwK,EAAkBxK,IAAK,KAAOyM,GAAWhN,KAAK,WAC7E+K,EAAkBxK,KAAM,KAAOwK,EAAkBxK,IAAK,KAAOyM,GAAWhN,KAAK,WAC7E+K,EAAkBxK,KAAM,KAAOyM,GAAWhN,KAAK,WAIrD,IADA,IAAMiN,GAAc,GACX1M,GAAI,EAAGA,GAAIuL,EAAoBtL,OAAQD,KAC1CuL,EAAoBvL,IAAK,IAAM0M,GAAYjN,KAAK,WAChD8L,EAAoBvL,KAAM,IAAMuL,EAAoBvL,IAAK,GAAK0M,GAAYjN,KAAK,WAC/E8L,EAAoBvL,KAAM,GAAKuL,EAAoBvL,IAAK,KAAO0M,GAAYjN,KAAK,WAChF8L,EAAoBvL,KAAM,KAAOuL,EAAoBvL,IAAK,KAAO0M,GAAYjN,KAAK,WAClF8L,EAAoBvL,KAAM,KAAO0M,GAAYjN,KAAK,WAIxD,IADA,IAAMkN,GAAc,GACX3M,GAAI,EAAGA,GAAIwL,EAAoBvL,OAAQD,KAC1CwL,EAAoBxL,IAAK,IAAM2M,GAAYlN,KAAK,WAChD+L,EAAoBxL,KAAM,IAAMwL,EAAoBxL,IAAK,GAAK2M,GAAYlN,KAAK,WAC/E+L,EAAoBxL,KAAM,GAAKwL,EAAoBxL,IAAK,KAAO2M,GAAYlN,KAAK,WAChF+L,EAAoBxL,KAAM,KAAOwL,EAAoBxL,IAAK,KAAO2M,GAAYlN,KAAK,WAClF+L,EAAoBxL,KAAM,KAAO2M,GAAYlN,KAAK,WAIxD,IADA,IAAMmN,GAAkB,GACf5M,GAAI,EAAGA,GAAIuI,EAActI,OAAQD,KACpCuI,EAAcvI,IAAK,GAAO4M,GAAgBnN,KAAK,WAC/C8I,EAAcvI,KAAM,GAAOuI,EAAcvI,IAAK,GAAO4M,GAAgBnN,KAAK,WAC1E8I,EAAcvI,KAAM,GAAOuI,EAAcvI,IAAK,KAAO4M,GAAgBnN,KAAK,WAC1E8I,EAAcvI,KAAM,KAAOuI,EAAcvI,IAAK,GAAO4M,GAAgBnN,KAAK,WAC1E8I,EAAcvI,KAAM,GAAO4M,GAAgBnN,KAAK,WAGtD,IAAMoN,GAAW,CACf,CACEpQ,GAAI,EACJqQ,MAAO,QACPC,QACE,oCACE,kBAACC,EAAA,EAAD,CAAKxQ,UAAW,cAAeL,MAAO,CAAEyE,MAAO,SAG7C,4BAAK+J,EAAL,IAAkB,kBAAC,IAAD,CAAiB/J,MAAM,QAAQqM,KAAMC,OACvD,8CAGF,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,YAEb,kBAAC,MAAD,CACEH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQnD,EACRoD,SAAU,CACR,CACEC,MAAO,aACPjQ,KAAMiN,EACNpB,gBAAiBqD,SAM3B,yBAAKtQ,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,SAA3D,cACA,kBAACT,EAAA,EAAD,CAAKxQ,UAAU,qBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,sBAAf,UAA4C,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAInR,UAAU,SAASqO,EAAeF,EAAc,KAAKnC,QAAQ,GAAjE,KAA0E,uCACrL,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,sBAAf,YAA6C,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAKnR,UAAU,SAASsO,EAAiBH,EAAc,KAAKnC,QAAQ,GAApE,KAA6E,wCAE3L,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,sBAAf,UAA4C,wBAAIA,UAAU,SAASoO,EAAeD,EAAc,KAAKnC,QAAQ,GAAjE,KAA0E,uCACtH,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,sBAAf,UAA6C,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAKnR,UAAU,SAASqN,EAASD,GAAkBpB,QAAQ,IAAQ,0CAEjL,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAEhF,kBAAC0D,EAAA,EAAD,CAAKxQ,UAAU,sBACb,kBAAC,OAAD,CACEyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,WAGdiB,KAAM,CACJ+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACPjQ,KAAMJ,EACN+G,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAQvB,kBAAC,WAAD,CACE3K,MAAO,IACPkK,QAAS,CACPU,SAAU,CACR7J,IAAK,CACH8J,YAAa,IAGjBV,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACEhQ,KAAM,CAACkO,EAAOxL,OAAQ2L,EAAM3L,OAAQsB,EAAQtB,OAAQ4L,EAAO5L,OAAQ6L,EAAQ7L,QAC3EmJ,gBAAiB2E,SAS/B,CACEtR,GAAI,EACJqQ,MAAO,SAEPC,QACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACb,kBAAC,gBAAD,CACEH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KASdiB,KAAM,CACJ+P,OAAQnC,EACRoC,SAAU,CACR,CACEC,MAAO,aACPjQ,KAAMmN,EACNtB,gBAAiBsD,SAM3B,kBAACgB,EAAA,EAAD,CAAKlR,UAAU,QAKb,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE5C,4BAAKgK,EAAL,KAAoB,kBAAC,IAAD,CAAiBhK,MAAM,QAAQqM,KAAMC,OAEzD,6CAIF,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,sBACb,kBAAC,OAAD,CACEyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,WAGdiB,KAAM,CACJ+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACPjQ,KAAM6M,EACNlG,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYvB,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAvC,cACA,kBAACsN,EAAA,EAAD,CAAKxQ,UAAU,qBAEb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,YAArC,SAAwD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMtD,EAAcrM,GAASoM,EAAcpM,GAAS,KAAKwK,QAAQ,GAAjE,KAA0E,yCAC7N,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASoM,EAAcpM,GAAS,KAAKwK,QAAQ,GAAnE,KAA4E,0CAIhO,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE3M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACErG,MAAO,IACPkK,QAAS,CAOPU,SAAU,CACR7J,IAAK,CACH8J,YAAa,IAGjBV,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACR,CACEhQ,KAAM,CAACwO,EAAK9L,OAAQ+L,EAAU/L,OAAQgM,EAAShM,OAAQiM,GAAQjM,OAAQkM,GAAQlM,QAC/EmJ,gBAAiB2E,WAcnC,CACEtR,GAAI,EACJqQ,MAAO,SACPG,KAAM,oCACNF,QACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACb,kBAAC,gBAAD,CACEH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KASdiB,KAAM,CACJ+P,OAAQnC,EACRoC,SAAU,CACR,CACEC,MAAO,aACPjQ,KAAMiO,EACNpC,gBAAiBuD,SAM3B,kBAACe,EAAA,EAAD,CAAKlR,UAAU,QAKb,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE5C,4BAAKiK,EAAL,KAAoB,kBAAC,IAAD,CAAiBjK,MAAM,QAAQqM,KAAMU,OAEzD,6CAIF,kBAACX,EAAA,EAAD,CAAKxQ,UAAU,sBACb,kBAAC,OAAD,CACEyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,WAGdiB,KAAM,CACJ+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACPjQ,KAAMiO,EACNtH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYvB,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAvC,cACA,kBAACsN,EAAA,EAAD,CAAKxQ,UAAU,qBAEb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,SAAqD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMxQ,EAAaa,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,yCACzN,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAAnE,KAA4E,0CAIhO,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAAjE,KAA0E,yCAC/M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE3M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACErG,MAAO,IACPkK,QAAS,CAOPU,SAAU,CACR7J,IAAK,CACH8J,YAAa,IAGjBV,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACR,CACEhQ,KAAM,CAAC6O,GAAQnM,OAAQoM,GAAQpM,OAAQqM,GAAQrM,OAAQsM,GAAQtM,OAAQuM,GAAQvM,QAC/EmJ,gBAAiB2E,WAanC,CACEtR,GAAI,EACJqQ,MAAO,WACPG,KAAM,oCACNF,QAAS,oCACP,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACb,kBAAC,gBAAD,CACEH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KASdiB,KAAM,CACJ+P,OAAQnC,EACRoC,SAAU,CACR,CACEC,MAAO,aACPjQ,KAAM+N,EACNlC,gBAAiBqD,SAM3B,kBAACiB,EAAA,EAAD,CAAKlR,UAAU,QAKb,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE5C,6BAAMkK,EAAiB,GAAGtC,QAAQ,GAAlC,KAAuC,kBAAC,IAAD,CAAiB5H,MAAM,QAAQqM,KAAMC,OAE5E,+CAIF,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,sBACb,kBAAC,OAAD,CACEyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,WAGdiB,KAAM,CACJ+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACPjQ,KAAM+N,EACNpH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYvB,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,SAA3D,cACA,kBAACT,EAAA,EAAD,CAAKxQ,UAAU,qBAEb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,SAAqD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMtD,EAAcrM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAlE,KAA2E,yCAI/N,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE3M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACErG,MAAO,IACPkK,QAAS,CAOPU,SAAU,CACR7J,IAAK,CACH8J,YAAa,IAGjBV,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACEhQ,KAAM,CAACkO,EAAOxL,OAAQ2L,EAAM3L,OAAQsB,EAAQtB,OAAQ4L,EAAO5L,OAAQ6L,EAAQ7L,QAC3EmJ,gBAAiB2E,WAajC,CACEtR,GAAI,EACJqQ,MAAO,QACPG,KAAM,oCACNF,QAAS,oCACP,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACb,kBAAC,gBAAD,CACEH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KASdiB,KAAM,CACJ+P,OAAQnC,EACRoC,SAAU,CACR,CACEC,MAAO,aACPjQ,KAAM+N,EACNlC,gBAAiBqD,SAM3B,kBAACiB,EAAA,EAAD,CAAKlR,UAAU,QAKb,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE5C,6BAAMmK,EAAc,GAAGvC,QAAQ,GAA/B,KAAoC,kBAAC,IAAD,CAAiB5H,MAAM,QAAQqM,KAAMC,OAEzE,4CAIF,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,sBACb,kBAAC,OAAD,CACEyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOPC,OAAQ,CACNC,SAAS,EACT/Q,SAAU,WAGdiB,KAAM,CACJ+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACR,CACEC,MAAO,gBACPjQ,KAAM+N,EACNpH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYvB,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,SAA3D,cACA,kBAACT,EAAA,EAAD,CAAKxQ,UAAU,qBAEb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,SAAqD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMtD,EAAcrM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAlE,KAA2E,yCAI/N,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACb,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE3M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACErG,MAAO,IACPkK,QAAS,CAOPU,SAAU,CACR7J,IAAK,CACH8J,YAAa,IAGjBV,OAAQ,CACNC,SAAS,EACT/Q,SAAU,KAGdiB,KAAM,CACJ+P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACR,CACEhQ,KAAM,CAACkO,EAAOxL,OAAQ2L,EAAM3L,OAAQsB,EAAQtB,OAAQ4L,EAAO5L,OAAQ6L,EAAQ7L,QAC3EmJ,gBAAiB2E,YAiB7BC,GAAgB,WAAO,IAAD,EACEC,mBAAS,GADX,mBACnBC,EADmB,KACXC,EADW,KAG1B,OACE,yBAAK3R,UAAU,WACb,yBAAKA,UAAU,QACZqQ,GAAS/O,KAAI,gBAAGrB,EAAH,EAAGA,GAAIwQ,EAAP,EAAOA,KAAMH,EAAb,EAAaA,MAAb,OAAyB,kBAACsB,GAAD,CACrCC,IAAKvB,EACLG,KAAMA,EACNH,MAAOA,EACPwB,cAAe,kBAAMH,EAAU1R,IAC/B8R,SAAUL,IAAWzR,QAIzB,yBAAKD,UAAU,WACZqQ,GAAS/O,KAAI,YAAsB,IAAnBrB,EAAkB,EAAlBA,GAAIsQ,EAAc,EAAdA,QACnB,OAAOmB,IAAWzR,EAAKsQ,EAAU,SAOrCqB,GAAmB,SAAC,GAKnB,IAAD,IAJJnB,YAII,MAJG,GAIH,MAHJH,aAGI,MAHI,GAGJ,MAFJwB,qBAEI,MAFY,kBAAMtM,QAAQwM,MAAM,0CAEhC,MADJD,gBACI,SACJ,OACE,yBAAK/R,UAAW+R,EAAW,UAAY,4BAA6B7R,QAAS4R,GAC3E,uBAAG9R,UAAWyQ,IACd,uBAAGzQ,UAAU,kBAAkBsQ,KAMrC,OACE,oCACE,yBAAKtQ,UAAW+M,EAAS,UAAY,UACnC,kBAAC,WAAD,CACEkF,YAAY,aACZC,aAAa,UACbC,WAAW,GAGX,yBAAKnS,UAAU,QACb,yBAAKA,UAAY+M,EAAoB,UAAX,UACxB,kBAACqF,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAKxQ,UAAU,SACb,kBAACkR,EAAA,EAAD,CAAKmB,GAAI,GAAIrS,UAAU,aAAa8M,GACpC,kBAACoE,EAAA,EAAD,CAAKlR,UAAU,QACb,yBAAKL,MAAO,CAAEkR,QAAS,OAAQyB,eAAgB,aAC7C,kBAACvS,EAAA,EAAD,CAEEG,QAASiN,EAEThN,QAAQ,eAERH,UAAU,gBAGV,qCAOR,kBAACwR,GAAD,CACEtE,UAAWA,EACX1L,MAAOA,EACPsL,OAAQA,EACRnM,aAAcA,EACdkN,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfZ,MAAOA,WAmBrBuE,EAAY,CACd,UACA,UACA,UACA,UACA,UACA,mBACA,qB,QCsDa1E,EAr3BF,SAAC,GAqCV,IAnCG,IAFSC,EAEV,EAFUA,OAAQtL,EAElB,EAFkBA,MAAOZ,EAEzB,EAFyBA,WAAYD,EAErC,EAFqCA,aAAc4R,EAEnD,EAFmDA,KACrD1E,EACE,EADFA,cAAeC,EACb,EADaA,gBAAiBF,EAC9B,EAD8BA,cAAeZ,EAC7C,EAD6CA,MAAOE,EACpD,EADoDA,UAAWC,EAC/D,EAD+DA,YAI3DqB,EAAqBtB,EAAUuB,QAAO,SAAA1M,GAAO,OAAIA,EAAQ2M,YAAc5B,KAEvE6B,EAAezB,EAAUuB,QAAO,SAAA1M,GAAO,OAAIA,EAAQ2M,YAAc5B,KAAQxL,KAAI,SAAAsN,GAAe,OAAIA,EAAgB7M,WAEhH+M,EAAqBN,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBE,mBAAsB,KAAM9C,QAAQ,MACtH+C,EAAsBP,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBG,oBAAuB,KAAM/C,QAAQ,MACxHD,EAAgByC,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBG,oBAAsBH,EAAgBE,mBAAuB,KAAK9C,QAAQ,MACvJgD,EAAsBR,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBI,oBAAuB,KAAMhD,QAAQ,MAIxHiD,GAHwBT,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBM,sBAAyB,KAAMlD,QAAQ,MACvGwC,EAAmBlN,KAAI,SAAAsN,GAAe,OAAOA,EAAgBO,mBAAsB,KAAMnD,QAAQ,MAE7GwC,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OACnGM,EAAQZ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,IAAMF,EAAgBE,mBAAqB,IAAO,OACrJ/J,EAAUyJ,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACxJO,EAASb,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,KAAQ,KAAOF,EAAgBE,mBAAqB,IAAO,OACvJQ,EAAUd,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBE,mBAAqB,IAAO,OAGpGS,EAAOf,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,MAClGS,EAAYhB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,IAAMH,EAAgBG,oBAAsB,IAAO,KAC3JU,EAAWjB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,GAAKH,EAAgBG,oBAAsB,IAAO,OACzJW,EAAUlB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,KAAQ,KAAOH,EAAgBG,oBAAsB,IAAO,OAC1JY,EAAUnB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBG,oBAAsB,IAAO,OAGrGa,EAAUpB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,KACrGa,EAAUrB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,GAAKJ,EAAgBI,oBAAsB,IAAO,MACxJc,EAAUtB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJe,EAAUvB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,KAAQ,IAAMJ,EAAgBI,oBAAsB,IAAO,MACzJgB,EAAUxB,EAAmBC,QAAO,SAAAG,GAAe,OAAKA,EAAgBI,oBAAsB,IAAO,MAErGiB,EAAa,GACVzM,EAAI,EAAGA,EAAIsL,EAAmBrL,OAAQD,IACvCsL,EAAmBtL,GAAK,IAAMyM,EAAWhN,KAAK,WAC9C6L,EAAmBtL,IAAM,IAAMsL,EAAmBtL,GAAK,KAAOyM,EAAWhN,KAAK,WAC9E6L,EAAmBtL,IAAM,KAAOsL,EAAmBtL,GAAK,KAAOyM,EAAWhN,KAAK,WAC/E6L,EAAmBtL,IAAM,KAAOsL,EAAmBtL,GAAK,KAAOyM,EAAWhN,KAAK,WAC/E6L,EAAmBtL,IAAM,KAAOyM,EAAWhN,KAAK,WAIxD,IADA,IAAMiN,EAAc,GACX1M,EAAI,EAAGA,EAAIuL,EAAoBtL,OAAQD,IACxCuL,EAAoBvL,GAAK,IAAM0M,EAAYjN,KAAK,WAChD8L,EAAoBvL,IAAM,IAAMuL,EAAoBvL,GAAK,GAAK0M,EAAYjN,KAAK,WAC/E8L,EAAoBvL,IAAM,GAAKuL,EAAoBvL,GAAK,KAAO0M,EAAYjN,KAAK,WAChF8L,EAAoBvL,IAAM,KAAOuL,EAAoBvL,GAAK,KAAO0M,EAAYjN,KAAK,WAClF8L,EAAoBvL,IAAM,KAAO0M,EAAYjN,KAAK,WAI1D,IADA,IAAMkN,EAAc,GACX3M,EAAI,EAAGA,EAAIwL,EAAoBvL,OAAQD,IACxCwL,EAAoBxL,GAAK,IAAM2M,EAAYlN,KAAK,WAChD+L,EAAoBxL,IAAM,IAAMwL,EAAoBxL,GAAK,GAAK2M,EAAYlN,KAAK,WAC/E+L,EAAoBxL,IAAM,GAAKwL,EAAoBxL,GAAK,KAAO2M,EAAYlN,KAAK,WAChF+L,EAAoBxL,IAAM,KAAOwL,EAAoBxL,GAAK,KAAO2M,EAAYlN,KAAK,WAClF+L,EAAoBxL,IAAM,KAAO2M,EAAYlN,KAAK,WAI1D,IADA,IAAMmN,EAAkB,GACf5M,EAAI,EAAGA,EAAIuI,EAActI,OAAQD,IAClCuI,EAAcvI,GAAK,GAAO4M,EAAgBnN,KAAK,WAC/C8I,EAAcvI,IAAM,GAAOuI,EAAcvI,GAAK,GAAO4M,EAAgBnN,KAAK,WAC1E8I,EAAcvI,IAAM,GAAOuI,EAAcvI,GAAK,KAAO4M,EAAgBnN,KAAK,WAC1E8I,EAAcvI,IAAM,KAAOuI,EAAcvI,GAAK,GAAO4M,EAAgBnN,KAAK,WAC1E8I,EAAcvI,IAAM,GAAO4M,EAAgBnN,KAAK,WAGxD,IAAMoN,GAAW,CACb,CACIpQ,GAAI,EACJqQ,MAAO,QAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,CAAKxQ,UAAW,eAAgBL,MAAO,CAAEyE,MAAO,SAG5C,6BAAMzD,EAAaa,GAAS,KAAMwK,QAAQ,GAA1C,KACA,8CAcJ,kBAACwE,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAKlR,UAAU,kBACX,yBAAKL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,QAAUlD,UAAU,QAA3D,eACA,kBAAC,gBAAD,CAEIH,OAA8B,GAAtB8O,EAAalL,OAErBkN,QAAS,CAELC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KAGlBiB,KAAM,CACF+P,OAAQnC,EACRoC,SAAU,CACN,CACIC,MAAO,aACPjQ,KAAM+N,EACNlC,gBAAiBqD,QAOrC,kBAACiB,EAAA,EAAD,CAAKlR,UAAU,kBAUX,yBAAKL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,QAA3D,SAEA,kBAACT,EAAA,EAAD,CAAKxQ,UAAU,iBAEX,kBAAC,OAAD,CACIyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CACLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,WAUlBiB,KAAM,CACF+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,eACPjQ,KAAM+N,EACNpH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,0BAK7B,yBAAKzR,MAAO,CAAEG,SAAU,WAAYF,MAAO,OAAQ4S,IAAK,QACnD1D,EAAmB,GAAKA,EAAmB,GACxC,kBAAC,IAAD,CAAiB2B,KAAMgC,IAAcrO,MAAM,qBAC3C,kBAAC,IAAD,CAAiBqM,KAAMiC,IAAYC,KAAK,QAAQvO,MAAM,YAKlE,yBAAKzE,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,OAAQ2B,cAAe,QAAlF,cACA,kBAACpC,EAAA,EAAD,CAAKxQ,UAAU,iBACX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,gBAAf,SAEK6N,EAAcrM,GAASb,EAAaa,GAAS,KAAO,IACjD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,UAAUwS,KAAK,OAAO3S,UAAU,SAA/C,OACA6N,EAAcrM,GAASb,EAAaa,GAAS,KAAO,IAChD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,SAASwS,KAAK,OAAO3S,UAAU,SAA9C,QAAuE,IAG/E,wBAAIA,UAAU,SAAS6N,EAAcrM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAjF,KACA,0CAEJ,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,gBAAf,WAEK8N,EAAgBtM,GAASb,EAAaa,GAAS,KAAO,KACnD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,UAAUwS,KAAK,OAAO3S,UAAU,SAA/C,OACA8N,EAAgBtM,GAASb,EAAaa,GAAS,KAAO,KAClD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,SAASwS,KAAK,OAAO3S,UAAU,SAA9C,QAAuE,IAG/E,wBAAIA,UAAU,SAAS8N,EAAgBtM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAnF,KACA,2CAGR,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,aACX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,qBAAf,SAEK4N,EAAcpM,GAASb,EAAaa,GAAS,KAAO,EACjD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,UAAUwS,KAAK,OAAO3S,UAAU,SAA/C,OACA4N,EAAcpM,GAASb,EAAaa,GAAS,KAAO,EAChD,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,SAASwS,KAAK,OAAO3S,UAAU,SAA9C,QAAuE,IAG/E,wBAAIA,UAAU,SAAS4N,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAjF,KACA,0CACJ,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,qBAAf,SAEKgN,EAAMxL,GAASZ,EAAWY,GAAS,KAAO,IACvC,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,SAASwS,KAAK,OAAO3S,UAAU,SAA9C,QACAgN,EAAMxL,GAASZ,EAAWY,GAAS,KAAO,IACtC,kBAACqR,EAAA,EAAD,CAAO1S,QAAQ,UAAUwS,KAAK,OAAO3S,UAAU,SAA/C,QAAsE,IAG9E,wBAAIA,UAAU,QAAwD,KAA/CgN,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,GAAjE,KACA,4CAER,yBAAKhM,UAAU,YAAYL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAA7D,YACA,kBAACsN,EAAA,EAAD,CAAKxQ,UAAU,QAEX,kBAAC,WAAD,CACIyG,MAAO,IACPkK,QAAS,CACLU,SAAU,CACN7J,IAAK,CACD8J,YAAa,IAGrBV,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KAGlBiB,KAAM,CACF+P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACN,CACIhQ,KAAM,CAACkO,EAAOxL,OAAQ2L,EAAM3L,OAAQsB,EAAQtB,OAAQ4L,EAAO5L,OAAQ6L,EAAQ7L,QAC3EmJ,gBAAiB2E,YAYzD,CACItR,GAAI,EACJqQ,MAAO,SAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACX,kBAAC,gBAAD,CACIH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KASlBiB,KAAM,CACF+P,OAAQnC,EACRoC,SAAU,CACN,CACIC,MAAO,aACPjQ,KAAMgO,EACNnC,gBAAiBsD,QAMrC,kBAACgB,EAAA,EAAD,CAAKlR,UAAU,QAKX,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE1C,6BAAMwJ,EAAcpM,GAAS,KAAMwK,QAAQ,GAA3C,KAAgD,kBAAC,IAAD,CAAiB5H,MAAM,QAAQqM,KAAMC,OAErF,6CAIJ,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,sBACX,kBAAC,OAAD,CACIyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,WAGlBiB,KAAM,CACF+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACPjQ,KAAMgO,EACNrH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYjC,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAvC,cACA,kBAACsN,EAAA,EAAD,CAAKxQ,UAAU,qBAEX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,YAArC,SAAwD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMtD,EAAcrM,GAASoM,EAAcpM,GAAS,KAAKwK,QAAQ,GAAjE,KAA0E,yCAC7N,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASoM,EAAcpM,GAAS,KAAKwK,QAAQ,GAAnE,KAA4E,0CAIlO,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE7M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACIrG,MAAO,IACPkK,QAAS,CAOLU,SAAU,CACN7J,IAAK,CACD8J,YAAa,IAGrBV,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KAGlBiB,KAAM,CACF+P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACN,CACIhQ,KAAM,CAACwO,EAAK9L,OAAQ+L,EAAU/L,OAAQgM,EAAShM,OAAQiM,EAAQjM,OAAQkM,EAAQlM,QAC/EmJ,gBAAiB2E,WAerD,CACItR,GAAI,EACJqQ,MAAO,SAEPC,QACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACX,kBAAC,gBAAD,CACIH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KASlBiB,KAAM,CACF+P,OAAQnC,EACRoC,SAAU,CACN,CACIC,MAAO,aACPjQ,KAAMiO,EACNpC,gBAAiBuD,QAMrC,kBAACe,EAAA,EAAD,CAAKlR,UAAU,QAKX,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE1C,6BAAMyJ,EAAcrM,GAAS,KAAMwK,QAAQ,GAA3C,KAAgD,kBAAC,IAAD,CAAiB5H,MAAM,QAAQqM,KAAMU,OAErF,6CAIJ,kBAACX,EAAA,EAAD,CAAKxQ,UAAU,sBACX,kBAAC,OAAD,CACIyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,WAGlBiB,KAAM,CACF+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACPjQ,KAAMiO,EACNtH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYjC,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAvC,cACA,kBAACsN,EAAA,EAAD,CAAKxQ,UAAU,qBAEX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,SAAqD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAInR,UAAU,SAASW,EAAaa,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAAjF,KAA0F,yCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAInR,UAAU,SAAS8N,EAAgBtM,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAApF,KAA6F,0CAIvN,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,kBAAC,IAAD,CAAiBA,MAAM,QAAQqM,KAAMC,MAAa,wBAAI1Q,UAAU,SAAS4N,EAAcpM,GAASqM,EAAcrM,GAAS,KAAKwK,QAAQ,GAAlF,KAA4F,yBAAKhM,UAAU,QAAf,YACpM,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,kBAAC,IAAD,CAAiBA,MAAM,mBAAmBqM,KAAMU,MAAe,wBAAInR,UAAU,SAASgN,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAElM,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACIrG,MAAO,IACPkK,QAAS,CAOLU,SAAU,CACN7J,IAAK,CACD8J,YAAa,IAGrBV,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KAGlBiB,KAAM,CACF+P,OAAQ,CAAC,gBAAiB,eAAgB,iBAAkB,gBAAiB,kBAC7EC,SAAU,CACN,CACIhQ,KAAM,CAAC6O,EAAQnM,OAAQoM,EAAQpM,OAAQqM,EAAQrM,OAAQsM,EAAQtM,OAAQuM,EAAQvM,QAC/EmJ,gBAAiB2E,WAarD,CACItR,GAAI,EACJqQ,MAAO,WAEPC,QAAS,oCACL,kBAACC,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAKlR,UAAU,QACX,kBAAC,gBAAD,CACIH,OAAQ,IACR4G,MAAO,IACPkK,QAAS,CACLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KASlBiB,KAAM,CACF+P,OAAQnC,EACRoC,SAAU,CACN,CACIC,MAAO,aACPjQ,KAAM+N,EACNlC,gBAAiBqD,QAMrC,kBAACiB,EAAA,EAAD,CAAKlR,UAAU,QAKX,kBAACwQ,EAAA,EAAD,CAAKxQ,UAAU,eAAeL,MAAO,CAAEyE,MAAO,SAE1C,6BAAMzD,EAAaa,GAAS,KAAMwK,QAAQ,GAA1C,KAA+C,kBAAC,IAAD,CAAiB5H,MAAM,QAAQqM,KAAMC,OAEpF,+CAIJ,kBAACF,EAAA,EAAD,CAAKxQ,UAAU,sBACX,kBAAC,OAAD,CACIyG,MAAO,IACP5G,OAAQ,IACR8Q,QAAS,CAOLC,OAAQ,CACJC,SAAS,EACT/Q,SAAU,WAGlBiB,KAAM,CACF+P,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CC,SAAU,CACN,CACIC,MAAO,gBACPjQ,KAAM+N,EACNpH,MAAM,EACNkF,gBAAiB,uBACjBwE,YAAa,2BAYjC,yBAAKzR,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,OAAQ+N,WAAY,SAA3D,cACA,kBAACT,EAAA,EAAD,CAAKxQ,UAAU,qBAEX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,SAAqD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMtD,EAAcrM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCACzN,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,WAAuD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMrD,EAAgBtM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAlE,KAA2E,yCAIjO,kBAACwE,EAAA,EAAD,CAAKxQ,UAAU,gBACX,kBAACkR,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,QAAQqM,KAAMC,OAAjH,IAAqI,6BAAM9C,EAAcpM,GAASb,EAAaa,GAAS,KAAKwK,QAAQ,GAAhE,KAAyE,wCAC9M,kBAACkF,EAAA,EAAD,CAAKlR,UAAU,MAAML,MAAO,CAAEyE,MAAO,SAArC,UAAsD,yBAAKpE,UAAU,QAAO,kBAAC,IAAD,CAAiBoE,MAAM,mBAAmBqM,KAAMU,OAAqB,6BAAMnE,EAAMxL,GAASZ,EAAWY,IAAQwK,QAAQ,IAAQ,0CAE7M,yBAAKhM,UAAU,OAAOL,MAAO,CAAEyE,MAAO,OAAQlB,SAAU,SAAxD,gBAAgF4J,GAChF,kBAAC,WAAD,CACIrG,MAAO,IACPkK,QAAS,CAOLU,SAAU,CACN7J,IAAK,CACD8J,YAAa,IAGrBV,OAAQ,CACJC,SAAS,EACT/Q,SAAU,KAGlBiB,KAAM,CACF+P,OAAQ,CAAC,eAAgB,cAAe,gBAAiB,eAAgB,iBACzEC,SAAU,CACN,CACIhQ,KAAM,CAACkO,EAAOxL,OAAQ2L,EAAM3L,OAAQsB,EAAQtB,OAAQ4L,EAAO5L,OAAQ6L,EAAQ7L,QAC3EmJ,gBAAiB2E,YA+I/CC,GAAgB,WAAO,IAAD,EACIC,mBAAS,GADb,mBACjBC,EADiB,KACTC,EADS,KAGxB,OACI,yBAAK3R,UAAU,WACX,yBAAKA,UAAU,QACVqQ,GAAS/O,KAAI,gBAAGrB,EAAH,EAAGA,GAAIwQ,EAAP,EAAOA,KAAMH,EAAb,EAAaA,MAAb,OAAyB,kBAACsB,GAAD,CACnCC,IAAKvB,EACLG,KAAMA,EACNH,MAAOA,EACPwB,cAAe,kBAAMH,EAAU1R,IAC/B8R,SAAUL,IAAWzR,QAI7B,yBAAKD,UAAU,WACVqQ,GAAS/O,KAAI,YAAsB,IAAnBrB,EAAkB,EAAlBA,GAAIsQ,EAAc,EAAdA,QACjB,OAAOmB,IAAWzR,EAAKsQ,EAAU,SAO/CqB,GAAmB,SAAC,GAMnB,IAAD,IALFnB,YAKE,MALK,GAKL,MAJFH,aAIE,MAJM,GAIN,MAFFwB,qBAEE,MAFc,kBAAMtM,QAAQwM,MAAM,0CAElC,MADFD,gBACE,SACF,OACI,yBAAK/R,UAAW+R,EAAW,UAAY,4BAA6B7R,QAAS4R,GACzE,uBAAInS,MAAO,CAACkR,QAAS,QAAS7Q,UAAU,kBAAkBsQ,EAAOG,EAAjE,OAMZ,OACI,oCACI,yBAAKzQ,UAAWuS,EAAO,UAAY,UAC/B,kBAAC,WAAD,CACIN,YAAY,aACZC,aAAa,UACbC,WAAW,GAGX,yBAAKnS,UAAU,QACX,yBAAKA,UAAYuS,EAAkB,UAAX,UACpB,kBAACH,EAAA,EAAD,KACI,kBAAC5B,EAAA,EAAD,CAAKxQ,UAAU,SACX,kBAACkR,EAAA,EAAD,CAAKmB,GAAI,GAAIrS,UAAU,aAAa8M,GACpC,kBAACoE,EAAA,EAAD,CAAKlR,UAAU,QACX,yBAAKL,MAAO,CAAEkR,QAAS,OAAQyB,eAAgB,aAC3C,kBAACvS,EAAA,EAAD,CAEIG,QAASiN,EAEThN,QAAQ,eAERH,UAAU,gBAGV,qCAOhB,kBAACwR,GAAD,CAEItE,UAAWA,EACX1L,MAAOA,EACPsL,OAAQA,EACRnM,aAAcA,EACdkN,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfZ,MAAOA,WAoBvCuE,EAAY,CACZ,UACA,UACA,UACA,UACA,UACA,mBACA,qBCh4BEuB,G,OAAe,CACjB/F,QAAQ,EACRwF,MAAM,EACNzF,OAAQ,GACRtL,MAAO,KAqPIuR,EAlPH,WAAM,MAIkBtB,mBAAS,IAJ3B,mBAIPuB,EAJO,KAIKC,EAJL,KAKd5Q,qBAAU,WAAM,4CACZ,8BAAA6Q,EAAA,+EAE6BhS,MCxBXiS,6BDsBlB,cAEcC,EAFd,gBAGiCA,EAAO/R,OAHxC,OAGc2R,EAHd,OAIQC,EAAU,CAACD,IACXxN,QAAQC,IAAIuN,EAAY,cALhC,kDAOQxN,QAAQC,IAAR,MAPR,2DADY,uBAAC,WAAD,wBAWZ4N,KACD,IAGH,IAAMC,EAAY,SAACzB,GACf,OAAOmB,EAAW1R,KAAI,SAACP,GAAD,OAAUA,EAAK8Q,OAGnCvE,EAAcgG,EAAU,sBACxB/F,EAAe+F,EAAU,uBACzB9F,EAAe8F,EAAU,uBACzB7F,EAAiB6F,EAAU,yBAC3B5F,EAAc4F,EAAU,sBAC9B9N,QAAQC,IAAI6H,EAAa,eACzB,IAAMF,EAAmBkG,EAAU,cAC7B/E,EAAc+E,EAAU,SA/BhB,EAoCsB7B,mBAAS,IApC/B,mBAoCP8B,EApCO,KAoCKC,EApCL,KAqCdnR,qBAAU,WAAM,4CACZ,8BAAA6Q,EAAA,+EAE6BhS,MCpDRiS,oCDkDrB,cAEcC,EAFd,gBAGiCA,EAAO/R,OAHxC,OAGckS,EAHd,OAIQC,EAAc,YAAID,IAJ1B,kDAOQ/N,QAAQC,IAAR,MAPR,2DADY,uBAAC,WAAD,wBAWZ4N,KACD,IAEH,IAAMI,EAAgB,SAAC5B,GACnB,OAAO0B,EAAWjS,KAAI,SAACoN,GAAD,OAAeA,EAAUmD,OAG7CjR,EAAa6S,EAAc,cAC3B9S,EAAe8S,EAAc,sBAC7B5F,EAAgB4F,EAAc,uBAC9B3F,EAAkB2F,EAAc,yBAChC7F,EAAgB6F,EAAc,uBAC9B1F,EAAe0F,EAAc,sBAM7BzG,GAJQyG,EAAc,SACbA,EAAc,UACZA,EAAc,YAChBA,EAAc,UACfA,EAAc,UAEtB9F,EAAiB8F,EAAc,aAErCjO,QAAQC,IAAIkI,EAAgB,kBAE5B,IAxEc,EA2EoB8D,mBAAS,IA3E7B,mBA2EPvE,EA3EO,KA2EIwG,EA3EJ,KA4EdrR,qBAAU,WACN,IAAMsM,EAAe,GADT,4CAEZ,gCAAAuE,EAAA,+EAE0BhS,MC/FPiS,mCD6FnB,cAEcQ,EAFd,gBAGgCA,EAAItS,OAHpC,OAMQ,IAHM6L,EAHd,OAIQwG,EAAa,YAAIxG,IAER1J,EAAI,EAAGA,EAAI0J,EAAUzJ,OAAQD,IAClCmL,EAAa1L,KAAK2Q,OAAO1G,EAAU1J,GAAGzB,UAPlD,kDAUQyD,QAAQC,IAAR,MAVR,2DAFY,0DAeZoO,KACD,IA5FW,MA8FYpC,mBAAS,CAACqB,IA9FtB,mBA8FP7F,EA9FO,KA8FA6G,EA9FA,KAgKRpU,EAAe,WACjBoU,EAAS,2BACFhB,GADC,IAEJ/F,QAAQ,EACRD,OAAQ,SACRtL,MAAO,MAKf,SAAS2L,IACL2G,GAAU7G,GAKd,OAFAzH,QAAQC,IAAIqN,EAAc,eAAgB7F,EAAO,SAG7C,oCAEI,kBAAC,EAAD,CACI7N,WA1EO,WACf0U,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,OACRtL,MAAO,EACPuL,QAAQ,MAqEJ1N,aAzDS,WACjByU,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,SACRtL,MAAO,EACPuL,QAAQ,MAoDJgH,OAtFG,SAAC,GAAuB,IAArBjH,EAAoB,EAApBA,OAAQtL,EAAY,EAAZA,MACtBsS,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQA,EACRtL,MAAOA,EACPuL,QAAQ,MAiFJrN,aAAcA,EACdD,aAnDS,WACjBqU,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,SACRtL,MAAO,EACPuL,QAAQ,MA8CJvN,mBA3Ce,WACvBsU,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,gBACRtL,MAAO,EACPuL,QAAQ,MAsCJxN,mBAnCe,WACvBuU,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,gBACRtL,MAAO,EACPuL,QAAQ,MA8BJzN,cAxEU,WAClBwU,EAAS,2BACFhB,GADC,IAEJP,MAAM,EACNzF,OAAQ,oBACRtL,MAAO,EACPuL,QAAQ,QAqER,yBAAK/M,UAAU,WACX,kBAAC,EAAD,CACImN,YAAaA,EACb3L,MAAOyL,EAAMzL,MACb+Q,KAAMtF,EAAMsF,KACZzF,OAAQG,EAAMH,OACdI,UAAWA,EACXqG,WAAYA,EACZ3S,WAAYA,EACZD,aAAcA,EACdkN,cAAeA,EACfC,gBAAiBA,EACjBF,cAAeA,EACfG,aAAcA,EACdf,MAAOA,IAIX,kBAACgH,EAAD,CACI/G,MAAOA,EAAMF,OACbrN,aAAcA,EACdyN,YAAaA,EACb3L,MAAOyL,EAAMzL,MACbuL,OAAQE,EAAMF,OACdD,OAAQG,EAAMH,OACdI,UAAWA,EACXqG,WAAYA,EACZ3S,WAAYA,EACZ+M,eAAgBA,EAChBX,MAAOA,EACPM,YAAaA,EACbC,aAAcA,EACdC,aAAcA,EACdC,eAAgBA,EAChBC,YAAaA,EACb/M,aAAcA,EACdiN,cAAeA,EACfC,cAAeA,EACfC,gBAAiBA,EACjBC,aAAcA,EACdX,iBAAkBA,EAClBC,OAAQkB,IAGd,yBAAKtO,GAAG,UAGV,kBAAC,EAAD,CAAKU,aAAcA,EAAcC,WAAYA,MElPrCsL,QACW,cAA7B+H,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASpN,OACP,kBAAC,IAAMqN,WAAP,KACE,kBAAC,EAAD,OAEFxQ,SAAS8F,eAAe,SDyHpB,kBAAmB2K,WACrBA,UAAUC,cAAcC,MACrBtT,MAAK,SAAAuT,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLxM,QAAQwM,MAAMA,EAAM6C,a","file":"static/js/main.87a5a4f9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({ toggleAsia, toggleEurope, toggleOceania, toggleNorthAmerica, toggleSouthAmerica, toggleAfrica, toggleGlobal }) => {\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        right: \"110px\",\r\n        height: \"100vh\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <Button\r\n        className=\"asia button\"\r\n        id=\"asia\"\r\n        onClick={toggleAsia}\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Asia</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"europe button\"\r\n        onClick={toggleEurope}\r\n        id=\"europe\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Europe</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"northamerica button\"\r\n        onClick={toggleNorthAmerica}\r\n        id=\"northamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>North America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"africa button\"\r\n        onClick={toggleAfrica}\r\n        // size=\"md\"\r\n        id=\"africa\"\r\n        variant=\"outline-info\"\r\n      // className={getData(\"cases\")[1] / 1000000 <= 10 ? \"asia\" : \"asia2\"}\r\n      >\r\n        <h6>Africa</h6>\r\n        {/* {continentCases[0]} */}\r\n      </Button>\r\n      <Button\r\n        className=\"southamerica button\"\r\n        onClick={toggleSouthAmerica}\r\n        id=\"southamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>South America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"oceania button\"\r\n        onClick={toggleOceania}\r\n        id=\"oceania\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n          Oceania\r\n        </h6>\r\n      </Button>\r\n      <Button\r\n        className=\"global button\"\r\n        onClick={toggleGlobal}\r\n        id=\"global\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n          {/* <i className=\"fa fa-info-circle\"></i> */}\r\n          Global\r\n        </h6>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport \"./Map.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nconst Map2 = ({casesMillion, population}) => {\r\n  const mapboxElRef = useRef(null); // DOM element to render map\r\n\r\n  const fetcher = (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude\r\n            ]\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n      \r\n\r\n          }\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const average =\r\n        data.reduce((total, next) => total + next.properties.cases, 0) /\r\n        data.length;\r\n      const min = Math.min(...data.map((item) => item.properties.cases));\r\n      const max = Math.max(...data.map((item) => item.properties.cases));\r\n\r\n      const averageD =\r\n        data.reduce((total, next) => total + next.properties.deaths, 0) /\r\n        data.length;\r\n      const minD = Math.min(...data.map((item) => item.properties.deaths));\r\n      const maxD = Math.max(...data.map((item) => item.properties.deaths));\r\n\r\n      console.log(average, min, max, 'stats')\r\n      console.log(averageD, minD, maxD, 'statsD')\r\n\r\n      const amr = averageD / average;\r\n      const minmr = minD / min;\r\n      const maxmr = maxD / max;\r\n      console.log(amr, minmr, maxmr, 'amr')\r\n\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [99, 20], // Asia - intial geo location\r\n        zoom: 3 // initial zoom\r\n      });\r\n\r\n\r\n     \r\n\r\n//DOUGHNUT      \r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const cases1 = ['<', ['get', 'cases'], 10000];\r\n      const cases2 = ['all', ['>=', ['get', 'cases'], 10000], ['<', ['get', 'cases'], 100000]];\r\n      const cases3 = ['all', ['>=', ['get', 'cases'], 100000], ['<', ['get', 'cases'], 250000]];\r\n      const cases4 = ['all', ['>=', ['get', 'cases'], 250000], ['<', ['get', 'cases'], 500000]];\r\n      const cases5 = ['>=', ['get', 'cases'], 1000000];\r\n\r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const deaths1 = ['<', ['get', 'deaths'], 10];\r\n      const deaths2 = ['all', ['>=', ['get', 'deaths'], 100], ['<', ['get', 'deaths'], 1000]];\r\n      const deaths3 = ['all', ['>=', ['get', 'deaths'], 1000], ['<', ['get', 'deaths'], 5000]];\r\n      const deaths4 = ['all', ['>=', ['get', 'deaths'], 5000], ['<', ['get', 'deaths'], 20000]];\r\n      const deaths5 = ['>=', ['get', 'deaths'], 20000];\r\n\r\n      const mr1 = deaths1 / cases1;\r\n      const mr2 = deaths2 / cases2;\r\n      const mr3 = deaths3 / cases3;\r\n      const mr4 = deaths4 / cases4;\r\n      const mr5 = deaths5 / cases5;\r\n\r\n      // colors to use for the categories\r\n      const colors = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n      const colors2 = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n//DOT\r\n      const size = 150;\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext('2d');\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(67, 66, 66, ${1 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            radius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n          ).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        }\r\n      };\r\n\r\n//LAYERS\r\n      map.on('load', () => {\r\n        // add a clustered GeoJSON source for a sample set of earthquakes\r\n        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource('dot-point', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            'type': 'FeatureCollection',\r\n            'features': data\r\n          }\r\n        });\r\n        map.addLayer({\r\n          'id': 'layer-with-pulsing-dot',\r\n          'type': 'symbol',\r\n          'source': 'dot-point',\r\n          'layout': {\r\n            'icon-image': 'pulsing-dot'\r\n          }\r\n        });\r\n\r\n        map.addSource('points', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            type: \"FeatureCollection\",\r\n            features: data\r\n          },\r\n          'cluster': true,\r\n          'clusterRadius': 50,\r\n          'clusterProperties': {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            'deaths1': ['+', ['case', deaths1, 1, 0]],\r\n            'deaths2': ['+', ['case', deaths2, 1, 0]],\r\n            'deaths3': ['+', ['case', deaths3, 1, 0]],\r\n            'deaths4': ['+', ['case', deaths4, 1, 0]],\r\n            'deaths5': ['+', ['case', deaths5, 1, 0]],\r\n            'cases1': ['+', ['case', cases1, 1, 0]],\r\n            'cases2': ['+', ['case', cases2, 1, 0]],\r\n            'cases3': ['+', ['case', cases3, 1, 0]],\r\n            'cases4': ['+', ['case', cases4, 1, 0]],\r\n            'cases5': ['+', ['case', cases5, 1, 0]]\r\n          },\r\n\r\n        });\r\n\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          'id': 'Deaths',\r\n          'type': 'circle',\r\n          'source': 'points',\r\n\r\n          'filter': ['!=', 'cluster', true],\r\n          'paint': {\r\n            'circle-color': [\r\n              'case',\r\n              deaths1,\r\n              colors2[0],\r\n              deaths2,\r\n              colors2[1],\r\n              deaths3,\r\n              colors2[2],\r\n              deaths4,\r\n              colors2[3],\r\n              colors2[4]\r\n            ],\r\n            'circle-opacity': 0.9,\r\n            'circle-radius': 6,\r\n            // \"circle-radius\": [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     1,\r\n            //     min,\r\n            //     1000,\r\n            //     8,\r\n            //     average / 4,\r\n            //     10,\r\n            //     average / 2,\r\n            //     14,\r\n            //     average,\r\n            //     18,\r\n            //     max,\r\n            //     50\r\n            //   ],\r\n          }\r\n        });\r\n              // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n              map.addLayer({\r\n                'id': 'Cases',\r\n                'type': 'circle',\r\n                'source': 'points',\r\n                'filter': ['!=', 'cluster', true],\r\n                'paint': {\r\n                  'circle-color': [\r\n                    'case',\r\n                    cases1,\r\n                    colors[0],\r\n                    cases2,\r\n                    colors[1],\r\n                    cases3,\r\n                    colors[2],\r\n                    cases4,\r\n                    colors[3],\r\n                    colors[4]\r\n                  ],\r\n                  'circle-opacity': 0.6,\r\n                  'circle-radius': 12,\r\n                }\r\n              });\r\n\r\n        map.addLayer({\r\n          'id': 'clusters',\r\n          'type': 'symbol',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'layout': {\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'points'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10,\r\n            'visibility': 'visible'\r\n          },\r\n          'paint': {\r\n            'text-color': [\r\n              'case',\r\n              ['<', ['get', 'cases'], 3],\r\n              'black',\r\n              'white'\r\n            ],\r\n            // 'circle-color': [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     min,\r\n            //     \"#ffffb2\",\r\n            //     max / 32,\r\n            //     \"#fed976\",\r\n            //     max / 16,\r\n            //     \"#feb24c\",\r\n            //     max / 8,\r\n            //     \"#fd8d3c\",\r\n            //     max / 4,\r\n            //     \"#fc4e2a\",\r\n            //     max / 2,\r\n            //     \"#e31a1c\",\r\n            //     max,\r\n            //     \"#b10026\"\r\n            //   ],\r\n            //   \"circle-opacity\": 0.75,\r\n            //       \"circle-stroke-width\": [\r\n            //         \"interpolate\",\r\n            //         [\"linear\"],\r\n            //         [\"get\", \"cases\"],\r\n            //         1,\r\n            //         1,\r\n            //         max,\r\n            //         1.75\r\n            //       ],\r\n          }\r\n        });\r\n\r\n        map.addLayer({\r\n          'id': 'clusters2',\r\n          'type': 'symbol',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'layout': {\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'points'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10,\r\n            'visibility': 'visible'\r\n          },\r\n          'paint': {\r\n            'text-color': [\r\n              'case',\r\n              ['<', ['get', 'deaths'], 3],\r\n              'black',\r\n              'white'\r\n            ],\r\n\r\n          }\r\n        });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures('points');\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on('render', () => {\r\n          if (!map.isSourceLoaded('points')) return;\r\n          updateMarkers();\r\n        });\r\n      });\r\n\r\n      // code for creating an SVG donut chart from feature properties\r\n      function createDonutChart(props) {\r\n        const offsets = [];\r\n        const counts = [\r\n          props.deaths1,\r\n          props.deaths2,\r\n          props.deaths3,\r\n          props.deaths4,\r\n          props.deaths5\r\n        ];\r\n        let total = 0;\r\n        for (const count of counts) {\r\n          offsets.push(total);\r\n          total += count;\r\n        }\r\n        const fontSize =\r\n          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n        const r =\r\n          total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n        const r0 = Math.round(r * 0.6);\r\n        const w = r * 2;\r\n\r\n        let html = `<div>\r\n        <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n        for (let i = 0; i < counts.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total,\r\n            (offsets[i] + counts[i]) / total,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n        html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n        <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n        ${total.toLocaleString()}\r\n        </text>\r\n        </svg>\r\n        </div>`;\r\n\r\n        const el = document.createElement('div');\r\n        el.innerHTML = html;\r\n        return el.firstChild;\r\n      }\r\n\r\n      function donutSegment(start, end, r, r0, color) {\r\n        if (end - start === 1) end -= 0.00001;\r\n        const a0 = 2 * Math.PI * (start - 0.25);\r\n        const a1 = 2 * Math.PI * (end - 0.25);\r\n        const x0 = Math.cos(a0),\r\n          y0 = Math.sin(a0);\r\n        const x1 = Math.cos(a1),\r\n          y1 = Math.sin(a1);\r\n        const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n        // draw an SVG path\r\n        return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n      }\r\n\r\n      // inspect a cluster on click\r\n      map.on('click', 'clusters', function (e) {\r\n        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });\r\n        var clusterId = features[0].properties.cluster_id;\r\n        console.log('hi')\r\n        map.getSource('points').getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n          if (err)\r\n            return;\r\n\r\n          map.easeTo({\r\n            center: features[0].geometry.coordinates,\r\n            zoom: zoom\r\n          });\r\n          // console.log(clusterId, 'clusterID', features, 'features', features[0].properties.cluster_id)\r\n        });\r\n      });\r\n    \r\n//TOGGLE\r\n      // After the last frame rendered before the map enters an \"idle\" state.\r\n      map.on('idle', () => {\r\n        // If these two layers were not added to the map, abort\r\n        if (!map.getLayer('Cases') || !map.getLayer('Deaths')) {\r\n          return;\r\n        }\r\n\r\n        // Enumerate ids of the layers.\r\n        const toggleableLayerIds = ['Cases', 'Deaths'];\r\n  \r\n        // Set up the corresponding toggle button for each layer.\r\n        for (const id of toggleableLayerIds) {\r\n          // Skip layers that already have a button set up.\r\n          if (document.getElementById(id)) {\r\n            continue;\r\n          }\r\n\r\n          // Create a link.\r\n          const link = document.createElement('a');\r\n          link.id = id;\r\n          link.href = '#';\r\n          link.textContent = id;\r\n          link.className = 'active';\r\n\r\n          // Show or hide layer when the toggle is clicked.\r\n          link.onclick = function (e) {\r\n            const clickedLayer = this.textContent;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            const visibility = map.getLayoutProperty(\r\n              clickedLayer,\r\n              'visibility'\r\n            );\r\n\r\n            // Toggle layer visibility by changing the layout object's visibility property.\r\n            if (visibility === 'visible') {\r\n              map.setLayoutProperty(clickedLayer, 'visibility', 'none');\r\n              this.className = '';\r\n            } else {\r\n              this.className = 'active';\r\n              map.setLayoutProperty(\r\n                clickedLayer,\r\n                'visibility',\r\n                'visible'\r\n              );\r\n            }\r\n          };\r\n          const layers = document.getElementById('menu');\r\n          layers.appendChild(link);\r\n        }\r\n      });\r\n\r\n      //Add navigation controls to the top right of the canvas\r\n      map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      // Add navigation to center the map on your geo location\r\n      map.addControl(\r\n        new mapboxgl.GeolocateControl({\r\n          fitBoundsOptions: { maxZoom: 6 }\r\n        })\r\n      );\r\n\r\n      //CIRCLES\r\n      map.once(\"load\", function () {\r\n\r\n//POPUP\r\n        const popup2 = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId2;\r\n\r\n        map.on(\"click\", \"clusters\", (e) => {\r\n          // const id = e.features[0].properties.id;\r\n          // Change the pointer type on mouseenter\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n          const coordinates = e.geometry.coordinates.slice();\r\n          popup2.setLngLat([0, 20]).addTo(map);\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"clusters\", function () {\r\n          lastId2 = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup2.remove();\r\n        });\r\n\r\n\r\n        const popup = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId;\r\n\r\n        map.on(\"mousemove\", \"Cases\" && \"Deaths\", (e) => {\r\n          const id = e.features[0].properties.id;\r\n\r\n          if (id !== lastId) {\r\n            lastId = id;\r\n            const {\r\n              cases,\r\n              deaths,\r\n              country,\r\n              province\r\n            } = e.features[0].properties;\r\n\r\n            // Change the pointer type on mouseenter\r\n            map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            const coordinates = e.features[0].geometry.coordinates.slice();\r\n           \r\n            const countryISO =\r\n              lookup.byCountry(country)?.iso2 ||\r\n              lookup.byInternet(country)?.iso2;\r\n            const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n            const provinceHTML =\r\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n            const countryFlagHTML = Boolean(countryISO)\r\n            \r\n              ? `<img src=\"${countryFlag}\"></img>`\r\n              : \"\";\r\n            \r\n\r\n            const HTML = `  ${countryFlagHTML}<p>Country: <b>${country}</b></p>\r\n                ${provinceHTML}\r\n                <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n                <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n                <p>Population: <b>${population}</b></p>\r\n                `;\r\n\r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            }\r\n\r\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\r\n          }\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"Cases\" && \"Deaths\", function () {\r\n          lastId = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        // map.doubleClickZoom.enable();\r\n//IDS\r\n        document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [3.2, 1.8],\r\n            essential: true,\r\n          });\r\n        });\r\n        document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 4,\r\n            center: [6, 47],\r\n            essential: true,\r\n          });\r\n        });\r\n        document\r\n          .getElementById(\"northamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [-120, 35],\r\n              essential: true,\r\n            });\r\n          });\r\n        document\r\n          .getElementById(\"southamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.5,\r\n              center: [-74, -4],\r\n              essential: true,\r\n            });\r\n          });\r\n        document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.1,\r\n            center: [100, 17],\r\n            essential: true,\r\n          });\r\n        });\r\n        document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.7,\r\n            center: [131, -28],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"global\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 1.7,\r\n            center: [0, 20],\r\n            essential: true,\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mapContainer\" >\r\n        {/* Mapbox Container */}\r\n        <div className=\"mapBox\" ref={mapboxElRef} />\r\n      </div>\r\n      <div id=\"state-legend\" className=\"legend\">\r\n        <h6>Covid-19</h6>\r\n        <div><span style={{ backgroundColor: \"#dd5182\" }}></span>Highest</div>\r\n        <div><span style={{ backgroundColor: \"#ff6e54\" }}></span>Higher</div>\r\n        <div><span style={{ backgroundColor: \"#ffa600\" }}></span>Average</div>\r\n        <div><span style={{ backgroundColor: \"#955196\" }}></span>Lower</div>\r\n        <div><span style={{ backgroundColor: \"#444e86\" }}></span>Lowest</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map2;","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nconst Menu = ({ region, index, population, global, state,\r\n  tests, countries, handleClose, populationGlobal, testsG,\r\n  globalCases, globalDeaths, globalActive, globalCritical, globalTests, continentNames, casesMillion, deathsMillion, activeMillion, criticalMillion, testsMillion\r\n}) => {\r\n\r\n  const casesPerContinent = casesMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const deathsPerContinent = deathsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const activePerContinent = activeMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const criticalPerContinent = criticalMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const testsPerContinent = testsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  console.log(casesPerContinent, 'casesPerContinent')\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(1);\r\n  const activeGlobal = (globalActive / 1000).toFixed(1);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(1);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n\r\n\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(country => country.continent === region)\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries.filter(country => country.continent === region && country.population > 100000).map(selectedCountry => selectedCountry.country.substring(0, 12))\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n  const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n  const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n  const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n  const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n  const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n  // Create strata for classifting cases for doughnut charts\r\n  const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n  const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n  const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n  const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n  const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n  // Create Strata for Deaths\r\n  const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n  const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n  const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n  const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n  const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n  const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n  const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n  const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n  const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) { colorCases.push(\"#444e86\") }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) { colorCases.push(\"#955196\") }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) { colorCases.push(\"#ffa600\") }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 250) { colorCases.push(\"#ff6e54\") }\r\n    if (casesPerContinent[i] >= 250) { colorCases.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n    if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n    if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n    if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n    if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n    if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n    if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n    if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n  }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: 'Cases',\r\n      content:\r\n        <>\r\n          <Row className={'box p-2 m-1'} style={{ color: \"#fff\" }}>\r\n         \r\n        \r\n            <h1>{casesGlobal} <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n            <h5 >Cases / 1000 </h5>\r\n        \r\n          </Row>\r\n          <Row className=\"p-2 mt-1\">\r\n          \r\n            <Bar\r\n              height={200}\r\n              width={300}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: continentNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerContinent,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Row>\r\n          <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n          <Row className=\"subtitle m-1 pt-1\" >\r\n            <Col className=\"box px-4 py-2 ml-4\" >Active <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(activeGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>cases</div></Col>\r\n            <Col className=\"box px-4 py-2 ml-1\">Critical <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3  className=\"mb-0\">{(criticalGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>cases</div></Col>\r\n          </Row>\r\n          <Row className=\"subtitle m-1\" >\r\n            <Col className=\"box px-4 py-2 ml-4\" > Deaths<h3 className=\"mb-0\">{(deathsGlobal / casesGlobal * 100).toFixed(2)}%</h3><div >cases</div></Col>\r\n            <Col className=\"box px-4 py-2 ml-1\"  > Tests <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3  className=\"mb-0\">{(testsG / populationGlobal).toFixed(2)}</h3><div >/person</div></Col>\r\n          </Row>\r\n          <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n\r\n          <Row className=\"subtitle px-3 pt-2\">\r\n            <Line\r\n              width={160}\r\n              height={100}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: 'bottom'\r\n                }\r\n              }}\r\n              data={{\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                datasets: [\r\n                  {\r\n                    label: \"First dataset\",\r\n                    data: casesMillion,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                    borderColor: \"rgba(75,192,192,1)\"\r\n                  },\r\n                ]\r\n              }}\r\n            />\r\n          </Row>\r\n          \r\n         \r\n          <Doughnut\r\n            width={170}\r\n            options={{\r\n              elements: {\r\n                arc: {\r\n                  borderWidth: 0\r\n                }\r\n              },\r\n              legend: {\r\n                display: false,\r\n                position: ''\r\n              },\r\n            }}\r\n            data={{\r\n              labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n              datasets: [\r\n                {\r\n                  data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                  backgroundColor: colorsPie,\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n\r\n\r\n        </>\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Deaths',\r\n      // icon: 'tabitem__icon fas fa-child',\r\n      content:\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: deathsPerContinent,\r\n                      backgroundColor: colorDeaths,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{deathsGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                <h5 >/1000 Deaths</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: deathsMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    },\r\n\r\n    {\r\n      id: 3,\r\n      title: 'Active',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content:\r\n        <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: activePerOneMillion,\r\n                      backgroundColor: colorActive,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{activeGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n                <h5 >/1000 Active</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: activePerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div >/active</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Critical',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content: <>\r\n        <Row>\r\n          <Col className=\"pr-0\">\r\n            <HorizontalBar\r\n              height={830}\r\n              width={200}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n                // title: {\r\n                //   display: true,\r\n                //   text: 'Mortality in ' + region,\r\n                //   fontSize: 13,\r\n\r\n                // },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerOneMillion,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col className=\"px-0\">\r\n\r\n            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n              <h1>{(criticalGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n              <h5 >/1000 Critical</h5>\r\n            </Row>\r\n\r\n            {/* </Row> */}\r\n            <Row className=\"subtitle px-3 pt-2\">\r\n              <Line\r\n                width={160}\r\n                height={100}\r\n                options={{\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Trends in ' + region,\r\n                  //     fontSize: 13,\r\n                  //     postion: 'bottom'\r\n                  // },\r\n                  legend: {\r\n                    display: false,\r\n                    position: 'bottom'\r\n                  }\r\n                }}\r\n                data={{\r\n                  labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"First dataset\",\r\n                      data: casesPerOneMillion,\r\n                      fill: true,\r\n                      backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                      borderColor: \"rgba(75,192,192,1)\"\r\n                    },\r\n                    // {\r\n                    //   label: \"Second dataset\",\r\n                    //   data: [33, 25, 35, 51, 54, 76],\r\n                    //   fill: false,\r\n                    //   borderColor: \"#742774\"\r\n                    // }\r\n                  ]\r\n                }}\r\n              />\r\n            </Row>\r\n            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n            </Row>\r\n\r\n            <Row className=\"subtitle m-1\" >\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n            </Row>\r\n            <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n            <Doughnut\r\n              width={170}\r\n              options={{\r\n                // maintainAspectRatio: true,\r\n                // title: {\r\n                //     display: true,\r\n                //     text: 'Countries in ' + region,\r\n                //     fontSize: 13\r\n                // },\r\n                elements: {\r\n                  arc: {\r\n                    borderWidth: 0\r\n                  }\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                datasets: [\r\n                  {\r\n                    data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                    backgroundColor: colorsPie,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n\r\n\r\n\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Tests',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n      content: <>\r\n        <Row>\r\n          <Col className=\"pr-0\">\r\n            <HorizontalBar\r\n              height={830}\r\n              width={200}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n                // title: {\r\n                //   display: true,\r\n                //   text: 'Mortality in ' + region,\r\n                //   fontSize: 13,\r\n\r\n                // },\r\n              }}\r\n              data={{\r\n                labels: countryNames,\r\n                datasets: [\r\n                  {\r\n                    label: \"Cases/1000\",\r\n                    data: casesPerOneMillion,\r\n                    backgroundColor: colorCases,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col className=\"px-0\">\r\n\r\n            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n              <h1>{(testsGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n              <h5 >/1000 Tests</h5>\r\n            </Row>\r\n\r\n            {/* </Row> */}\r\n            <Row className=\"subtitle px-3 pt-2\">\r\n              <Line\r\n                width={160}\r\n                height={100}\r\n                options={{\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Trends in ' + region,\r\n                  //     fontSize: 13,\r\n                  //     postion: 'bottom'\r\n                  // },\r\n                  legend: {\r\n                    display: false,\r\n                    position: 'bottom'\r\n                  }\r\n                }}\r\n                data={{\r\n                  labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"First dataset\",\r\n                      data: casesPerOneMillion,\r\n                      fill: true,\r\n                      backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                      borderColor: \"rgba(75,192,192,1)\"\r\n                    },\r\n                    // {\r\n                    //   label: \"Second dataset\",\r\n                    //   data: [33, 25, 35, 51, 54, 76],\r\n                    //   fill: false,\r\n                    //   borderColor: \"#742774\"\r\n                    // }\r\n                  ]\r\n                }}\r\n              />\r\n            </Row>\r\n            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n            </Row>\r\n\r\n            <Row className=\"subtitle m-1\" >\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n              <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n            </Row>\r\n            <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n            <Doughnut\r\n              width={170}\r\n              options={{\r\n                // maintainAspectRatio: true,\r\n                // title: {\r\n                //     display: true,\r\n                //     text: 'Countries in ' + region,\r\n                //     fontSize: 13\r\n                // },\r\n                elements: {\r\n                  arc: {\r\n                    borderWidth: 0\r\n                  }\r\n                },\r\n                legend: {\r\n                  display: false,\r\n                  position: ''\r\n                },\r\n              }}\r\n              data={{\r\n                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                datasets: [\r\n                  {\r\n                    data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                    backgroundColor: colorsPie,\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n\r\n\r\n\r\n\r\n          </Col>\r\n        </Row>\r\n      </>\r\n      ,\r\n    },\r\n  ];\r\n\r\n\r\n  const TabsComponent = () => {\r\n    const [active, setActive] = useState(1);\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"tabs\">\r\n          {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n            key={title}\r\n            icon={icon}\r\n            title={title}\r\n            onItemClicked={() => setActive(id)}\r\n            isActive={active === id}\r\n          />\r\n          )}\r\n        </div>\r\n        <div className=\"content\">\r\n          {tabItems.map(({ id, content }) => {\r\n            return active === id ? content : ''\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const TabItemComponent = ({\r\n    icon = '',\r\n    title = '',\r\n    onItemClicked = () => console.error('You passed no action to the component'),\r\n    isActive = false,\r\n  }) => {\r\n    return (\r\n      <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n        <i className={icon}></i>\r\n        <p className=\"tabitem__title\">{title}</p>\r\n      </div>\r\n    )\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={global ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n\r\n          <div className=\"side\">\r\n            <div className={!global ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\" >\r\n                  <Col xs={10} className=\"px-0 pt-2\">{region}</Col>\r\n                  <Col className=\"px-0\">\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                      <Button\r\n                        // onClick={toggleAsia}\r\n                        onClick={handleClose}\r\n                        // size=\"lg\"\r\n                        variant=\"outline-info\"\r\n                        // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                        className=\"close button\"\r\n                      >\r\n\r\n                        <h6>x</h6>\r\n\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <TabsComponent\r\n                  countries={countries}\r\n                  index={index}\r\n                  region={region}\r\n                  casesMillion={casesMillion}\r\n                  activeMillion={activeMillion}\r\n                  criticalMillion={criticalMillion}\r\n                  deathsMillion={deathsMillion}\r\n                  tests={tests}\r\n\r\n                />\r\n\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown, faCircleUp, faCircleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst Menu = ({ region, index, population, casesMillion, open,\r\n    activeMillion, criticalMillion, deathsMillion, tests, countries, handleClose,\r\n}) => {\r\n\r\n    // Filter Countries in Region\r\n    const continentCountries = countries.filter(country => country.continent === region)\r\n    // Map Country Names && country.population > 1000000\r\n    const countryNames = countries.filter(country => country.continent === region).map(selectedCountry => selectedCountry.country)\r\n    //Map mortality rate for those countries\r\n    const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n    const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n    const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n    const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n    const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n    const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n    // Create strata for classifting cases for doughnut charts\r\n    const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n    const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n    const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n    const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n    const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n    // Create Strata for Deaths\r\n    const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n    const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n    const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n    const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n    const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n    // Create Strata for Active\r\n    const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n    const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n    const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n    const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n    const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n    const colorCases = [];\r\n    for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n        if (casesPerOneMillion[i] < 50) { colorCases.push(\"#444e86\") }\r\n        if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) { colorCases.push(\"#955196\") }\r\n        if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) { colorCases.push(\"#ffa600\") }\r\n        if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) { colorCases.push(\"#ff6e54\") }\r\n        if (casesPerOneMillion[i] >= 350) { colorCases.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorDeaths = [];\r\n    for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n        if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n        if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n        if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n        if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n        if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorActive = [];\r\n    for (let i = 0; i < activePerOneMillion.length; i++) {\r\n        if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n        if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n        if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n        if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n        if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n    }\r\n\r\n    const backgroundcolor = [];\r\n    for (let i = 0; i < mortalityRate.length; i++) {\r\n        if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n        if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n        if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n        if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n        if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n    }\r\n\r\n    const tabItems = [\r\n        {\r\n            id: 1,\r\n            title: 'Cases',\r\n            // icon: <a id='menu'></a>,\r\n            content:\r\n                <>\r\n                    <Row className={'box py-2 m-1'} style={{ color: \"#fff\" }}>\r\n\r\n\r\n                        <h1>{(casesMillion[index] / 1000).toFixed(1)} </h1>\r\n                        <h5 >\r\n                            Cases / 1,000\r\n                            {/* {casesMillion[index] / 1000 <= 100 ?\r\n                                <Badge variant=\"success\" text=\"dark\" className=\"badge\" style={{ position: \"fixed\", right: \"40px\", top: \"20px\" }}>\r\n                                    LOW\r\n                                </Badge> :\r\n                                casesMillion[index] / 1000 >= 250 ?\r\n                                    <Badge variant=\"danger\" text=\"dark\" className=\"badge\" style={{ position: \"fixed\", left: \"40px\", top: \"40px\" }}>\r\n                                        HIGH\r\n                                    </Badge> : \" \"\r\n                            } */}\r\n                        </h5>\r\n\r\n                    </Row>\r\n                    <Row >\r\n                        <Col className=\"pl-0 mt-1 ml-4\">\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }} className=\"pt-2\">Per Country</div>\r\n                            <HorizontalBar\r\n\r\n                                height={countryNames.length * 50}\r\n                                // width={200}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: casesPerOneMillion,\r\n                                            backgroundColor: colorCases,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n                        </Col>\r\n                        <Col className=\"px-0 mt-1 mr-3\">\r\n                            {/* <Row className={'box p-2 m-1'} style={{color: \"#fff\"}}>\r\n                          \r\n                              \r\n\r\n\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n                            <h5 >/1000 Cases</h5>\r\n                        </Row> */}\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"7px\" }}>Trend</div>\r\n\r\n                            <Row className=\"subtitle pt-1\" >\r\n\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom',\r\n\r\n                                        },\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Mortality in ' + region,\r\n                                        //     fontSize: 13,\r\n\r\n                                        // },\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"Cases / 1000\",\r\n                                                data: casesPerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                                <div style={{ position: \"absolute\", right: \"47px\", top: \"6px\" }}>\r\n                                    {casesPerOneMillion[0] > casesPerOneMillion[6] ?\r\n                                        <FontAwesomeIcon icon={faCircleDown} color='rgb(212, 23, 83)' /> :\r\n                                        <FontAwesomeIcon icon={faCircleUp} text=\"light\" color='green' />\r\n\r\n                                    }\r\n                                </div>\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\", paddingBottom: \"5px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle pt-2\" >\r\n                                <Col className=\"box p-2 mr-1\" >\r\n                                    Active\r\n                                    {activeMillion[index] / casesMillion[index] * 100 <= 2.5 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        activeMillion[index] / casesMillion[index] * 100 >= 4.5 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\"  >HIGH</Badge> : \" \"\r\n\r\n                                    }\r\n                                    <h3 className=\"mb-0\">{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3>\r\n                                    <div>of cases</div>\r\n                                </Col>\r\n                                <Col className=\"box p-2 ml-1\">\r\n                                    Critical\r\n                                    {criticalMillion[index] / casesMillion[index] * 100 <= 0.005 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        criticalMillion[index] / casesMillion[index] * 100 >= 0.015 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\"  >HIGH</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /> */}\r\n                                    <h3 className=\"mb-0\">{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3>\r\n                                    <div>of cases</div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"subtitle \" >\r\n                                <Col className=\"box p-2 mr-1 mt-3\" >\r\n                                    Deaths\r\n                                    {deathsMillion[index] / casesMillion[index] * 100 <= 1.0 ?\r\n                                        <Badge variant=\"success\" text=\"dark\" className=\"badge\">LOW</Badge> :\r\n                                        deathsMillion[index] / casesMillion[index] * 100 >= 2.0 ?\r\n                                            <Badge variant=\"danger\" text=\"dark\" className=\"badge\"  >HIGH</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"green\" icon={faArrowUp} /> */}\r\n                                    <h3 className=\"mb-0\">{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3>\r\n                                    <div>of cases</div></Col>\r\n                                <Col className=\"box p-2 ml-1 mt-3\" >\r\n                                    Tested\r\n                                    {tests[index] / population[index] * 100 <= 100 ?\r\n                                        <Badge variant=\"danger\" text=\"dark\" className=\"badge\">POOR</Badge> :\r\n                                        tests[index] / population[index] * 100 >= 250 ?\r\n                                            <Badge variant=\"success\" text=\"dark\" className=\"badge\">GOOD</Badge> : \" \"\r\n                                    }\r\n                                    {/* <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /> */}\r\n                                    <h3 className=\"mb-0\">{(tests[index] / population[index]).toFixed(2) * 100}%</h3>\r\n                                    <div >of people</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-3 mr-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Analysis</div>\r\n                            <Row className=\"mr-1\">\r\n\r\n                                <Doughnut\r\n                                    width={180}\r\n                                    options={{\r\n                                        elements: {\r\n                                            arc: {\r\n                                                borderWidth: 0\r\n                                            }\r\n                                        },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: ''\r\n                                        },\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                                backgroundColor: colorsPie,\r\n                                            }\r\n                                        ]\r\n                                    }}\r\n                                >\r\n\r\n                                </Doughnut>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Deaths',\r\n            // icon: <a id='check1'></a>,\r\n            content:\r\n                <>\r\n                    <Row>\r\n                        <Col className=\"pr-0\">\r\n                            <HorizontalBar\r\n                                height={830}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: deathsPerOneMillion,\r\n                                            backgroundColor: colorDeaths,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(deathsMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                                <h5 >/1000 Deaths</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: deathsPerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n\r\n        {\r\n            id: 3,\r\n            title: 'Active',\r\n            // icon: <a id='check1'></a>,\r\n            content:\r\n                <>\r\n                    <Row>\r\n                        <Col className=\"pr-0\">\r\n                            <HorizontalBar\r\n                                height={830}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: activePerOneMillion,\r\n                                            backgroundColor: colorActive,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(activeMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n                                <h5 >/1000 Active</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: activePerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Active<FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<FontAwesomeIcon color=\"green\" icon={faArrowUp} /><h3 className=\"mb-0\">{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3 ><div className=\"mt-0\">/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /><h3 className=\"mb-0\">{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n        {\r\n            id: 4,\r\n            title: 'Critical',\r\n            // icon: <a id='check1'></a>,\r\n            content: <>\r\n                <Row>\r\n                    <Col className=\"pr-0\">\r\n                        <HorizontalBar\r\n                            height={830}\r\n                            width={200}\r\n                            options={{\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                                // title: {\r\n                                //   display: true,\r\n                                //   text: 'Mortality in ' + region,\r\n                                //   fontSize: 13,\r\n\r\n                                // },\r\n                            }}\r\n                            data={{\r\n                                labels: countryNames,\r\n                                datasets: [\r\n                                    {\r\n                                        label: \"Cases/1000\",\r\n                                        data: casesPerOneMillion,\r\n                                        backgroundColor: colorCases,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n\r\n                        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                            <h5 >/1000 Critical</h5>\r\n                        </Row>\r\n\r\n                        {/* </Row> */}\r\n                        <Row className=\"subtitle px-3 pt-2\">\r\n                            <Line\r\n                                width={160}\r\n                                height={100}\r\n                                options={{\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Trends in ' + region,\r\n                                    //     fontSize: 13,\r\n                                    //     postion: 'bottom'\r\n                                    // },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: 'bottom'\r\n                                    }\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"First dataset\",\r\n                                            data: casesPerOneMillion,\r\n                                            fill: true,\r\n                                            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                            borderColor: \"rgba(75,192,192,1)\"\r\n                                        },\r\n                                        // {\r\n                                        //   label: \"Second dataset\",\r\n                                        //   data: [33, 25, 35, 51, 54, 76],\r\n                                        //   fill: false,\r\n                                        //   borderColor: \"#742774\"\r\n                                        // }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Row>\r\n                        <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n                        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n                        </Row>\r\n\r\n                        <Row className=\"subtitle m-1\" >\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                        <Doughnut\r\n                            width={170}\r\n                            options={{\r\n                                // maintainAspectRatio: true,\r\n                                // title: {\r\n                                //     display: true,\r\n                                //     text: 'Countries in ' + region,\r\n                                //     fontSize: 13\r\n                                // },\r\n                                elements: {\r\n                                    arc: {\r\n                                        borderWidth: 0\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                datasets: [\r\n                                    {\r\n                                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                        backgroundColor: colorsPie,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        },\r\n        // {\r\n        //     id: 5,\r\n        //     title: 'Tests',\r\n        //     icon: 'tabitem__icon fa fa-network-wired',\r\n        //     content: <>\r\n        //         <Row>\r\n        //             <Col className=\"pr-0\">\r\n        //                 <HorizontalBar\r\n        //                     height={830}\r\n        //                     width={200}\r\n        //                     options={{\r\n        //                         legend: {\r\n        //                             display: false,\r\n        //                             position: ''\r\n        //                         },\r\n        //                         // title: {\r\n        //                         //   display: true,\r\n        //                         //   text: 'Mortality in ' + region,\r\n        //                         //   fontSize: 13,\r\n\r\n        //                         // },\r\n        //                     }}\r\n        //                     data={{\r\n        //                         labels: countryNames,\r\n        //                         datasets: [\r\n        //                             {\r\n        //                                 label: \"Cases/1000\",\r\n        //                                 data: casesPerOneMillion,\r\n        //                                 backgroundColor: colorCases,\r\n        //                             }\r\n        //                         ]\r\n        //                     }}\r\n        //                 />\r\n        //             </Col>\r\n        //             <Col className=\"px-0\">\r\n\r\n        //                 {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n        //                 {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n        //                 <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n        //                     <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n        //                     <h5 >/1000 Tests</h5>\r\n        //                 </Row>\r\n\r\n        //                 {/* </Row> */}\r\n        //                 <Row className=\"subtitle px-3 pt-2\">\r\n        //                     <Line\r\n        //                         width={160}\r\n        //                         height={100}\r\n        //                         options={{\r\n        //                             // title: {\r\n        //                             //     display: true,\r\n        //                             //     text: 'Trends in ' + region,\r\n        //                             //     fontSize: 13,\r\n        //                             //     postion: 'bottom'\r\n        //                             // },\r\n        //                             legend: {\r\n        //                                 display: false,\r\n        //                                 position: 'bottom'\r\n        //                             }\r\n        //                         }}\r\n        //                         data={{\r\n        //                             labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n        //                             datasets: [\r\n        //                                 {\r\n        //                                     label: \"First dataset\",\r\n        //                                     data: casesPerOneMillion,\r\n        //                                     fill: true,\r\n        //                                     backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        //                                     borderColor: \"rgba(75,192,192,1)\"\r\n        //                                 },\r\n        //                                 // {\r\n        //                                 //   label: \"Second dataset\",\r\n        //                                 //   data: [33, 25, 35, 51, 54, 76],\r\n        //                                 //   fill: false,\r\n        //                                 //   borderColor: \"#742774\"\r\n        //                                 // }\r\n        //                             ]\r\n        //                         }}\r\n        //                     />\r\n        //                 </Row>\r\n        //                 <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n        //                 <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n        //                 </Row>\r\n\r\n        //                 <Row className=\"subtitle m-1\" >\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n        //                     <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n        //                 </Row>\r\n        //                 <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n        //                 <Doughnut\r\n        //                     width={170}\r\n        //                     options={{\r\n        //                         // maintainAspectRatio: true,\r\n        //                         // title: {\r\n        //                         //     display: true,\r\n        //                         //     text: 'Countries in ' + region,\r\n        //                         //     fontSize: 13\r\n        //                         // },\r\n        //                         elements: {\r\n        //                             arc: {\r\n        //                                 borderWidth: 0\r\n        //                             }\r\n        //                         },\r\n        //                         legend: {\r\n        //                             display: false,\r\n        //                             position: ''\r\n        //                         },\r\n        //                     }}\r\n        //                     data={{\r\n        //                         labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n        //                         datasets: [\r\n        //                             {\r\n        //                                 data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n        //                                 backgroundColor: colorsPie,\r\n        //                             }\r\n        //                         ]\r\n        //                     }}\r\n        //                 />\r\n        //             </Col>\r\n        //         </Row>\r\n        //     </>\r\n        //     ,\r\n        // },\r\n    ];\r\n\r\n\r\n    const TabsComponent = () => {\r\n        const [active, setActive] = useState(1);\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"tabs\">\r\n                    {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n                        key={title}\r\n                        icon={icon}\r\n                        title={title}\r\n                        onItemClicked={() => setActive(id)}\r\n                        isActive={active === id}\r\n                    />\r\n                    )}\r\n                </div>\r\n                <div className=\"content\">\r\n                    {tabItems.map(({ id, content }) => {\r\n                        return active === id ? content : ''\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const TabItemComponent = ({\r\n        icon = '',\r\n        title = '',\r\n        \r\n        onItemClicked = () => console.error('You passed no action to the component'),\r\n        isActive = false,\r\n    }) => {\r\n        return (\r\n            <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n                <p  style={{display: \"flex\"}} className=\"tabitem__title\">{title}{icon} </p>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={open ? \"visible\" : \"hidden\"}>\r\n                <Animated\r\n                    animationIn=\"fadeInLeft\"\r\n                    animationOut=\"fadeOut\"\r\n                    isVisible={true}\r\n                >\r\n\r\n                    <div className=\"side\">\r\n                        <div className={!open ? \"hidden\" : \"visible\"}>\r\n                            <Container>\r\n                                <Row className=\"title\" >\r\n                                    <Col xs={10} className=\"px-0 pt-2\">{region}</Col>\r\n                                    <Col className=\"px-0\">\r\n                                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                            <Button\r\n                                                // onClick={toggleAsia}\r\n                                                onClick={handleClose}\r\n                                                // size=\"lg\"\r\n                                                variant=\"outline-info\"\r\n                                                // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                                                className=\"close button\"\r\n                                            >\r\n\r\n                                                <h6>x</h6>\r\n\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <TabsComponent\r\n\r\n                                    countries={countries}\r\n                                    index={index}\r\n                                    region={region}\r\n                                    casesMillion={casesMillion}\r\n                                    activeMillion={activeMillion}\r\n                                    criticalMillion={criticalMillion}\r\n                                    deathsMillion={deathsMillion}\r\n                                    tests={tests}\r\n\r\n                                />\r\n\r\n\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </Animated>\r\n            </div>\r\n            {/* )\r\n    } */}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n    \"#444e86\",\r\n    \"#955196\",\r\n    \"#ffa600\",\r\n    \"#ff6e54\",\r\n    \"#dd5182\",\r\n    \"rgb(212, 23, 83)\",\r\n    \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map from './components/Map';\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport './App.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\nconst initialState = {\r\n    global: false,\r\n    open: false,\r\n    region: \"\",\r\n    index: \"\",\r\n};\r\n\r\nconst App = () => {\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [globaldata, setGlobal] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(GLOBAL_URL);\r\n                const globaldata = await result.json();\r\n                setGlobal([globaldata]);\r\n                console.log(globaldata, 'globalDATA')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n\r\n    //Map Continents Data\r\n    const getGlobal = (key) => {\r\n        return globaldata.map((data) => data[key]);\r\n    };\r\n\r\n    const globalCases = getGlobal(\"casesPerOneMillion\");\r\n    const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n    const globalActive = getGlobal(\"activePerOneMillion\");\r\n    const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n    const globalTests = getGlobal(\"testsPerOneMillion\");\r\n    console.log(globalCases, 'globalCases')\r\n    const populationGlobal = getGlobal(\"population\")\r\n    const testsGlobal = getGlobal(\"tests\")\r\n\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [continents, setContinents] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(CONTINENT_URL);\r\n                const continents = await result.json();\r\n                setContinents([...continents]);\r\n                // console.log(continents, 'continents')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n    //Map Continents Data\r\n    const getContinents = (key) => {\r\n        return continents.map((continent) => continent[key]);\r\n    };\r\n\r\n    const population = getContinents(\"population\");\r\n    const casesMillion = getContinents(\"casesPerOneMillion\");\r\n    const activeMillion = getContinents(\"activePerOneMillion\");\r\n    const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n    const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n    const testsMillion = getContinents(\"testsPerOneMillion\");\r\n\r\n    const cases = getContinents(\"cases\");\r\n    const active = getContinents(\"active\");\r\n    const critical = getContinents(\"critical\");\r\n    const deaths = getContinents(\"deaths\");\r\n    const tests = getContinents(\"tests\");\r\n\r\n    const continentNames = getContinents(\"continent\")\r\n\r\n    console.log(continentNames, 'continentNames')\r\n\r\n    const mortality = deaths / cases;\r\n\r\n    //Fetch Countries Data\r\n    const [countries, setCountries] = useState([]);\r\n    useEffect(() => {\r\n        const countryNames = [];\r\n        async function fetchCountries() {\r\n            try {\r\n                const res = await fetch(COUNTRY_URL);\r\n                const countries = await res.json();\r\n                setCountries([...countries]);\r\n                // console.log(countries, 'countries')\r\n                for (let i = 0; i < countries.length; i++) {\r\n                    countryNames.push(String(countries[i].country))\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchCountries();\r\n    }, []);\r\n\r\n    const [state, setState] = useState([initialState]);\r\n\r\n    const toggle = ({ region, index }) => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: region,\r\n            index: index,\r\n            global: false\r\n        });\r\n    };\r\n\r\n    const toggleAsia = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Asia',\r\n            index: 1,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleOceania = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Australia-Oceania',\r\n            index: 4,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleEurope = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Europe',\r\n            index: 3,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleAfrica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Africa',\r\n            index: 5,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleSouthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'South America',\r\n            index: 2,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleNorthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'North America',\r\n            index: 0,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleGlobal = () => {\r\n        setState({\r\n            ...initialState,\r\n            global: true,\r\n            region: 'Global',\r\n            index: 6,\r\n\r\n        });\r\n    };\r\n\r\n    function handleClose() {\r\n        setState(!state);\r\n    }\r\n\r\n    console.log(initialState, 'initialState', state, 'state')\r\n\r\n    return (\r\n        <>\r\n       \r\n            <ContinentButtons\r\n                toggleAsia={toggleAsia}\r\n                toggleEurope={toggleEurope}\r\n                toggle={toggle}\r\n                toggleGlobal={toggleGlobal}\r\n                toggleAfrica={toggleAfrica}\r\n                toggleSouthAmerica={toggleSouthAmerica}\r\n                toggleNorthAmerica={toggleNorthAmerica}\r\n                toggleOceania={toggleOceania}\r\n\r\n            />\r\n            <div className=\"sidebar\">\r\n                <Menu\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    open={state.open}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    casesMillion={casesMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    testsMillion={testsMillion}\r\n                    tests={tests}\r\n                // globalCases={globalCases}\r\n                />\r\n\r\n                <GlobalMenu\r\n                    state={state.global}\r\n                    toggleGlobal={toggleGlobal}\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    global={state.global}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    continentNames={continentNames}\r\n                    tests={tests}\r\n                    globalCases={globalCases}\r\n                    globalDeaths={globalDeaths}\r\n                    globalActive={globalActive}\r\n                    globalCritical={globalCritical}\r\n                    globalTests={globalTests}\r\n                    casesMillion={casesMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    testsMillion={testsMillion}\r\n                    populationGlobal={populationGlobal}\r\n                    testsG={testsGlobal}\r\n                />\r\n              \r\n              <nav id=\"menu\"></nav>\r\n            </div>\r\n            \r\n            <Map casesMillion={casesMillion} population={population} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=all\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}