{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map2.js","api/api.js","components/AsiaMenu.js","components/EuropeMenu.js","components/AfricaMenu.js","components/OceaniaMenu.js","components/NorthAmericaMenu.js","components/SouthAmericaMenu.js","components/GlobalMenu.js","App.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","position","Button","className","id","onClick","variant","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","useEffect","createDonutChart","props","offsets","counts","cases1","cases2","cases3","cases4","cases5","total","count","push","fontSize","r0","Math","round","w","html","i","length","donutSegment","colors","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","color","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","reduce","next","min","item","max","Map","container","current","center","zoom","on","addSource","features","addLayer","markers","markersOnScreen","isSourceLoaded","newMarkers","querySourceFeatures","feature","coords","cluster","cluster_id","marker","Marker","element","setLngLat","addTo","remove","updateMarkers","e","queryRenderedFeatures","layers","clusterId","getSource","getClusterExpansionZoom","err","easeTo","once","lastId","popup","Popup","closeButton","closeOnClick","getCanvas","cursor","slice","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","toLowerCase","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","abs","lngLat","lng","setHTML","undefined","doubleClickZoom","enable","getElementById","addEventListener","flyTo","essential","ref","class","backgroundColor","BASE_URL","COUNTRY_URL","CONTINENT_URL","AsiaMenu","state","useState","continents","setContinents","a","result","console","log","fetchContinents","getContinents","key","continent","population","casesMillion","activeMillion","criticalMillion","deathsMillion","tests","countries","setCountries","countryNames","res","String","fetchCountries","getData","continentCountries","filter","selectedCountry","substring","deathsPerOneMillion","casesPerOneMillion","lowest","lower","average","higher","highest","highnames","backgroundcolor","animationIn","animationOut","isVisible","Container","Row","Col","display","justifyContent","size","margin","padding","width","options","legend","title","text","labels","datasets","label","elements","arc","borderWidth","colorsPie","EuropeMenu","africanCountries","africanCountry","colorsDoughnut","AfricaMenu","OceaniaMenu","NorthAmericaMenu","SouthAmericaMenu","activePerOneMillion","criticalPerOneMillion","testsPerOneMillion","maintainAspectRatio","GlobalMenu","initialState","visible","asia","northamerica","southamerica","europe","oceania","africa","global","App","setDefaultState","setState","toggleMap","toggleContinents","this","Component","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aab20b8f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({toggleAsia, toggleEurope, toggleOceania, toggleNorthAmerica, toggleSouthAmerica, toggleAfrica, toggleGlobal}) => {\r\n \r\n  return (\r\n    <div\r\n      style={{\r\n        right: \"110px\",\r\n        height: \"100vh\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <Button\r\n        className=\"asia button\"\r\n        id=\"asia\"\r\n        onClick={toggleAsia}\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Asia</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"europe button\"\r\n        onClick={toggleEurope}\r\n        id=\"europe\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Europe</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"northamerica button\"\r\n        onClick={toggleNorthAmerica}\r\n        id=\"northamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>North America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"africa button\"\r\n        onClick={toggleAfrica}\r\n        // size=\"md\"\r\n        id=\"africa\"\r\n        variant=\"outline-info\"\r\n        // className={getData(\"cases\")[1] / 1000000 <= 10 ? \"asia\" : \"asia2\"}\r\n      >\r\n        <h6>Africa</h6>\r\n        {/* {continentCases[0]} */}\r\n      </Button>\r\n      <Button\r\n        className=\"southamerica button\"\r\n        onClick={toggleSouthAmerica}\r\n        id=\"southamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>South America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"oceania button\"\r\n        onClick={toggleOceania}\r\n        id=\"oceania\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n          Oceania\r\n        </h6>\r\n      </Button>\r\n      <Button\r\n        className=\"global button\"\r\n        onClick={toggleGlobal}\r\n        id=\"global\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n        {/* <i className=\"fa fa-info-circle\"></i> */}\r\n          Global\r\n        </h6>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport \"./Map2.scss\";\r\nimport \"./Map.css\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nfunction Map2() {\r\n  const mapboxElRef = useRef(null); // DOM element to render map\r\n\r\n  const fetcher = (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude\r\n            ]\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths\r\n          }\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const average =\r\n        data.reduce((total, next) => total + next.properties.cases, 0) /\r\n        data.length;\r\n      const min = Math.min(...data.map((item) => item.properties.cases));\r\n      const max = Math.max(...data.map((item) => item.properties.cases));\r\n\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [99, 20], // Asia - intial geo location\r\n        zoom: 3 // initial zoom\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      //DOUGHNUT START     \r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const cases1 = ['<', ['get', 'cases'], 10000];\r\n      const cases2 = ['all', ['>=', ['get', 'cases'], 2], ['<', ['get', 'cases'], 100000]];\r\n      const cases3 = ['all', ['>=', ['get', 'cases'], 3], ['<', ['get', 'cases'], 250000]];\r\n      const cases4 = ['all', ['>=', ['get', 'cases'], 4], ['<', ['get', 'cases'], 500000]];\r\n      const cases5 = ['>=', ['get', 'cases'], 1000000];\r\n\r\n      // colors to use for the categories\r\n      const colors = [\r\n      \r\n        \r\n       \r\n       \r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n      \r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n       \r\n\r\n      ];\r\n\r\n      map.on('load', () => {\r\n        // add a clustered GeoJSON source for a sample set of earthquakes\r\n        map.addSource('points', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            type: \"FeatureCollection\",\r\n            features: data\r\n          },\r\n          'cluster': true,\r\n          'clusterRadius': 50,\r\n          'clusterProperties': {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            'cases1': ['+', ['case', cases1, 1, 0]],\r\n            'cases2': ['+', ['case', cases2, 1, 0]],\r\n            'cases3': ['+', ['case', cases3, 1, 0]],\r\n            'cases4': ['+', ['case', cases4, 1, 0]],\r\n            'cases5': ['+', ['case', cases5, 1, 0]]\r\n          },\r\n\r\n        });\r\n\r\n\r\n\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          'id': 'circles',\r\n          'type': 'circle',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'paint': {\r\n            'circle-color': [\r\n              'case',\r\n              cases1,\r\n              colors[0],\r\n              cases2,\r\n              colors[1],\r\n              cases3,\r\n              colors[2],\r\n              cases4,\r\n              colors[3],\r\n              colors[4]\r\n            ],\r\n            'circle-opacity': 0.6,\r\n            'circle-radius': 12\r\n            // \"circle-radius\": [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     1,\r\n            //     min,\r\n            //     1000,\r\n            //     8,\r\n            //     average / 4,\r\n            //     10,\r\n            //     average / 2,\r\n            //     14,\r\n            //     average,\r\n            //     18,\r\n            //     max,\r\n            //     50\r\n            //   ],\r\n          }\r\n        });\r\n        map.addLayer({\r\n          'id': 'circles',\r\n          'type': 'symbol',\r\n          'source': 'points',\r\n          'filter': ['!=', 'cluster', true],\r\n          'layout': {\r\n            'text-field': [\r\n              'number-format',\r\n              ['get', 'cases'],\r\n              { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n            ],\r\n            'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n            'text-size': 10\r\n          },\r\n          'paint': {\r\n            'text-color': [\r\n              'case',\r\n              ['<', ['get', 'cases'], 3],\r\n              'black',\r\n              'white'\r\n            ],\r\n\r\n\r\n\r\n            // 'circle-color': [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     min,\r\n            //     \"#ffffb2\",\r\n            //     max / 32,\r\n            //     \"#fed976\",\r\n            //     max / 16,\r\n            //     \"#feb24c\",\r\n            //     max / 8,\r\n            //     \"#fd8d3c\",\r\n            //     max / 4,\r\n            //     \"#fc4e2a\",\r\n            //     max / 2,\r\n            //     \"#e31a1c\",\r\n            //     max,\r\n            //     \"#b10026\"\r\n            //   ],\r\n            //   \"circle-opacity\": 0.75,\r\n            //       \"circle-stroke-width\": [\r\n            //         \"interpolate\",\r\n            //         [\"linear\"],\r\n            //         [\"get\", \"cases\"],\r\n            //         1,\r\n            //         1,\r\n            //         max,\r\n            //         1.75\r\n            //       ],\r\n\r\n\r\n          }\r\n        });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures('points');\r\n\r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on('render', () => {\r\n          if (!map.isSourceLoaded('points')) return;\r\n          updateMarkers();\r\n        });\r\n      });\r\n\r\n      // code for creating an SVG donut chart from feature properties\r\n      function createDonutChart(props) {\r\n        const offsets = [];\r\n        const counts = [\r\n          props.cases1,\r\n          props.cases2,\r\n          props.cases3,\r\n          props.cases4,\r\n          props.cases5\r\n        ];\r\n        let total = 0;\r\n        for (const count of counts) {\r\n          offsets.push(total);\r\n          total += count;\r\n        }\r\n        const fontSize =\r\n          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n        const r =\r\n          total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n        const r0 = Math.round(r * 0.6);\r\n        const w = r * 2;\r\n\r\n        let html = `<div>\r\n        <svg class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px sans-serif; display: block\">`;\r\n\r\n        for (let i = 0; i < counts.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total,\r\n            (offsets[i] + counts[i]) / total,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n        html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n        <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"grey\">\r\n        ${total.toLocaleString()}\r\n        </text>\r\n        </svg>\r\n        </div>`;\r\n\r\n        const el = document.createElement('div');\r\n        el.innerHTML = html;\r\n        return el.firstChild;\r\n      }\r\n\r\n      function donutSegment(start, end, r, r0, color) {\r\n        if (end - start === 1) end -= 0.00001;\r\n        const a0 = 2 * Math.PI * (start - 0.25);\r\n        const a1 = 2 * Math.PI * (end - 0.25);\r\n        const x0 = Math.cos(a0),\r\n          y0 = Math.sin(a0);\r\n        const x1 = Math.cos(a1),\r\n          y1 = Math.sin(a1);\r\n        const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n        // draw an SVG path\r\n        return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n      }\r\n\r\n      // inspect a cluster on click\r\n      map.on('click', 'clusters', function (e) {\r\n        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });\r\n        var clusterId = features[0].properties.cluster_id;\r\n        map.getSource('points').getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n          if (err)\r\n            return;\r\n\r\n          map.easeTo({\r\n            center: features[0].geometry.coordinates,\r\n            zoom: zoom\r\n          });\r\n        });\r\n      });\r\n      // DOUGHNUT END\r\n\r\n\r\n\r\n\r\n\r\n      // Add navigation controls to the top right of the canvas\r\n      //   map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      //   // Add navigation to center the map on your geo location\r\n      //   map.addControl(\r\n      //     new mapboxgl.GeolocateControl({\r\n      //       fitBoundsOptions: { maxZoom: 6 }\r\n      //     })\r\n      //   );\r\n\r\n\r\n\r\n      //CIRCLES\r\n      map.once(\"load\", function () {\r\n        // Add our SOURCE\r\n\r\n\r\n        // Add our layer\r\n        // map.addLayer({\r\n        //   id: \"circles\",\r\n        //   source: \"points\", // this should be the id of source\r\n        //   type: \"circle\",\r\n        //   paint: {\r\n        //     \"circle-opacity\": 0.75,\r\n        //     \"circle-stroke-width\": [\r\n        //       \"interpolate\",\r\n        //       [\"linear\"],\r\n        //       [\"get\", \"cases\"],\r\n        //       1,\r\n        //       1,\r\n        //       max,\r\n        //       1.75\r\n        //     ],\r\n        // \"circle-radius\": [\r\n        //   \"interpolate\",\r\n        //   [\"linear\"],\r\n        //   [\"get\", \"cases\"],\r\n        //   1,\r\n        //   min,\r\n        //   1000,\r\n        //   8,\r\n        //   average / 4,\r\n        //   10,\r\n        //   average / 2,\r\n        //   14,\r\n        //   average,\r\n        //   18,\r\n        //   max,\r\n        //   50\r\n        // ],\r\n        // \"circle-color\": [\r\n        //     \"interpolate\",\r\n        //     [\"linear\"],\r\n        //     [\"get\", \"cases\"],\r\n        //     min,\r\n        //     \"#ffffb2\",\r\n        //     max / 32,\r\n        //     \"#fed976\",\r\n        //     max / 16,\r\n        //     \"#feb24c\",\r\n        //     max / 8,\r\n        //     \"#fd8d3c\",\r\n        //     max / 4,\r\n        //     \"#fc4e2a\",\r\n        //     max / 2,\r\n        //     \"#e31a1c\",\r\n        //     max,\r\n        //     \"#b10026\"\r\n        //   ]\r\n        //   }\r\n        // });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const popup = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId;\r\n\r\n        map.on(\"mousemove\", \"circles\", (e) => {\r\n          const id = e.features[0].properties.id;\r\n\r\n          if (id !== lastId) {\r\n            lastId = id;\r\n            const {\r\n              cases,\r\n              deaths,\r\n              country,\r\n              province\r\n            } = e.features[0].properties;\r\n\r\n            // Change the pointer type on mouseenter\r\n            map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            const coordinates = e.features[0].geometry.coordinates.slice();\r\n\r\n            const countryISO =\r\n              lookup.byCountry(country)?.iso2 ||\r\n              lookup.byInternet(country)?.iso2;\r\n            const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n            const provinceHTML =\r\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n            const countryFlagHTML = Boolean(countryISO)\r\n              ? `<img src=\"${countryFlag}\"></img>`\r\n              : \"\";\r\n\r\n            const HTML = `<p>Country: <b>${country}</b></p>\r\n                ${provinceHTML}\r\n                <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n                <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n                ${countryFlagHTML}`;\r\n\r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            }\r\n\r\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\r\n          }\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"circles\", function () {\r\n          lastId = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        map.doubleClickZoom.enable();\r\n\r\n        document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [3.2, 1.8],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 4,\r\n            center: [6, 47],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document\r\n          .getElementById(\"northamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [-120, 45],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        document\r\n          .getElementById(\"southamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.5,\r\n              center: [-74, -4],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.1,\r\n            center: [100, 17],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.7,\r\n            center: [131, -28],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"global\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 1.7,\r\n            center: [0, 20],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n\r\n\r\n\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mapContainer\" >\r\n        {/* Mapbox Container */}\r\n        <div className=\"mapBox\" ref={mapboxElRef} />\r\n      </div>\r\n      <div id=\"state-legend\" class=\"legend\">\r\n        <h6>Covid-19</h6>\r\n        <div><span style={{ backgroundColor: \"#dd5182\" }}></span>Highest</div>\r\n        <div><span style={{ backgroundColor: \"#ff6e54\" }}></span>Higher</div>\r\n       \r\n        <div><span style={{ backgroundColor: \"#ffa600\" }}></span>Average</div>\r\n        <div><span style={{ backgroundColor: \"#955196\" }}></span>Lower</div>\r\n        <div><span style={{ backgroundColor: \"#444e86\" }}></span>Lowest</div>\r\n\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map2;","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=all\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst AsiaMenu = ({ state, toggleAsia }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const continentNames = [];\r\n    const deathsPerOneMillion = [];\r\n    const casesPerOneMillion = [];\r\n    const population = [];\r\n    const activePerOneMillion = [];\r\n\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   continentNames.push(String(continents[i].continent))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   deathsPerOneMillion.push(String(continents[i].deathsPerOneMillion))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   casesPerOneMillion.push(String(continents[i].casesPerOneMillion))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   population.push(String(continents[i].population))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   activePerOneMillion.push(String(continents[i].activePerOneMillion))\r\n        // }\r\n\r\n\r\n\r\n        // setContinentNames(continentsArray)\r\n        // console.log(continentNames, 'continentNames')\r\n        // console.log(deathsPerOneMillion, 'deathsPerOneMillion')\r\n\r\n        // setCountryNames(countryNames)\r\n        // console.log(countryNames, 'countryNames')\r\n        // const africanCountryNames = countries.filter(country.continent === \"Africa\");\r\n        // console.log(africanCountryNames, 'acn')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n  const cases = getContinents(\"cases\");\r\n\r\n  const deaths = getContinents(\"deaths\");\r\n\r\n  const mortality = deaths / cases;\r\n\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    const countries = []\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n        console.log(countries, 'countries')\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n  const countryLabels = getData(\"country\");\r\n  const countryCases = getData(\"cases\");\r\n  const countryDeaths = getData(\"deaths\");\r\n  const countryActive = getData(\"active\");\r\n  // const casesMillion = getData(\"casesPerOneMillion\");\r\n  // const activeMillion = getData(\"activePerOneMillion\");\r\n\r\n\r\n\r\n  \r\n\r\n \r\n\r\n// Filter Countries in Region\r\n  const continentCountries = countries.filter(country => country.continent === 'Asia')\r\n// Map Country Names\r\n  const countryNames = continentCountries.map(selectedCountry => selectedCountry.country.substring(0, 12))\r\n//Map mortality rate for those countries\r\n  const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion).toFixed(4))*100) );\r\n// Create strata for classifting cases for doughnut charts\r\n  const lowest = continentCountries.filter(selectedCountry => (selectedCountry.cases < 100000));\r\n  const lower = continentCountries.filter(selectedCountry => ( selectedCountry.cases >= 100000 && selectedCountry.cases < 1000000));\r\n  const average = continentCountries.filter(selectedCountry => ( selectedCountry.cases >= 1000000 && selectedCountry.cases < 2500000));\r\n  const higher = continentCountries.filter(selectedCountry => (  selectedCountry.cases >= 2500000 && selectedCountry.cases < 5000000));\r\n  const highest = continentCountries.filter(selectedCountry => (selectedCountry.cases > 5000000));\r\n\r\n  const highnames = continentCountries.map(selectedCountry => (selectedCountry.country));\r\n\r\n  console.log(highnames, 'highnames')\r\n  console.log(lowest, 'lowest')\r\n  console.log(average, 'average')\r\n\r\n\r\n  const backgroundcolor = [];\r\n\r\n   for (let i = 0; i < mortalityRate.length; i++) {\r\n    if(mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n    if(mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n    if(mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.0) { backgroundcolor.push(\"#ffa600\" ) }\r\n    if(mortalityRate[i] >= 3.0 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n    if(mortalityRate[i] >= 6.0) { backgroundcolor.push(\"rgb(212, 23, 83)\") }\r\n   }\r\n\r\n\r\n  return (\r\n    <div className={state ? \"visible\" : \"hidden\"}>\r\n    <Animated\r\n      animationIn=\"fadeInLeft\"\r\n      animationOut=\"fadeOut\"\r\n      isVisible={true}\r\n    >\r\n      <div className=\"App-side\">\r\n        <div className={!state ? \"hidden\" : \"visible\"}>\r\n          <Container>\r\n            <Row className=\"title\" >\r\n              <Col className=\"px-0\">Asia</Col>\r\n              <Col className=\"App-side-close px-0\">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    onClick={toggleAsia}\r\n                    size=\"sm\"\r\n                   \r\n                    variant=\"outline-info\"\r\n                    style={{ margin: \"5px\", padding: \"0px 10px 3px 10px\"}}\r\n                  >\r\n                    <Animated\r\n                      animationIn=\"fadeInDown\"\r\n                      animationOut=\"fadeOut\"\r\n                      isVisible={true}\r\n                    >\r\n                      <div>x</div>\r\n                    </Animated>\r\n                  </Button>\r\n                  </div>\r\n                  </Col>\r\n            </Row>\r\n\r\n            <Row >\r\n              <Col className=\"pr-0\">\r\n                <HorizontalBar\r\n                  height={830}\r\n                  width={200}\r\n                  options={{\r\n                    legend: {\r\n                      display: false,\r\n                      position: ''\r\n                    },\r\n                    title: {\r\n                      display: true,\r\n                      text: 'Mortality in Asia',\r\n                      fontSize: 13\r\n                    },\r\n                    \r\n                  }}\r\n                  data={{\r\n                    labels: countryNames,\r\n                    datasets: [\r\n                      {\r\n                        label: \"Mortality Rate\",\r\n                        data: mortalityRate ,\r\n                        backgroundColor: backgroundcolor,\r\n                      }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Col>\r\n\r\n              <Col >\r\n                <Row className=\"subtitle\">\r\n                  <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[1] / 1000000000).toFixed(2))}</h3>billion</Col>\r\n                  <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[1] / 1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                </Row>\r\n                <Row className=\"subtitle\">\r\n                  <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[1] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                  <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[1] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                </Row>\r\n                <Row className=\"subtitle\">\r\n                  <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[1] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                  <Col className=\"box\" style={{ color: \"rgb(45, 182, 130)\"}}>Tests<h3>{(tests[1] / population[1]).toFixed(2)}</h3><div >/person</div></Col>\r\n                </Row>\r\n\r\n                <Doughnut\r\n                  width={140}\r\n                  options={{\r\n                    // maintainAspectRatio: true,\r\n            \r\n                    title: {\r\n                      display: true,\r\n                      text: 'Cases in Asia',\r\n                      fontSize: 13\r\n                    },\r\n                    elements: {\r\n                      arc: {\r\n                        borderWidth: 0\r\n                      }\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: ''\r\n                    },\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                    datasets: [\r\n                      {\r\n                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                        backgroundColor: colorsPie,\r\n                      }\r\n                    ]\r\n                  }}\r\n                />\r\n\r\n                <Doughnut\r\n                  width={140}\r\n                  options={{\r\n                    // maintainAspectRatio: true,\r\n                    title: {\r\n                      display: true,\r\n                      text: 'Deaths in Asia',\r\n                      fontSize: 13\r\n                    },\r\n                    elements: {\r\n                      arc: {\r\n                        borderWidth: 0\r\n                      }\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: ''\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Lowest\", \"Lower\", \"Average\", \"Higher\", \"Highest\"],\r\n                    datasets: [\r\n                      {\r\n                        data: deathsMillion,\r\n                        backgroundColor: colorsPie,\r\n                      }\r\n                    ]\r\n                  }}\r\n                />\r\n\r\n                <Line\r\n                  width={250}\r\n                  height={270}\r\n                  options={{\r\n\r\n                    title: {\r\n                      display: true,\r\n                      text: 'Trends in Asia',\r\n                      fontSize: 13\r\n                    },\r\n                    legend: {\r\n                      display: false,\r\n                      position: ''\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Apr\", \"Jul\", \"Oct\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"\",\r\n                        data: [100, 40, 50, 5],\r\n                        backgroundColor: \"#444e86\",\r\n                      }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </Animated>\r\n  </div>\r\n  );\r\n};\r\n\r\n\r\nexport default AsiaMenu;\r\n\r\n\r\nlet colors = [\r\n  \"rgb(212, 23, 83)\"\r\n\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"#ff6e54\",\r\n  \r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst EuropeMenu = ({ state, toggleEurope }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const continentNames = [];\r\n    const deathsPerOneMillion = [];\r\n    const casesPerOneMillion = [];\r\n    const population = [];\r\n    const activePerOneMillion = [];\r\n\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   continentNames.push(String(continents[i].continent))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   deathsPerOneMillion.push(String(continents[i].deathsPerOneMillion))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   casesPerOneMillion.push(String(continents[i].casesPerOneMillion))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   population.push(String(continents[i].population))\r\n        // }\r\n\r\n        // for (let i = 0; i < continents.length; i++) {\r\n        //   activePerOneMillion.push(String(continents[i].activePerOneMillion))\r\n        // }\r\n\r\n      \r\n    \r\n        // setContinentNames(continentsArray)\r\n        // console.log(continentNames, 'continentNames')\r\n        // console.log(deathsPerOneMillion, 'deathsPerOneMillion')\r\n     \r\n        // setCountryNames(countryNames)\r\n        // console.log(countryNames, 'countryNames')\r\n        // const africanCountryNames = countries.filter(country.continent === \"Africa\");\r\n        // console.log(africanCountryNames, 'acn')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n   const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    const countries = []\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n     \r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n \r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n\r\n\r\n\r\n  const coords = getData(\"countryInfo\");\r\n\r\n\r\n\r\n  const countryCases = getData(\"cases\");\r\n  const countryDeaths = getData(\"deaths\");\r\n  const countryActive = getData(\"active\");\r\n  // const casesMillion = getData(\"casesPerOneMillion\");\r\n  // const activeMillion = getData(\"activePerOneMillion\");\r\n\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'Europe')\r\n\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion/1000)\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={state ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"App-side\">\r\n            <div className=\"App-side-menu\">\r\n\r\n              <div className={!state ? \"hidden\" : \"visible\"}>\r\n                <div className=\"App-side-button\">\r\n\r\n                  <Container>\r\n                  <Row className=\"title\" >Europe </Row>\r\n                    <Row>\r\n                      <Col >\r\n                        <HorizontalBar\r\n                          height={900}\r\n                          width={200}\r\n                          options={{  legend: {\r\n                            display: false,\r\n                            position: ''\r\n                          } }}\r\n                          data={{\r\n                            labels: countryNames,\r\n                            datasets: [\r\n                              {\r\n                                label: \"\",\r\n                                data: casesPerOneMillion,\r\n                                backgroundColor: colors,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n                      </Col>\r\n\r\n                      <Col >\r\n                \r\n                        <Row className=\"subtitle\"> \r\n                          <Col className=\"box\" style={{color: \"#ffa600\"}}>Pop <h3>{numberWithCommas((population[3]/1000000).toFixed(0))}</h3>million</Col>\r\n                          <Col className=\"box\" style={{color: \"#ff6e54\"}}>Cases<h3>{(casesMillion[3]/1000).toFixed(0)}</h3><div >/1000</div></Col>\r\n                        </Row>\r\n                        <Row className=\"subtitle\"> \r\n                          <Col className=\"box\" style={{color: \"#dd5182\"}}>Active<h3>{(activeMillion[3]/1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                          <Col className=\"box\" style={{color: \"#955196\"}}>Critical<h3>{(criticalMillion[3]/1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                       \r\n                        </Row>\r\n                        <Row className=\"subtitle\"> \r\n                          <Col className=\"box\" style={{color: \"#444e86\"}}>Deaths<h3>{(deathsMillion[3]/1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                          <Col className=\"box\" style={{color: \"rgb(212, 23, 83)\"}}>Tests<h3>{(tests[3]/population[3]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <Doughnut\r\n\r\n                          width={120}\r\n                          options={{\r\n                            // maintainAspectRatio: true,\r\n                            title: {\r\n                              display: true,\r\n                              text: '% population tested',\r\n                              fontSize: 13\r\n                            },\r\n                            elements: {\r\n                              arc: {\r\n                                borderWidth: 0\r\n                              }\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: [ \"Population\", \"Tests\"],\r\n                            datasets: [\r\n                              {\r\n                                data: [ population[3], tests[3] ],\r\n                               \r\n                                backgroundColor: colorsDoughnut,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n\r\n                        <HorizontalBar\r\n                          width={250}\r\n                          height={250}\r\n                          options={{\r\n                          \r\n                            title: {\r\n                              display: true,\r\n                              text: 'Deaths per age',\r\n                              fontSize: 13\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: [\"Pop\", \"Tests\", \"Cases\", \"Active\", \"Critical\"],\r\n                            datasets: [\r\n                              {\r\n                                label: \"\",\r\n                                data: [30, 40, 50, 60, 34, 30],\r\n                                backgroundColor: colorsPie,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n\r\n                        {/* <Bar \r\n                            width={100}\r\n                            height={85}\r\n                            options={{\r\n                      \r\n                              title: {\r\n                                display: true,\r\n                                text: 'Deaths Age',\r\n                                fontSize: 10\r\n                              },\r\n                              legend: {\r\n                                display: false,\r\n                                position: ''\r\n                              }\r\n                            }}\r\n                            data={{\r\n                              labels: [30, 80, 20, 60, 3, 10, 30],\r\n                              datasets: [\r\n                                {\r\n                                  label: \"continents\",\r\n                                  data: [30, 80, 20, 60, 3, 10, 15],\r\n                                  backgroundColor: \"#2F9599\",\r\n                                }\r\n                              ]\r\n                            }}\r\n                          /> */}\r\n\r\n{/* \r\n                        <Doughnut\r\n                          width={150}\r\n                          options={{\r\n                            // maintainAspectRatio: true,\r\n                            title: {\r\n                              display: true,\r\n                              text: 'Asia',\r\n                              fontSize: 10\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: list,\r\n                            datasets: [\r\n                              {\r\n                                label: \"continents\",\r\n                                data: [30, 80, 20, 60, 20],\r\n                                backgroundColor: colorsPie,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        /> */}\r\n                      </Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                  </Container>\r\n                  {/* <h4 style={{ color: \"cyan\" }}>Africa\r\n                  </h4> */}\r\n\r\n\r\n\r\n\r\n\r\n                  {/* \r\n                    */}\r\n\r\n\r\n                  {/* <p>\r\n                    Hover over the chart to view more details.\r\n                  </p> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default EuropeMenu;\r\n\r\n\r\nlet colors = [\r\n\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n\"#444e86\",\r\n\r\n\r\n\r\n]\r\n\r\nlet colorsDoughnut = [\r\n\r\n  \"#ffa600\",\r\n\"rgb(212, 23, 83)\",\r\n\r\n\r\n// \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst AfricaMenu = ({ state, toggleAfrica }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n\r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n\r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n\r\n  const tests = getContinents(\"tests\");\r\n\r\n\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'Africa')\r\n\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion / 1000)\r\n\r\n\r\n  return (\r\n    <div className={state ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"App-side\">\r\n          <div className={!state ? \"hidden\" : \"visible\"}>\r\n            <Container>\r\n              <Row className=\"title\" >\r\n                <Col className=\"px-0\">Africa</Col>\r\n                <Col className=\"App-side-close px-0\">\r\n                  <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                    <Button\r\n                      onClick={toggleAfrica}\r\n                      size=\"sm\"\r\n\r\n                      variant=\"outline-info\"\r\n                      style={{ margin: \"5px\", padding: \"0px 10px 3px 10px\" }}\r\n                    >\r\n                      <Animated\r\n                        animationIn=\"fadeInDown\"\r\n                        animationOut=\"fadeOut\"\r\n                        isVisible={true}\r\n                      >\r\n                        <div>x</div>\r\n                      </Animated>\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row >\r\n                <Col className=\"pr-0\">\r\n                  <HorizontalBar\r\n                    height={820}\r\n                    width={200}\r\n                    options={{\r\n                      legend: {\r\n                        display: false,\r\n                        position: ''\r\n                      }\r\n                    }}\r\n                    data={{\r\n                      labels: countryNames,\r\n                      datasets: [\r\n                        {\r\n                          label: \"\",\r\n                          data: casesPerOneMillion,\r\n                          backgroundColor: colors,\r\n                        }\r\n                      ]\r\n                    }}\r\n                  />\r\n                </Col>\r\n\r\n                <Col >\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[5] / 1000000000).toFixed(2))}</h3>billion</Col>\r\n                    <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                  </Row>\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[5] / 1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                    <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                  </Row>\r\n                  <Row className=\"subtitle\">\r\n                    <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                    <Col className=\"box\" style={{ color: \"rgb(45, 182, 130)\" }}>Tests<h3>{(tests[5] / population[5]).toFixed(2)}</h3><div >/person</div></Col>\r\n                  </Row>\r\n\r\n                  <Doughnut\r\n                    width={130}\r\n                    options={{\r\n                      // maintainAspectRatio: true,\r\n                      title: {\r\n                        display: true,\r\n                        text: 'Deaths per million',\r\n                        fontSize: 13\r\n                      },\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0\r\n                        }\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: ''\r\n                      }\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                      datasets: [\r\n                        {\r\n                          data: deathsMillion,\r\n                          backgroundColor: colorsPie,\r\n                        }\r\n                      ]\r\n                    }}\r\n                  />\r\n\r\n                  <Doughnut\r\n                    width={130}\r\n                    options={{\r\n                      // maintainAspectRatio: true,\r\n                      title: {\r\n                        display: true,\r\n                        text: 'Deaths per million',\r\n                        fontSize: 13\r\n                      },\r\n                      elements: {\r\n                        arc: {\r\n                          borderWidth: 0\r\n                        }\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: ''\r\n                      }\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                      datasets: [\r\n                        {\r\n                          data: deathsMillion,\r\n                          backgroundColor: colorsPie,\r\n                        }\r\n                      ]\r\n                    }}\r\n                  />\r\n\r\n                  <HorizontalBar\r\n                    width={250}\r\n                    height={200}\r\n                    options={{\r\n\r\n                      title: {\r\n                        display: true,\r\n                        text: 'Deaths per age',\r\n                        fontSize: 13\r\n                      },\r\n                      legend: {\r\n                        display: false,\r\n                        position: ''\r\n                      }\r\n                    }}\r\n                    data={{\r\n                      labels: [\"Pop\", \"Tests\", \"Cases\"],\r\n                      datasets: [\r\n                        {\r\n                          label: \"\",\r\n                          data: [100, 40, 50],\r\n                          backgroundColor: colorsPie,\r\n                        }\r\n                      ]\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default AfricaMenu;\r\n\r\n\r\nlet colors = [\r\n\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n  \"#444e86\",\r\n\r\n\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n\r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst OceaniaMenu = ({ state, toggleOceania }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n        console.log(countries, 'countries')\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'Australia-Oceania')\r\n\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion / 1000)\r\n\r\n\r\n  return (\r\n      <div className={state ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"App-side\">\r\n            <div className={!state ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\" >\r\n                  <Col className=\"px-0\">Oceania</Col>\r\n                  <Col className=\"App-side-close px-0\">\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                      <Button\r\n                        onClick={toggleOceania}\r\n                        size=\"sm\"\r\n                       \r\n                        variant=\"outline-info\"\r\n                        style={{ margin: \"5px\", padding: \"0px 10px 3px 10px\"}}\r\n                      >\r\n                        <Animated\r\n                          animationIn=\"fadeInDown\"\r\n                          animationOut=\"fadeOut\"\r\n                          isVisible={true}\r\n                        >\r\n                          <div>x</div>\r\n                        </Animated>\r\n                      </Button>\r\n                      </div>\r\n                      </Col>\r\n                </Row>\r\n\r\n                <Row >\r\n                  <Col className=\"pr-0\">\r\n                    <HorizontalBar\r\n                      height={830}\r\n                      width={200}\r\n                      options={{\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: countryNames,\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: casesPerOneMillion,\r\n                            backgroundColor: colors,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n\r\n                  <Col >\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[4] / 1000000).toFixed(1))}</h3>million</Col>\r\n                      <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[4] / 1000).toFixed(0)}</h3><div >/1000</div></Col>\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[4] / 1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[4] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[4] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"rgb(45, 182, 130)\"}}>Tests<h3>{(tests[4] / population[4]).toFixed(2)}</h3><div >/person</div></Col>\r\n                    </Row>\r\n\r\n                    <Doughnut\r\n                      width={140}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <Doughnut\r\n                      width={140}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <HorizontalBar\r\n                      width={250}\r\n                      height={200}\r\n                      options={{\r\n\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per age',\r\n                          fontSize: 13\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Pop\", \"Tests\", \"Cases\"],\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: [100, 40, 50],\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n  );\r\n};\r\n\r\n\r\nexport default OceaniaMenu;\r\n\r\n\r\nlet colors = [\r\n\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n  \"#444e86\",\r\n\r\n\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n\r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst NorthAmericaMenu = ({ state, toggleNorthAmerica }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n        console.log(countries, 'countries')\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'North America')\r\n\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion / 1000)\r\n\r\n\r\n  return (\r\n      <div className={state ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"App-side\">\r\n            <div className={!state ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\" >\r\n                  <Col className=\"px-0\">North America</Col>\r\n                  <Col className=\"App-side-close px-0\">\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                      <Button\r\n                        onClick={toggleNorthAmerica}\r\n                        size=\"sm\"\r\n                       \r\n                        variant=\"outline-info\"\r\n                        style={{ margin: \"5px\", padding: \"0px 10px 3px 10px\"}}\r\n                      >\r\n                        <Animated\r\n                          animationIn=\"fadeInDown\"\r\n                          animationOut=\"fadeOut\"\r\n                          isVisible={true}\r\n                        >\r\n                          <div>x</div>\r\n                        </Animated>\r\n                      </Button>\r\n                      </div>\r\n                      </Col>\r\n                </Row>\r\n\r\n                <Row >\r\n                  <Col className=\"pr-0\">\r\n                    <HorizontalBar\r\n                      height={830}\r\n                      width={200}\r\n                      options={{\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: countryNames,\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: casesPerOneMillion,\r\n                            backgroundColor: colors,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n\r\n                  <Col >\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[0] / 1000000).toFixed(0))}</h3>million</Col>\r\n                      <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[0] / 1000).toFixed(0)}</h3><div >/1000</div></Col>\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[0] / 1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[0] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[0] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"rgb(45, 182, 130)\"}}>Tests<h3>{(tests[0] / population[0]).toFixed(2)}</h3><div >/person</div></Col>\r\n                    </Row>\r\n\r\n                    <Doughnut\r\n                      width={130}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <Doughnut\r\n                      width={130}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <HorizontalBar\r\n                      width={250}\r\n                      height={200}\r\n                      options={{\r\n\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per age',\r\n                          fontSize: 13\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Pop\", \"Tests\", \"Cases\"],\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: [100, 40, 50],\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n  );\r\n};\r\n\r\n\r\nexport default NorthAmericaMenu;\r\n\r\n\r\nlet colors = [\r\n\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n  \"#444e86\",\r\n\r\n\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n\r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst SouthAmericaMenu = ({ state, toggleSouthAmerica }) => {\r\n\r\n  \r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n        console.log(countries, 'countries')\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'South America')\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion / 1000)\r\n  const activePerOneMillion = africanCountries.map(africanCountry => africanCountry.activePerOneMillion / 1000)\r\n  const criticalPerOneMillion = africanCountries.map(africanCountry => africanCountry.criticalPerOneMillion / 1000)\r\n  const deathsPerOneMillion = africanCountries.map(africanCountry => africanCountry.deathsPerOneMillion / 1000)\r\n  const testsPerOneMillion = africanCountries.map(africanCountry => africanCountry.testsPerOneMillion / 1000)\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={state ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"App-side\">\r\n            <div className=\"App-side-menu\">\r\n              <div className={!state ? \"hidden\" : \"visible\"}>\r\n                <div className=\"App-side-button\">\r\n                  <Container>\r\n                    <Row className=\"title\">South America</Row>\r\n                    <Row>\r\n                      <Col >\r\n                        <HorizontalBar\r\n                          height={1400}\r\n                          // width={100}\r\n                          options={{\r\n                            maintainAspectRatio: true,\r\n                            legend: {\r\n                              display: true,\r\n                              position: 'bottom'\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: countryNames,\r\n                            datasets: [\r\n                              {\r\n                                label: \"Cases per 1000\",\r\n                                data: casesPerOneMillion,\r\n                                backgroundColor: \"#ffa600\",\r\n                              },\r\n                              {\r\n                                label: \"Active per 1000\",\r\n                                data: activePerOneMillion,\r\n                                backgroundColor: \"#ff6e54\",\r\n                              },\r\n                              {\r\n                                label: \"Critical per 1000\",\r\n                                data: criticalPerOneMillion,\r\n                                backgroundColor: \"#dd5182\",\r\n                              },\r\n                              {\r\n                                label: \"Deaths per 1000\",\r\n                                data: deathsPerOneMillion,\r\n                                backgroundColor: \"#955196\",\r\n                              },\r\n                              {\r\n                                label: \"CTests per 1000\",\r\n                                data: testsPerOneMillion,\r\n                                backgroundColor: \"#444e86\",\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n                   \r\n\r\n\r\n                      </Col>\r\n                      <Col >\r\n                        <Row className=\"subtitle\">\r\n                        \r\n                          <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[2] / 1000000).toFixed(0))}</h3>million</Col>\r\n                          <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[2] / 1000).toFixed(0)}</h3><div >/1000</div></Col>\r\n                        </Row>\r\n                        <Row className=\"subtitle\">\r\n                          <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[2] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                          <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[2] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                        </Row>\r\n                        <Row className=\"subtitle\">\r\n                          <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[2] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                          <Col className=\"box\" style={{ color: \"rgb(212, 23, 83)\" }}>Tests<h3>{(tests[2] / population[2]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <Doughnut\r\n                          width={130}\r\n                          options={{\r\n                            // maintainAspectRatio: true,\r\n                            title: {\r\n                              display: true,\r\n                              text: 'Deaths per million',\r\n                              fontSize: 13\r\n                            },\r\n                            elements: {\r\n                              arc: {\r\n                                borderWidth: 0\r\n                              }\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                            datasets: [\r\n                              {\r\n                                data: deathsMillion,\r\n                                backgroundColor: colorsPie,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n\r\n                        <Doughnut\r\n                          width={130}\r\n                          options={{\r\n                            // maintainAspectRatio: true,\r\n                            title: {\r\n                              display: true,\r\n                              text: 'Deaths per million',\r\n                              fontSize: 13\r\n                            },\r\n                            elements: {\r\n                              arc: {\r\n                                borderWidth: 0\r\n                              }\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                            datasets: [\r\n                              {\r\n                                data: deathsMillion,\r\n                                backgroundColor: colorsPie,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        />\r\n\r\n                        {/* <HorizontalBar\r\n                          width={250}\r\n                          height={200}\r\n                          options={{\r\n\r\n                            title: {\r\n                              display: true,\r\n                              text: 'Deaths per age',\r\n                              fontSize: 13\r\n                            },\r\n                            legend: {\r\n                              display: false,\r\n                              position: ''\r\n                            }\r\n                          }}\r\n                          data={{\r\n                            labels: [\"Pop\", \"Tests\", \"Cases\"],\r\n                            datasets: [\r\n                              {\r\n                                label: \"\",\r\n                                data: [100, 40, 50],\r\n                                backgroundColor: colorsPie,\r\n                              }\r\n                            ]\r\n                          }}\r\n                        /> */}\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default SouthAmericaMenu;\r\n\r\n\r\nlet colors = [\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n  \"#444e86\",\r\n\r\n\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n\r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { CONTINENT_URL, COUNTRY_URL } from \"../api/api\";\r\n\r\nimport { Pie, Doughnut, Bar, HorizontalBar } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst GlobalMenu = ({ state, toggleGlobal }) => {\r\n\r\n  const [continents, setContinents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchContinents() {\r\n      try {\r\n        const result = await fetch(CONTINENT_URL);\r\n\r\n        const continents = await result.json();\r\n        setContinents([...continents]);\r\n        console.log(continents, 'continents')\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchContinents();\r\n  }, []);\r\n\r\n  const getContinents = (key) => {\r\n    return continents.map((continent) => continent[key]);\r\n  };\r\n\r\n  const population = getContinents(\"population\");\r\n \r\n  const casesMillion = getContinents(\"casesPerOneMillion\");\r\n \r\n  const activeMillion = getContinents(\"activePerOneMillion\");\r\n\r\n  const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n\r\n  const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n\r\n  const testsMillion = getContinents(\"testsPerOneMillion\");\r\n \r\n  const tests = getContinents(\"tests\");\r\n\r\n\r\n\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const countryNames = [];\r\n\r\n    async function fetchCountries() {\r\n      try {\r\n        const res = await fetch(COUNTRY_URL);\r\n\r\n        const countries = await res.json();\r\n        setCountries([...countries]);\r\n        console.log(countries, 'countries')\r\n\r\n        for (let i = 0; i < countries.length; i++) {\r\n          countryNames.push(String(countries[i].country))\r\n        }\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const getData = (key) => {\r\n    return countries.map((country) => country[key]);\r\n  };\r\n\r\n\r\n  const africanCountries = countries.filter(country => country.continent === 'Global')\r\n\r\n  const countryNames = africanCountries.map(africanCountry => africanCountry.country.substring(0, 12))\r\n\r\n  const casesPerOneMillion = africanCountries.map(africanCountry => africanCountry.casesPerOneMillion / 1000)\r\n\r\n\r\n  return (\r\n      <div className={state ? \"visible\" : \"hidden\"}>\r\n        <Animated\r\n          animationIn=\"fadeInLeft\"\r\n          animationOut=\"fadeOut\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"App-side\">\r\n            <div className={!state ? \"hidden\" : \"visible\"}>\r\n              <Container>\r\n                <Row className=\"title\" >\r\n                  <Col className=\"px-0\">Global</Col>\r\n                  <Col className=\"App-side-close px-0\">\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                      <Button\r\n                        onClick={toggleGlobal}\r\n                        size=\"sm\"\r\n                       \r\n                        variant=\"outline-info\"\r\n                        style={{ margin: \"5px\", padding: \"0px 10px 3px 10px\"}}\r\n                      >\r\n                        <Animated\r\n                          animationIn=\"fadeInDown\"\r\n                          animationOut=\"fadeOut\"\r\n                          isVisible={true}\r\n                        >\r\n                          <div>x</div>\r\n                        </Animated>\r\n                      </Button>\r\n                      </div>\r\n                      </Col>\r\n                </Row>\r\n\r\n                <Row >\r\n                  <Col className=\"pr-0\">\r\n                    <HorizontalBar\r\n                      height={800}\r\n                      width={200}\r\n                      options={{\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: countryNames,\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: casesPerOneMillion,\r\n                            backgroundColor: colors,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n\r\n                  <Col >\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#ffa600\" }}>Pop <h3>{numberWithCommas((population[5] / 1000000000).toFixed(2))}</h3>billion</Col>\r\n                      <Col className=\"box\" style={{ color: \"#ff6e54\" }}>Cases<h3>{(casesMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#dd5182\" }}>Active<h3>{(activeMillion[5] / 1000).toFixed(1)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"#955196\" }}>Critical<h3>{(criticalMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n\r\n                    </Row>\r\n                    <Row className=\"subtitle\">\r\n                      <Col className=\"box\" style={{ color: \"#444e86\" }}>Deaths<h3>{(deathsMillion[5] / 1000).toFixed(2)}</h3><div >/1000</div></Col>\r\n                      <Col className=\"box\" style={{ color: \"rgb(45, 182, 130)\"}}>Tests<h3>{(tests[5] / population[5]).toFixed(2)}</h3><div >/person</div></Col>\r\n                    </Row>\r\n\r\n                    <Doughnut\r\n                      width={140}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <Doughnut\r\n                      width={140}\r\n                      options={{\r\n                        // maintainAspectRatio: true,\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per million',\r\n                          fontSize: 13\r\n                        },\r\n                        elements: {\r\n                          arc: {\r\n                            borderWidth: 0\r\n                          }\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Population\", \"Tests\", \"Cases\", \"Active\", \"Critical\", \"Deaths\"],\r\n                        datasets: [\r\n                          {\r\n                            data: deathsMillion,\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n\r\n                    <HorizontalBar\r\n                      width={250}\r\n                      height={250}\r\n                      options={{\r\n\r\n                        title: {\r\n                          display: true,\r\n                          text: 'Deaths per age',\r\n                          fontSize: 13\r\n                        },\r\n                        legend: {\r\n                          display: false,\r\n                          position: ''\r\n                        }\r\n                      }}\r\n                      data={{\r\n                        labels: [\"Pop\", \"Tests\", \"Cases\"],\r\n                        datasets: [\r\n                          {\r\n                            label: \"\",\r\n                            data: [100, 40, 50],\r\n                            backgroundColor: colorsPie,\r\n                          }\r\n                        ]\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n  );\r\n};\r\n\r\n\r\nexport default GlobalMenu;\r\n\r\n\r\nlet colors = [\r\n\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  // \"#2F9599\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n];\r\n\r\nlet colorsPie = [\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"#955196\",\r\n  \"#444e86\",\r\n\r\n\r\n  \"rgb(212, 23, 83)\",\r\n\r\n\r\n\r\n  // \"#003f5c\",\r\n  // \"#A7226E\",\r\n  // \"#EC2049\",\r\n  // \"#F26B38\",\r\n  // \"#F7DB4F\",\r\n  // \"#2F9599\",\r\n  // \"purple\",\r\n]\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map2 from './components/Map2';\r\nimport AsiaMenu from \"./components/AsiaMenu\";\r\nimport EuropeMenu from \"./components/EuropeMenu\";\r\nimport AfricaMenu from \"./components/AfricaMenu\";\r\nimport OceaniaMenu from \"./components/OceaniaMenu\";\r\nimport NorthAmericaMenu from \"./components/NorthAmericaMenu\";\r\nimport SouthAmericaMenu from \"./components/SouthAmericaMenu\";\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport \"./App.css\";\r\n\r\nlet initialState = {\r\n  visible: true,\r\n  asia: false,\r\n  northamerica: false,\r\n  southamerica: false,\r\n  europe: false,\r\n  oceania: false,\r\n  africa: false,\r\n  global: false\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    ...initialState,\r\n  };\r\n  // Set state to default state\r\n  setDefaultState = () => {\r\n    this.setState({\r\n      ...initialState,\r\n    });\r\n  };\r\n  toggleMap = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      visible: !this.state.visible,\r\n    });\r\n  };\r\n  toggleAsia = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      asia: !this.state.asia,\r\n    });\r\n  };\r\n  toggleOceania = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      oceania: !this.state.oceania,\r\n    });\r\n  };\r\n  toggleEurope = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      europe: !this.state.europe,\r\n    });\r\n  };\r\n  toggleAfrica = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      africa: !this.state.africa,\r\n    });\r\n  };\r\n  toggleSouthAmerica = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      southamerica: !this.state.southamerica,\r\n    });\r\n  };\r\n  toggleNorthAmerica = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      northamerica: !this.state.northamerica,\r\n    });\r\n  };\r\n  toggleGlobal = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      global: !this.state.global,\r\n    });\r\n  };\r\n\r\n  toggleContinents = () => {\r\n    this.setState({\r\n      ...initialState,\r\n      continents: !this.state.continent,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ContinentButtons\r\n          toggleGlobal={this.toggleGlobal}\r\n          toggleAsia={this.toggleAsia}\r\n          toggleOceania={this.toggleOceania}\r\n          toggleAfrica={this.toggleAfrica}\r\n          toggleEurope={this.toggleEurope}\r\n          toggleNorthAmerica={this.toggleNorthAmerica}\r\n          toggleSouthAmerica={this.toggleSouthAmerica}\r\n        />\r\n        <div className=\"map\">\r\n          <div className=\"grid\">\r\n            <AsiaMenu\r\n              state={this.state.asia}\r\n              toggleAsia={this.toggleAsia}\r\n            />\r\n            <EuropeMenu\r\n              state={this.state.europe}\r\n              toggleEurope={this.toggleEurope}\r\n            />\r\n            <AfricaMenu\r\n              state={this.state.africa}\r\n              toggleAfrica={this.toggleAfrica}\r\n            />\r\n            <OceaniaMenu\r\n              state={this.state.oceania}\r\n              toggleOceania={this.toggleOceania}\r\n            />\r\n            <NorthAmericaMenu\r\n              state={this.state.northamerica}\r\n              toggleNorthAmerica={this.toggleNorthAmerica}\r\n            />\r\n            <SouthAmericaMenu\r\n              state={this.state.southamerica}\r\n              toggleSouthAmerica={this.toggleSouthAmerica}\r\n            />\r\n            <GlobalMenu\r\n              state={this.state.global}\r\n              toggleGlobal={this.toggleGlobal}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Map2 />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}