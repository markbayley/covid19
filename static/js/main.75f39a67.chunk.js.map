{"version":3,"sources":["components/ContinentButtons.js","utils/numberWithCommas.js","components/Map.js","components/GlobalMenu.js","components/Menu.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["ContinentButtons","toggleAsia","toggleEurope","toggleOceania","toggleNorthAmerica","toggleSouthAmerica","toggleAfrica","toggleGlobal","style","right","height","position","Button","className","id","onClick","variant","numberWithCommas","x","toString","replace","mapboxgl","accessToken","Map2","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","country","province","cases","stats","confirmed","deaths","useEffect","createDonutChart","props","offsets","counts","deaths1","deaths2","deaths3","deaths4","deaths5","total","count","push","fontSize","r0","Math","round","w","html","i","length","donutSegment","colors","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","color","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","average","reduce","next","min","item","max","averageD","minD","maxD","console","log","amr","minmr","maxmr","Map","container","current","center","zoom","pulsingDot","width","Uint8Array","size","onAdd","canvas","this","context","getContext","render","t","performance","now","outerRadius","clearRect","beginPath","arc","fillStyle","fill","getImageData","triggerRepaint","on","addImage","pixelRatio","addSource","addLayer","features","markers","markersOnScreen","isSourceLoaded","newMarkers","querySourceFeatures","feature","coords","cluster","cluster_id","marker","Marker","element","setLngLat","addTo","remove","updateMarkers","e","queryRenderedFeatures","layers","clusterId","getSource","getClusterExpansionZoom","err","easeTo","addControl","NavigationControl","GeolocateControl","fitBoundsOptions","maxZoom","once","popup2","Popup","closeButton","closeOnClick","getCanvas","cursor","slice","undefined","lastId","popup","countryISO","lookup","byCountry","iso2","byInternet","countryFlag","toLowerCase","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","abs","lngLat","lng","setHTML","getElementById","addEventListener","flyTo","essential","ref","backgroundColor","Menu","region","population","global","tests","state","countries","handleClose","populationGlobal","testsG","globalCases","globalDeaths","globalActive","globalCritical","globalTests","continentNames","casesMillion","deathsMillion","activeMillion","criticalMillion","testsMillion","casesPerContinent","selectedContinent","deathsPerContinent","casesGlobal","deathsGlobal","activeGlobal","criticalGlobal","testsGlobal","continentCountries","filter","continent","countryNames","selectedCountry","substring","casesPerOneMillion","deathsPerOneMillion","activePerOneMillion","lowest","criticalPerOneMillion","testsPerOneMillion","lower","higher","highest","mild","contained","moderate","serious","extreme","active1","active2","active3","active4","active5","colorCases","colorDeaths","colorActive","backgroundcolor","tabItems","title","content","Row","icon","faArrowUp","options","legend","display","labels","datasets","label","borderColor","paddingTop","Col","faArrowDown","elements","borderWidth","colorsPie","TabsComponent","useState","active","setActive","TabItemComponent","key","onItemClicked","isActive","error","animationIn","animationOut","isVisible","Container","xs","justifyContent","open","initialState","App","globaldata","setGlobal","a","BASE_URL","result","fetchContinents","getGlobal","continents","setContinents","getContinents","setCountries","res","String","fetchCountries","setState","toggle","GlobalMenu","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.75f39a67.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ContinentButtons = ({ toggleAsia, toggleEurope, toggleOceania, toggleNorthAmerica, toggleSouthAmerica, toggleAfrica, toggleGlobal }) => {\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        right: \"110px\",\r\n        height: \"100vh\",\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <Button\r\n        className=\"asia button\"\r\n        id=\"asia\"\r\n        onClick={toggleAsia}\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Asia</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"europe button\"\r\n        onClick={toggleEurope}\r\n        id=\"europe\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>Europe</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"northamerica button\"\r\n        onClick={toggleNorthAmerica}\r\n        id=\"northamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>North America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"africa button\"\r\n        onClick={toggleAfrica}\r\n        // size=\"md\"\r\n        id=\"africa\"\r\n        variant=\"outline-info\"\r\n      // className={getData(\"cases\")[1] / 1000000 <= 10 ? \"asia\" : \"asia2\"}\r\n      >\r\n        <h6>Africa</h6>\r\n        {/* {continentCases[0]} */}\r\n      </Button>\r\n      <Button\r\n        className=\"southamerica button\"\r\n        onClick={toggleSouthAmerica}\r\n        id=\"southamerica\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>South America</h6>\r\n      </Button>\r\n      <Button\r\n        className=\"oceania button\"\r\n        onClick={toggleOceania}\r\n        id=\"oceania\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n          Oceania\r\n        </h6>\r\n      </Button>\r\n      <Button\r\n        className=\"global button\"\r\n        onClick={toggleGlobal}\r\n        id=\"global\"\r\n        variant=\"outline-info\"\r\n      >\r\n        <h6>\r\n          {/* <i className=\"fa fa-info-circle\"></i> */}\r\n          Global\r\n        </h6>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContinentButtons;\r\n\r\n","export function numberWithCommas(x) {\r\n  if (!x) return \"0\";\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\";\r\nimport lookup from \"country-code-lookup\";\r\nimport \"./Map.scss\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoidHJib3QiLCJhIjoiY2s3NmFscm1xMTV0MDNmcXFyOWp1dGhieSJ9.tR2IMHDqBPOf_AeGjHOKFA\";\r\n\r\nfunction Map2() {\r\n  const mapboxElRef = useRef(null); // DOM element to render map\r\n\r\n  const fetcher = (url) =>\r\n    fetch(url)\r\n      .then((r) => r.json())\r\n      .then((data) =>\r\n        data.map((point, index) => ({\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [\r\n              point.coordinates.longitude,\r\n              point.coordinates.latitude\r\n            ]\r\n          },\r\n          properties: {\r\n            id: index,\r\n            country: point.country,\r\n            province: point.province,\r\n            cases: point.stats.confirmed,\r\n            deaths: point.stats.deaths,\r\n\r\n          }\r\n        }))\r\n      );\r\n\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n\r\n  // Initialize our map\r\n  useEffect(() => {\r\n    if (data) {\r\n      const average =\r\n        data.reduce((total, next) => total + next.properties.cases, 0) /\r\n        data.length;\r\n      const min = Math.min(...data.map((item) => item.properties.cases));\r\n      const max = Math.max(...data.map((item) => item.properties.cases));\r\n\r\n      const averageD =\r\n        data.reduce((total, next) => total + next.properties.deaths, 0) /\r\n        data.length;\r\n      const minD = Math.min(...data.map((item) => item.properties.deaths));\r\n      const maxD = Math.max(...data.map((item) => item.properties.deaths));\r\n\r\n\r\n\r\n      console.log(average, min, max, 'stats')\r\n      console.log(averageD, minD, maxD, 'statsD')\r\n\r\n      const amr = averageD / average;\r\n      const minmr = minD / min;\r\n      const maxmr = maxD / max;\r\n      console.log(amr, minmr, maxmr, 'amr')\r\n\r\n      const map = new mapboxgl.Map({\r\n        container: mapboxElRef.current,\r\n        style: \"mapbox://styles/mapbox/dark-v10\",\r\n        center: [99, 20], // Asia - intial geo location\r\n        zoom: 3 // initial zoom\r\n      });\r\n\r\n      //DOUGHNUT START     \r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const cases1 = ['<', ['get', 'cases'], 10000];\r\n      const cases2 = ['all', ['>=', ['get', 'cases'], 2], ['<', ['get', 'cases'], 100000]];\r\n      const cases3 = ['all', ['>=', ['get', 'cases'], 3], ['<', ['get', 'cases'], 250000]];\r\n      const cases4 = ['all', ['>=', ['get', 'cases'], 4], ['<', ['get', 'cases'], 500000]];\r\n      const cases5 = ['>=', ['get', 'cases'], 1000000];\r\n\r\n      // filters for classifying earthquakes into five categories based on magnitude\r\n      const deaths1 = ['<', ['get', 'deaths'], 100];\r\n      const deaths2 = ['all', ['>=', ['get', 'deaths'], 2], ['<', ['get', 'deaths'], 1000]];\r\n      const deaths3 = ['all', ['>=', ['get', 'deaths'], 3], ['<', ['get', 'deaths'], 2500]];\r\n      const deaths4 = ['all', ['>=', ['get', 'deaths'], 4], ['<', ['get', 'deaths'], 5000]];\r\n      const deaths5 = ['>=', ['get', 'deaths'], 10000];\r\n\r\n\r\n      const mr1 = deaths1 / cases1;\r\n      const mr2 = deaths2 / cases2;\r\n      const mr3 = deaths3 / cases3;\r\n      const mr4 = deaths4 / cases4;\r\n      const mr5 = deaths5 / cases5;\r\n\r\n      // colors to use for the categories\r\n      const colors = [\r\n        \"#444e86\",\r\n        \"#955196\",\r\n        \"#ffa600\",\r\n        \"#ff6e54\",\r\n        \"#dd5182\",\r\n        \"rgb(212, 23, 83)\",\r\n        \"rgb(45, 182, 130)\",\r\n      ];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      const size = 150;\r\n\r\n      // This implements `StyleImageInterface`\r\n      // to draw a pulsing dot icon on the map.\r\n      const pulsingDot = {\r\n        width: size,\r\n        height: size,\r\n        data: new Uint8Array(size * size * 4),\r\n\r\n        // When the layer is added to the map,\r\n        // get the rendering context for the map canvas.\r\n        onAdd: function () {\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = this.width;\r\n          canvas.height = this.height;\r\n          this.context = canvas.getContext('2d');\r\n        },\r\n\r\n        // Call once before every frame where the icon will be used.\r\n        render: function () {\r\n          const duration = 3000;\r\n          const t = (performance.now() % duration) / duration;\r\n\r\n          const radius = (size / 2) * 0.1;\r\n          const outerRadius = (size / 2) * 0.5 * t + radius;\r\n          const context = this.context;\r\n\r\n          // Draw the outer circle.\r\n          context.clearRect(0, 0, this.width, this.height);\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            outerRadius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          context.fillStyle = `rgba(67, 66, 66, ${1 - t})`;\r\n          context.fill();\r\n\r\n          // Draw the inner circle.\r\n          context.beginPath();\r\n          context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            radius,\r\n            0,\r\n            Math.PI * 2\r\n          );\r\n          // context.fillStyle = 'rgba(255, 100, 100, 0.1)';\r\n          // context.strokeStyle = 'grey';\r\n          // context.lineWidth = 2 + 4 * (1 - t);\r\n          // context.fill();\r\n          // context.stroke();\r\n\r\n          // Update this image's data with data from the canvas.\r\n          this.data = context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n          ).data;\r\n\r\n          // Continuously repaint the map, resulting\r\n          // in the smooth animation of the dot.\r\n          map.triggerRepaint();\r\n\r\n          // Return `true` to let the map know that the image was updated.\r\n          return true;\r\n        }\r\n      };\r\n\r\n      map.on('load', () => {\r\n\r\n\r\n\r\n\r\n        // add a clustered GeoJSON source for a sample set of earthquakes\r\n        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\r\n\r\n        map.addSource('dot-point', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            'type': 'FeatureCollection',\r\n            'features': data\r\n          }\r\n        });\r\n        map.addLayer({\r\n          'id': 'layer-with-pulsing-dot',\r\n          'type': 'symbol',\r\n          'source': 'dot-point',\r\n          'layout': {\r\n            'icon-image': 'pulsing-dot'\r\n          }\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        map.addSource('points', {\r\n          'type': 'geojson',\r\n          'data': {\r\n            type: \"FeatureCollection\",\r\n            features: data\r\n          },\r\n          'cluster': true,\r\n          'clusterRadius': 50,\r\n          'clusterProperties': {\r\n            // keep separate counts for each magnitude category in a cluster\r\n            'deaths1': ['+', ['case', deaths1, 1, 0]],\r\n            'deaths2': ['+', ['case', deaths2, 1, 0]],\r\n            'deaths3': ['+', ['case', deaths3, 1, 0]],\r\n            'deaths4': ['+', ['case', deaths4, 1, 0]],\r\n            'deaths5': ['+', ['case', deaths5, 1, 0]]\r\n          },\r\n\r\n        });\r\n\r\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\r\n        map.addLayer({\r\n          'id': 'circles',\r\n          'type': 'circle',\r\n          'source': 'points',\r\n       \r\n          'filter': ['!=', 'cluster', true],\r\n          'paint': {\r\n            'circle-color': [\r\n              'case',\r\n              deaths1,\r\n              colors[0],\r\n              deaths2,\r\n              colors[1],\r\n              deaths3,\r\n              colors[2],\r\n              deaths4,\r\n              colors[3],\r\n              colors[4]\r\n            ],\r\n            'circle-opacity': 0.6,\r\n            'circle-radius': 12,\r\n\r\n            // \"circle-radius\": [\r\n            //     \"interpolate\",\r\n            //     [\"linear\"],\r\n            //     [\"get\", \"cases\"],\r\n            //     1,\r\n            //     min,\r\n            //     1000,\r\n            //     8,\r\n            //     average / 4,\r\n            //     10,\r\n            //     average / 2,\r\n            //     14,\r\n            //     average,\r\n            //     18,\r\n            //     max,\r\n            //     50\r\n            //   ],\r\n          }\r\n        });\r\n        map.addLayer({\r\n        'id': 'clusters',\r\n        'type': 'symbol',\r\n        'source': 'points',\r\n        // 'filter': ['!=', 'cluster', true],\r\n        'layout': {\r\n          'text-field': [\r\n            'number-format',\r\n            ['get', 'points'],\r\n            { 'min-fraction-digits': 1, 'max-fraction-digits': 1 }\r\n          ],\r\n          'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n          'text-size': 10\r\n        },\r\n        'paint': {\r\n          'text-color': [\r\n            'case',\r\n            ['<', ['get', 'cases'], 3],\r\n            'black',\r\n            'white'\r\n          ],\r\n\r\n\r\n\r\n        // 'circle-color': [\r\n        //     \"interpolate\",\r\n        //     [\"linear\"],\r\n        //     [\"get\", \"cases\"],\r\n        //     min,\r\n        //     \"#ffffb2\",\r\n        //     max / 32,\r\n        //     \"#fed976\",\r\n        //     max / 16,\r\n        //     \"#feb24c\",\r\n        //     max / 8,\r\n        //     \"#fd8d3c\",\r\n        //     max / 4,\r\n        //     \"#fc4e2a\",\r\n        //     max / 2,\r\n        //     \"#e31a1c\",\r\n        //     max,\r\n        //     \"#b10026\"\r\n        //   ],\r\n        //   \"circle-opacity\": 0.75,\r\n        //       \"circle-stroke-width\": [\r\n        //         \"interpolate\",\r\n        //         [\"linear\"],\r\n        //         [\"get\", \"cases\"],\r\n        //         1,\r\n        //         1,\r\n        //         max,\r\n        //         1.75\r\n        //       ],\r\n\r\n\r\n          }\r\n        });\r\n\r\n        // objects for caching and keeping track of HTML marker objects (for performance)\r\n        const markers = {};\r\n        let markersOnScreen = {};\r\n\r\n        function updateMarkers() {\r\n          const newMarkers = {};\r\n          const features = map.querySourceFeatures('points');\r\n       \r\n          // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n          // and add it to the map if it's not there already\r\n          for (const feature of features) {\r\n            const coords = feature.geometry.coordinates;\r\n            const props = feature.properties;\r\n            if (!props.cluster) continue;\r\n            const id = props.cluster_id;\r\n\r\n            let marker = markers[id];\r\n            if (!marker) {\r\n              const el = createDonutChart(props);\r\n              marker = markers[id] = new mapboxgl.Marker({\r\n                element: el\r\n              }).setLngLat(coords);\r\n            }\r\n            newMarkers[id] = marker;\r\n\r\n            if (!markersOnScreen[id]) marker.addTo(map);\r\n          }\r\n          // for every marker we've added previously, remove those that are no longer visible\r\n          for (const id in markersOnScreen) {\r\n            if (!newMarkers[id]) markersOnScreen[id].remove();\r\n          }\r\n          markersOnScreen = newMarkers;\r\n        }\r\n\r\n        // after the GeoJSON data is loaded, update markers on the screen on every frame\r\n        map.on('render', () => {\r\n          if (!map.isSourceLoaded('points')) return;\r\n          updateMarkers();\r\n        });\r\n      });\r\n\r\n      // code for creating an SVG donut chart from feature properties\r\n      function createDonutChart(props) {\r\n        const offsets = [];\r\n        const counts = [\r\n          props.deaths1,\r\n          props.deaths2,\r\n          props.deaths3,\r\n          props.deaths4,\r\n          props.deaths5\r\n        ];\r\n        let total = 0;\r\n        for (const count of counts) {\r\n          offsets.push(total);\r\n          total += count;\r\n        }\r\n        const fontSize =\r\n          total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n        const r =\r\n          total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n        const r0 = Math.round(r * 0.6);\r\n        const w = r * 2;\r\n\r\n        let html = `<div>\r\n        <svg \"class=\"zoom\" width=\"${w}\" height=\"${w}\" viewbox=\"0 0 ${w} ${w}\" text-anchor=\"middle\" style=\"font: ${fontSize}px ; display: \"block\"; >`;\r\n\r\n        for (let i = 0; i < counts.length; i++) {\r\n          html += donutSegment(\r\n            offsets[i] / total,\r\n            (offsets[i] + counts[i]) / total,\r\n            r,\r\n            r0,\r\n            colors[i]\r\n          );\r\n        }\r\n        html += `<circle cx=\"${r}\" cy=\"${r}\" r=\"${r0}\" fill=\"#212529\" />\r\n        <text  dominant-baseline=\"central\" transform=\"translate(${r}, ${r})\" fill=\"#dfdfdf\" >\r\n        ${total.toLocaleString()}\r\n        </text>\r\n        </svg>\r\n        </div>`;\r\n\r\n        const el = document.createElement('div');\r\n        el.innerHTML = html;\r\n        return el.firstChild;\r\n      }\r\n\r\n      function donutSegment(start, end, r, r0, color) {\r\n        if (end - start === 1) end -= 0.00001;\r\n        const a0 = 2 * Math.PI * (start - 0.25);\r\n        const a1 = 2 * Math.PI * (end - 0.25);\r\n        const x0 = Math.cos(a0),\r\n          y0 = Math.sin(a0);\r\n        const x1 = Math.cos(a1),\r\n          y1 = Math.sin(a1);\r\n        const largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n        // draw an SVG path\r\n        return `<path  d=\"M ${r + r0 * x0} ${r + r0 * y0} L ${r + r * x0} ${r + r * y0\r\n          } A ${r} ${r} 0 ${largeArc} 1 ${r + r * x1} ${r + r * y1} L ${r + r0 * x1\r\n          } ${r + r0 * y1} A ${r0} ${r0} 0 ${largeArc} 0 ${r + r0 * x0} ${r + r0 * y0\r\n          }\" fill=\"${color}\" />`;\r\n      }\r\n\r\n      // inspect a cluster on click\r\n      map.on('click', 'clusters', function (e) {\r\n        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });\r\n        var clusterId = features[0].properties.cluster_id;\r\n       console.log('hi')\r\n        map.getSource('points').getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n          if (err)\r\n            return;\r\n           \r\n          map.easeTo({\r\n            center: features[0].geometry.coordinates,\r\n            zoom: zoom\r\n          });\r\n          // console.log(clusterId, 'clusterID', features, 'features', features[0].properties.cluster_id)\r\n        });\r\n      });\r\n      // DOUGHNUT END\r\n\r\n\r\n      \r\n\r\n\r\n      //Add navigation controls to the top right of the canvas\r\n      map.addControl(new mapboxgl.NavigationControl());\r\n\r\n      // Add navigation to center the map on your geo location\r\n      map.addControl(\r\n        new mapboxgl.GeolocateControl({\r\n          fitBoundsOptions: { maxZoom: 6 }\r\n        })\r\n      );\r\n\r\n\r\n\r\n      //CIRCLES\r\n      map.once(\"load\", function () {\r\n        // Add our SOURCE\r\n\r\n\r\n        // Add our layer\r\n        // map.addLayer({\r\n        //   id: \"circles\",\r\n        //   source: \"points\", // this should be the id of source\r\n        //   type: \"circle\",\r\n        //   paint: {\r\n        //     \"circle-opacity\": 0.75,\r\n        //     \"circle-stroke-width\": [\r\n        //       \"interpolate\",\r\n        //       [\"linear\"],\r\n        //       [\"get\", \"cases\"],\r\n        //       1,\r\n        //       1,\r\n        //       max,\r\n        //       1.75\r\n        //     ],\r\n        // \"circle-radius\": [\r\n        //   \"interpolate\",\r\n        //   [\"linear\"],\r\n        //   [\"get\", \"cases\"],\r\n        //   1,\r\n        //   min,\r\n        //   1000,\r\n        //   8,\r\n        //   average / 4,\r\n        //   10,\r\n        //   average / 2,\r\n        //   14,\r\n        //   average,\r\n        //   18,\r\n        //   max,\r\n        //   50\r\n        // ],\r\n        // \"circle-color\": [\r\n        //     \"interpolate\",\r\n        //     [\"linear\"],\r\n        //     [\"get\", \"cases\"],\r\n        //     min,\r\n        //     \"#ffffb2\",\r\n        //     max / 32,\r\n        //     \"#fed976\",\r\n        //     max / 16,\r\n        //     \"#feb24c\",\r\n        //     max / 8,\r\n        //     \"#fd8d3c\",\r\n        //     max / 4,\r\n        //     \"#fc4e2a\",\r\n        //     max / 2,\r\n        //     \"#e31a1c\",\r\n        //     max,\r\n        //     \"#b10026\"\r\n        //   ]\r\n        //   }\r\n        // });\r\n\r\n\r\n        \r\n        const popup2 = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId2;\r\n\r\n        map.on(\"click\", \"clusters\", (e) => {\r\n          // const id = e.features[0].properties.id;\r\n\r\n          // if (id !== lastId2) {\r\n          //   lastId2 = id;\r\n          //   const {\r\n          //     cases,\r\n          //     deaths,\r\n          //     country,\r\n          //     province\r\n          //   } = e.features[0].properties;\r\n\r\n            // Change the pointer type on mouseenter\r\n            map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            const coordinates = e.geometry.coordinates.slice();\r\n\r\n            // const countryISO =\r\n            //   lookup.byCountry(country)?.iso2 ||\r\n            //   lookup.byInternet(country)?.iso2;\r\n            // const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n            // const provinceHTML =\r\n            //   province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n            // const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n            // const countryFlagHTML = Boolean(countryISO)\r\n            //   ? `<img src=\"${countryFlag}\"></img>`\r\n            //   : \"\";\r\n\r\n            // const HTML = `<p>Country: <b>${country}</b></p>\r\n            //     ${provinceHTML}\r\n            //     <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n            //     <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n            //     <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n            //     ${countryFlagHTML}`;\r\n\r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            // while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n            //   coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            // }\r\n\r\n            popup2.setLngLat([0, 20]).addTo(map);\r\n          // }\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"clusters\", function () {\r\n          lastId2 = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup2.remove();\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const popup = new mapboxgl.Popup({\r\n          closeButton: false,\r\n          closeOnClick: false\r\n        });\r\n\r\n        let lastId;\r\n\r\n        map.on(\"mousemove\", \"circles\", (e) => {\r\n          const id = e.features[0].properties.id;\r\n\r\n          if (id !== lastId) {\r\n            lastId = id;\r\n            const {\r\n              cases,\r\n              deaths,\r\n              country,\r\n              province\r\n            } = e.features[0].properties;\r\n\r\n            // Change the pointer type on mouseenter\r\n            map.getCanvas().style.cursor = \"pointer\";\r\n\r\n            const coordinates = e.features[0].geometry.coordinates.slice();\r\n\r\n            const countryISO =\r\n              lookup.byCountry(country)?.iso2 ||\r\n              lookup.byInternet(country)?.iso2;\r\n            const countryFlag = `https://raw.githubusercontent.com/stefangabos/world_countries/master/data/flags/64x64/${countryISO?.toLowerCase()}.png`;\r\n            const provinceHTML =\r\n              province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n            const countryFlagHTML = Boolean(countryISO)\r\n              ? `<img src=\"${countryFlag}\"></img>`\r\n              : \"\";\r\n\r\n            const HTML = `  ${countryFlagHTML}<p>Country: <b>${country}</b></p>\r\n                ${provinceHTML}\r\n                <p>Cases: <b>${numberWithCommas(cases)}</b></p>\r\n                <p>Deaths: <b>${numberWithCommas(deaths)}</b></p>\r\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n                `;\r\n\r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            }\r\n\r\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\r\n          }\r\n        });\r\n\r\n        map.on(\"mouseleave\", \"circles\", function () {\r\n          lastId = undefined;\r\n          map.getCanvas().style.cursor = \"\";\r\n          popup.remove();\r\n        });\r\n\r\n        // map.doubleClickZoom.enable();\r\n\r\n\r\n\r\n\r\n        document.getElementById(\"africa\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3,\r\n            center: [3.2, 1.8],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"europe\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 4,\r\n            center: [6, 47],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document\r\n          .getElementById(\"northamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3,\r\n              center: [-120, 45],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        document\r\n          .getElementById(\"southamerica\")\r\n          .addEventListener(\"click\", function () {\r\n            map.flyTo({\r\n              zoom: 3.5,\r\n              center: [-74, -4],\r\n              essential: true,\r\n            });\r\n          });\r\n\r\n        document.getElementById(\"asia\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.1,\r\n            center: [100, 17],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"oceania\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 3.7,\r\n            center: [131, -28],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n        document.getElementById(\"global\").addEventListener(\"click\", function () {\r\n          map.flyTo({\r\n            zoom: 1.7,\r\n            center: [0, 20],\r\n            essential: true,\r\n          });\r\n        });\r\n\r\n\r\n\r\n\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mapContainer\" >\r\n        {/* Mapbox Container */}\r\n        <div className=\"mapBox\" ref={mapboxElRef} />\r\n      </div>\r\n      <div id=\"state-legend\" className=\"legend\">\r\n        <h6>Covid-19</h6>\r\n        <div><span style={{ backgroundColor: \"#dd5182\" }}></span>Highest</div>\r\n        <div><span style={{ backgroundColor: \"#ff6e54\" }}></span>Higher</div>\r\n\r\n        <div><span style={{ backgroundColor: \"#ffa600\" }}></span>Average</div>\r\n        <div><span style={{ backgroundColor: \"#955196\" }}></span>Lower</div>\r\n        <div><span style={{ backgroundColor: \"#444e86\" }}></span>Lowest</div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map2;","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\n\r\nconst Menu = ({ region, index, population, global, state,\r\n  tests, countries, handleClose, populationGlobal, testsG,\r\n  globalCases, globalDeaths, globalActive, globalCritical, globalTests, continentNames, casesMillion, deathsMillion, activeMillion, criticalMillion, testsMillion\r\n}) => {\r\n\r\n  const casesPerContinent = casesMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const deathsPerContinent = deathsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const activePerContinent = activeMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const criticalPerContinent = criticalMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  const testsPerContinent = testsMillion.map(selectedContinent => ((selectedContinent / 1000).toFixed(1)));\r\n  console.log(casesPerContinent, 'casesPerContinent')\r\n  //  const globalCases = globaldata.casesPerOneMillion;\r\n  const casesGlobal = (globalCases / 1000).toFixed(1);\r\n  const deathsGlobal = (globalDeaths / 1000).toFixed(1);\r\n  const activeGlobal = (globalActive / 1000).toFixed(1);\r\n  const criticalGlobal = (globalCritical / 1000).toFixed(1);\r\n  const testsGlobal = (globalTests / 1000).toFixed(1);\r\n\r\n\r\n\r\n  // Filter Countries in Region\r\n  const continentCountries = countries.filter(country => country.continent === region)\r\n  // Map Country Names && country.population > 1000000\r\n  const countryNames = countries.filter(country => country.continent === region && country.population > 100000).map(selectedCountry => selectedCountry.country.substring(0, 12))\r\n  //Map mortality rate for those countries\r\n  const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n  const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n  const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n  const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n  const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n  const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n  // Create strata for classifting cases for doughnut charts\r\n  const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n  const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n  const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n  const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n  const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n  // Create Strata for Deaths\r\n  const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n  const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n  const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n  const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n  const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n  // Create Strata for Active\r\n  const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n  const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n  const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n  const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n  const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n  const colorCases = [];\r\n  for (let i = 0; i < casesPerContinent.length; i++) {\r\n    if (casesPerContinent[i] < 50) { colorCases.push(\"#444e86\") }\r\n    if (casesPerContinent[i] >= 50 && casesPerContinent[i] < 100) { colorCases.push(\"#955196\") }\r\n    if (casesPerContinent[i] >= 100 && casesPerContinent[i] < 150) { colorCases.push(\"#ffa600\") }\r\n    if (casesPerContinent[i] >= 150 && casesPerContinent[i] < 350) { colorCases.push(\"#ff6e54\") }\r\n    if (casesPerContinent[i] >= 350) { colorCases.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorDeaths = [];\r\n  for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n    if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n    if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n    if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n    if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n    if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n  }\r\n\r\n  const colorActive = [];\r\n  for (let i = 0; i < activePerOneMillion.length; i++) {\r\n    if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n    if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n    if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n    if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n    if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n  }\r\n\r\n  const backgroundcolor = [];\r\n  for (let i = 0; i < mortalityRate.length; i++) {\r\n    if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n    if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n    if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n    if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n    if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n  }\r\n\r\n  const tabItems = [\r\n    {\r\n      id: 1,\r\n      title: 'Cases',\r\n      content:\r\n    <>\r\n          <Row className={'box p-2 m-1'} style={{ color: \"#fff\" }}>\r\n            <h1>{casesGlobal}<FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n            <h5 >/1000 Cases</h5>\r\n          </Row>\r\n    <Row>\r\n          <Bar\r\n            height={200}\r\n            width={300}\r\n            options={{\r\n              legend: {\r\n                display: false,\r\n                position: ''\r\n              },\r\n            }}\r\n            data={{\r\n              labels: continentNames,\r\n              datasets: [\r\n                {\r\n                  label: \"Cases/1000\",\r\n                  data: casesPerContinent,\r\n                  backgroundColor: colorCases,\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n    </Row>\r\n\r\n\r\n          <Row className=\"subtitle px-3 pt-2\">\r\n            <Line\r\n              width={160}\r\n              height={100}\r\n              options={{\r\n                legend: {\r\n                  display: false,\r\n                  position: 'bottom'\r\n                }\r\n              }}\r\n              data={{\r\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                datasets: [\r\n                  {\r\n                    label: \"First dataset\",\r\n                    data: casesMillion,\r\n                    fill: true,\r\n                    backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                    borderColor: \"rgba(75,192,192,1)\"\r\n                  },\r\n                ]\r\n              }}\r\n            />\r\n          </Row>\r\n          <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n          <Row className=\"subtitle m-1 pt-1\" >\r\n            <Col className=\"box\" >Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n            <Col className=\"box\">Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalGlobal / casesGlobal * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n          </Row>\r\n          <Row className=\"subtitle m-1\" >\r\n            <Col className=\"box\" > Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsGlobal / casesGlobal * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n            <Col className=\"box\" > Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(testsG / populationGlobal).toFixed(2)}</h3><div >/person</div></Col>\r\n          </Row>\r\n          <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n          <Doughnut\r\n            width={170}\r\n            options={{\r\n              elements: {\r\n                arc: {\r\n                  borderWidth: 0\r\n                }\r\n              },\r\n              legend: {\r\n                display: false,\r\n                position: ''\r\n              },\r\n            }}\r\n            data={{\r\n              labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n              datasets: [\r\n                {\r\n                  data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                  backgroundColor: colorsPie,\r\n                }\r\n              ]\r\n            }}\r\n          />\r\n      \r\n       \r\n        </>\r\n    },\r\n{\r\n  id: 2,\r\n    title: 'Deaths',\r\n      // icon: 'tabitem__icon fas fa-child',\r\n      content:\r\n  <>\r\n    <Row>\r\n      <Col className=\"pr-0\">\r\n        <HorizontalBar\r\n          height={830}\r\n          width={200}\r\n          options={{\r\n            legend: {\r\n              display: false,\r\n              position: ''\r\n            },\r\n            // title: {\r\n            //   display: true,\r\n            //   text: 'Mortality in ' + region,\r\n            //   fontSize: 13,\r\n\r\n            // },\r\n          }}\r\n          data={{\r\n            labels: countryNames,\r\n            datasets: [\r\n              {\r\n                label: \"Cases/1000\",\r\n                data: deathsPerContinent,\r\n                backgroundColor: colorDeaths,\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col className=\"px-0\">\r\n\r\n        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n          <h1>{deathsGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n          <h5 >/1000 Deaths</h5>\r\n        </Row>\r\n\r\n        {/* </Row> */}\r\n        <Row className=\"subtitle px-3 pt-2\">\r\n          <Line\r\n            width={160}\r\n            height={100}\r\n            options={{\r\n              // title: {\r\n              //     display: true,\r\n              //     text: 'Trends in ' + region,\r\n              //     fontSize: 13,\r\n              //     postion: 'bottom'\r\n              // },\r\n              legend: {\r\n                display: false,\r\n                position: 'bottom'\r\n              }\r\n            }}\r\n            data={{\r\n              labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n              datasets: [\r\n                {\r\n                  label: \"First dataset\",\r\n                  data: deathsMillion,\r\n                  fill: true,\r\n                  backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                  borderColor: \"rgba(75,192,192,1)\"\r\n                },\r\n                // {\r\n                //   label: \"Second dataset\",\r\n                //   data: [33, 25, 35, 51, 54, 76],\r\n                //   fill: false,\r\n                //   borderColor: \"#742774\"\r\n                // }\r\n              ]\r\n            }}\r\n          />\r\n        </Row>\r\n        <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n          <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n          <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n        </Row>\r\n\r\n        <Row className=\"subtitle m-1\" >\r\n          <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n          <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n        </Row>\r\n        <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n        <Doughnut\r\n          width={170}\r\n          options={{\r\n            // maintainAspectRatio: true,\r\n            // title: {\r\n            //     display: true,\r\n            //     text: 'Countries in ' + region,\r\n            //     fontSize: 13\r\n            // },\r\n            elements: {\r\n              arc: {\r\n                borderWidth: 0\r\n              }\r\n            },\r\n            legend: {\r\n              display: false,\r\n              position: ''\r\n            },\r\n          }}\r\n          data={{\r\n            labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n            datasets: [\r\n              {\r\n                data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                backgroundColor: colorsPie,\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n\r\n\r\n\r\n\r\n      </Col>\r\n    </Row>\r\n  </>\r\n},\r\n\r\n{\r\n  id: 3,\r\n    title: 'Active',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n        content:\r\n  <>\r\n    <Row>\r\n      <Col className=\"pr-0\">\r\n        <HorizontalBar\r\n          height={830}\r\n          width={200}\r\n          options={{\r\n            legend: {\r\n              display: false,\r\n              position: ''\r\n            },\r\n            // title: {\r\n            //   display: true,\r\n            //   text: 'Mortality in ' + region,\r\n            //   fontSize: 13,\r\n\r\n            // },\r\n          }}\r\n          data={{\r\n            labels: countryNames,\r\n            datasets: [\r\n              {\r\n                label: \"Cases/1000\",\r\n                data: activePerOneMillion,\r\n                backgroundColor: colorActive,\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col className=\"px-0\">\r\n\r\n        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n          <h1>{activeGlobal}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n          <h5 >/1000 Active</h5>\r\n        </Row>\r\n\r\n        {/* </Row> */}\r\n        <Row className=\"subtitle px-3 pt-2\">\r\n          <Line\r\n            width={160}\r\n            height={100}\r\n            options={{\r\n              // title: {\r\n              //     display: true,\r\n              //     text: 'Trends in ' + region,\r\n              //     fontSize: 13,\r\n              //     postion: 'bottom'\r\n              // },\r\n              legend: {\r\n                display: false,\r\n                position: 'bottom'\r\n              }\r\n            }}\r\n            data={{\r\n              labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n              datasets: [\r\n                {\r\n                  label: \"First dataset\",\r\n                  data: activePerOneMillion,\r\n                  fill: true,\r\n                  backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                  borderColor: \"rgba(75,192,192,1)\"\r\n                },\r\n                // {\r\n                //   label: \"Second dataset\",\r\n                //   data: [33, 25, 35, 51, 54, 76],\r\n                //   fill: false,\r\n                //   borderColor: \"#742774\"\r\n                // }\r\n              ]\r\n            }}\r\n          />\r\n        </Row>\r\n        <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n          <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n          <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n        </Row>\r\n\r\n        <Row className=\"subtitle m-1\" >\r\n          <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div >/active</div></Col>\r\n          <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n        </Row>\r\n        <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n        <Doughnut\r\n          width={170}\r\n          options={{\r\n            // maintainAspectRatio: true,\r\n            // title: {\r\n            //     display: true,\r\n            //     text: 'Countries in ' + region,\r\n            //     fontSize: 13\r\n            // },\r\n            elements: {\r\n              arc: {\r\n                borderWidth: 0\r\n              }\r\n            },\r\n            legend: {\r\n              display: false,\r\n              position: ''\r\n            },\r\n          }}\r\n          data={{\r\n            labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n            datasets: [\r\n              {\r\n                data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                backgroundColor: colorsPie,\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n\r\n\r\n\r\n\r\n      </Col>\r\n    </Row>\r\n  </>\r\n},\r\n{\r\n  id: 4,\r\n    title: 'Critical',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n        content: <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: casesPerOneMillion,\r\n                      backgroundColor: colorCases,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{(criticalGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                <h5 >/1000 Critical</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n},\r\n{\r\n  id: 5,\r\n    title: 'Tests',\r\n      icon: 'tabitem__icon fa fa-network-wired',\r\n        content: <>\r\n          <Row>\r\n            <Col className=\"pr-0\">\r\n              <HorizontalBar\r\n                height={830}\r\n                width={200}\r\n                options={{\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                  // title: {\r\n                  //   display: true,\r\n                  //   text: 'Mortality in ' + region,\r\n                  //   fontSize: 13,\r\n\r\n                  // },\r\n                }}\r\n                data={{\r\n                  labels: countryNames,\r\n                  datasets: [\r\n                    {\r\n                      label: \"Cases/1000\",\r\n                      data: casesPerOneMillion,\r\n                      backgroundColor: colorCases,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"px-0\">\r\n\r\n              {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n              {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n              <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                <h1>{(testsGlobal / 1).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                <h5 >/1000 Tests</h5>\r\n              </Row>\r\n\r\n              {/* </Row> */}\r\n              <Row className=\"subtitle px-3 pt-2\">\r\n                <Line\r\n                  width={160}\r\n                  height={100}\r\n                  options={{\r\n                    // title: {\r\n                    //     display: true,\r\n                    //     text: 'Trends in ' + region,\r\n                    //     fontSize: 13,\r\n                    //     postion: 'bottom'\r\n                    // },\r\n                    legend: {\r\n                      display: false,\r\n                      position: 'bottom'\r\n                    }\r\n                  }}\r\n                  data={{\r\n                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                    datasets: [\r\n                      {\r\n                        label: \"First dataset\",\r\n                        data: casesPerOneMillion,\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                      },\r\n                      // {\r\n                      //   label: \"Second dataset\",\r\n                      //   data: [33, 25, 35, 51, 54, 76],\r\n                      //   fill: false,\r\n                      //   borderColor: \"#742774\"\r\n                      // }\r\n                    ]\r\n                  }}\r\n                />\r\n              </Row>\r\n              <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n              <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n              </Row>\r\n\r\n              <Row className=\"subtitle m-1\" >\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n              </Row>\r\n              <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n              <Doughnut\r\n                width={170}\r\n                options={{\r\n                  // maintainAspectRatio: true,\r\n                  // title: {\r\n                  //     display: true,\r\n                  //     text: 'Countries in ' + region,\r\n                  //     fontSize: 13\r\n                  // },\r\n                  elements: {\r\n                    arc: {\r\n                      borderWidth: 0\r\n                    }\r\n                  },\r\n                  legend: {\r\n                    display: false,\r\n                    position: ''\r\n                  },\r\n                }}\r\n                data={{\r\n                  labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                  datasets: [\r\n                    {\r\n                      data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                      backgroundColor: colorsPie,\r\n                    }\r\n                  ]\r\n                }}\r\n              />\r\n\r\n\r\n\r\n\r\n            </Col>\r\n          </Row>\r\n        </>\r\n          ,\r\n    },\r\n  ];\r\n\r\n\r\nconst TabsComponent = () => {\r\n  const [active, setActive] = useState(1);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"tabs\">\r\n        {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n          key={title}\r\n          icon={icon}\r\n          title={title}\r\n          onItemClicked={() => setActive(id)}\r\n          isActive={active === id}\r\n        />\r\n        )}\r\n      </div>\r\n      <div className=\"content\">\r\n        {tabItems.map(({ id, content }) => {\r\n          return active === id ? content : ''\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TabItemComponent = ({\r\n  icon = '',\r\n  title = '',\r\n  onItemClicked = () => console.error('You passed no action to the component'),\r\n  isActive = false,\r\n}) => {\r\n  return (\r\n    <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n      <i className={icon}></i>\r\n      <p className=\"tabitem__title\">{title}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nreturn (\r\n  <>\r\n    <div className={global ? \"visible\" : \"hidden\"}>\r\n      <Animated\r\n        animationIn=\"fadeInLeft\"\r\n        animationOut=\"fadeOut\"\r\n        isVisible={true}\r\n      >\r\n\r\n        <div className=\"side\">\r\n          <div className={!global ? \"hidden\" : \"visible\"}>\r\n            <Container>\r\n              <Row className=\"title\" >\r\n                <Col xs={10} className=\"px-0 pt-2\">{region}</Col>\r\n                <Col className=\"px-0\">\r\n                  <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                    <Button\r\n                      // onClick={toggleAsia}\r\n                      onClick={handleClose}\r\n                      // size=\"lg\"\r\n                      variant=\"outline-info\"\r\n                      // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                      className=\"close button\"\r\n                    >\r\n\r\n                      <h6>x</h6>\r\n\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <TabsComponent\r\n                countries={countries}\r\n                index={index}\r\n                region={region}\r\n                casesMillion={casesMillion}\r\n                activeMillion={activeMillion}\r\n                criticalMillion={criticalMillion}\r\n                deathsMillion={deathsMillion}\r\n                tests={tests}\r\n\r\n              />\r\n\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n\r\n\r\n  </>\r\n);\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n  \"#444e86\",\r\n  \"#955196\",\r\n  \"#ffa600\",\r\n  \"#ff6e54\",\r\n  \"#dd5182\",\r\n  \"rgb(212, 23, 83)\",\r\n  \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState } from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\nimport { numberWithCommas } from \"../utils/numberWithCommas\";\r\nimport { Doughnut, Bar, HorizontalBar, Line } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport TabsComponent from '../misc/TabsComponent'\r\n\r\nconst Menu = ({ region, index, population, casesMillion, open,\r\n    activeMillion, criticalMillion, deathsMillion, tests, countries, handleClose,\r\n}) => {\r\n\r\n    // Filter Countries in Region\r\n    const continentCountries = countries.filter(country => country.continent === region)\r\n    // Map Country Names && country.population > 1000000\r\n    const countryNames = countries.filter(country => country.continent === region && country.population > 100000).map(selectedCountry => selectedCountry.country.substring(0, 12))\r\n    //Map mortality rate for those countries\r\n    const casesPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.casesPerOneMillion) / 1000).toFixed(1)));\r\n    const deathsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion) / 1000).toFixed(2)));\r\n    const mortalityRate = continentCountries.map(selectedCountry => (((selectedCountry.deathsPerOneMillion / selectedCountry.casesPerOneMillion)) * 100).toFixed(2));\r\n    const activePerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.activePerOneMillion) / 1000).toFixed(2)));\r\n    const criticalPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.criticalPerOneMillion) / 1000).toFixed(2)));\r\n    const testsPerOneMillion = continentCountries.map(selectedCountry => (((selectedCountry.testsPerOneMillion) / 1000).toFixed(2)));\r\n    // Create strata for classifting cases for doughnut charts\r\n    const lowest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 < 50));\r\n    const lower = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 50 && selectedCountry.casesPerOneMillion / 1000 < 100));\r\n    const average = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 100 && selectedCountry.casesPerOneMillion / 1000 < 150));\r\n    const higher = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 >= 150 && selectedCountry.casesPerOneMillion / 1000 < 350));\r\n    const highest = continentCountries.filter(selectedCountry => (selectedCountry.casesPerOneMillion / 1000 > 350));\r\n\r\n    // Create Strata for Deaths\r\n    const mild = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 < .5));\r\n    const contained = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= .5 && selectedCountry.deathsPerOneMillion / 1000 < 1));\r\n    const moderate = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1 && selectedCountry.deathsPerOneMillion / 1000 < 1.5));\r\n    const serious = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 >= 1.5 && selectedCountry.deathsPerOneMillion / 1000 < 2.5));\r\n    const extreme = continentCountries.filter(selectedCountry => (selectedCountry.deathsPerOneMillion / 1000 > 2.5));\r\n\r\n    // Create Strata for Active\r\n    const active1 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 < 5));\r\n    const active2 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 5 && selectedCountry.activePerOneMillion / 1000 < 10));\r\n    const active3 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 10 && selectedCountry.activePerOneMillion / 1000 < 15));\r\n    const active4 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 >= 15 && selectedCountry.activePerOneMillion / 1000 < 25));\r\n    const active5 = continentCountries.filter(selectedCountry => (selectedCountry.activePerOneMillion / 1000 > 25));\r\n\r\n    const colorCases = [];\r\n    for (let i = 0; i < casesPerOneMillion.length; i++) {\r\n        if (casesPerOneMillion[i] < 50) { colorCases.push(\"#444e86\") }\r\n        if (casesPerOneMillion[i] >= 50 && casesPerOneMillion[i] < 100) { colorCases.push(\"#955196\") }\r\n        if (casesPerOneMillion[i] >= 100 && casesPerOneMillion[i] < 150) { colorCases.push(\"#ffa600\") }\r\n        if (casesPerOneMillion[i] >= 150 && casesPerOneMillion[i] < 350) { colorCases.push(\"#ff6e54\") }\r\n        if (casesPerOneMillion[i] >= 350) { colorCases.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorDeaths = [];\r\n    for (let i = 0; i < deathsPerOneMillion.length; i++) {\r\n        if (deathsPerOneMillion[i] < .5) { colorDeaths.push(\"#444e86\") }\r\n        if (deathsPerOneMillion[i] >= .5 && deathsPerOneMillion[i] < 1) { colorDeaths.push(\"#955196\") }\r\n        if (deathsPerOneMillion[i] >= 1 && deathsPerOneMillion[i] < 1.5) { colorDeaths.push(\"#ffa600\") }\r\n        if (deathsPerOneMillion[i] >= 1.5 && deathsPerOneMillion[i] < 2.5) { colorDeaths.push(\"#ff6e54\") }\r\n        if (deathsPerOneMillion[i] >= 2.5) { colorDeaths.push(\"#dd5182\") }\r\n    }\r\n\r\n    const colorActive = [];\r\n    for (let i = 0; i < activePerOneMillion.length; i++) {\r\n        if (activePerOneMillion[i] < .5) { colorActive.push(\"#444e86\") }\r\n        if (activePerOneMillion[i] >= .5 && activePerOneMillion[i] < 1) { colorActive.push(\"#955196\") }\r\n        if (activePerOneMillion[i] >= 1 && activePerOneMillion[i] < 1.5) { colorActive.push(\"#ffa600\") }\r\n        if (activePerOneMillion[i] >= 1.5 && activePerOneMillion[i] < 2.5) { colorActive.push(\"#ff6e54\") }\r\n        if (activePerOneMillion[i] >= 2.5) { colorActive.push(\"#dd5182\") }\r\n    }\r\n\r\n    const backgroundcolor = [];\r\n    for (let i = 0; i < mortalityRate.length; i++) {\r\n        if (mortalityRate[i] < 1.0) { backgroundcolor.push(\"#444e86\") }\r\n        if (mortalityRate[i] >= 1.0 && mortalityRate[i] < 2.0) { backgroundcolor.push(\"#955196\") }\r\n        if (mortalityRate[i] >= 2.0 && mortalityRate[i] < 3.5) { backgroundcolor.push(\"#ffa600\") }\r\n        if (mortalityRate[i] >= 3.5 && mortalityRate[i] < 6.0) { backgroundcolor.push(\"#ff6e54\") }\r\n        if (mortalityRate[i] >= 6.0) { backgroundcolor.push(\"#dd5182\") }\r\n    }\r\n\r\n    const tabItems = [\r\n        {\r\n            id: 1,\r\n            title: 'Cases',\r\n            content:\r\n                <Row>\r\n                    <Col className=\"pr-0\">\r\n                        <HorizontalBar\r\n                            height={800}\r\n                            width={200}\r\n                            options={{\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: countryNames,\r\n                                datasets: [\r\n                                    {\r\n                                        label: \"Cases/1000\",\r\n                                        data: casesPerOneMillion,\r\n                                        backgroundColor: colorCases,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n                        <Row className={'box p-2 m-1'} style={{color: \"#fff\"}}>\r\n                          \r\n                              \r\n\r\n\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n                            <h5 >/1000 Cases</h5>\r\n                        </Row>\r\n                        <Row className=\"subtitle px-3 pt-2\">\r\n                            <Line\r\n                                width={160}\r\n                                height={100}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: 'bottom'\r\n                                    }\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"First dataset\",\r\n                                            data: casesPerOneMillion,\r\n                                            fill: true,\r\n                                            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                            borderColor: \"rgba(75,192,192,1)\"\r\n                                        },\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Row>\r\n                        <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n                        <Row className=\"subtitle m-1 pt-1\" >\r\n                            <Col className=\"box\" >Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                            <Col className=\"box\">Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                        </Row>\r\n                        <Row className=\"subtitle m-1\" >\r\n                            <Col className=\"box\" > Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                            <Col className=\"box\" > Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                        <Doughnut\r\n                            width={170}\r\n                            options={{\r\n                                elements: {\r\n                                    arc: {\r\n                                        borderWidth: 0\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                datasets: [\r\n                                    {\r\n                                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                        backgroundColor: colorsPie,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Deaths',\r\n            // icon: 'tabitem__icon fas fa-child',\r\n            content:\r\n                <>\r\n                    <Row>\r\n                        <Col className=\"pr-0\">\r\n                            <HorizontalBar\r\n                                height={830}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: deathsPerOneMillion,\r\n                                            backgroundColor: colorDeaths,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(deathsMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                                <h5 >/1000 Deaths</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: deathsPerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"#4BC0C0\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / deathsMillion[index] * 100).toFixed(0)}%</h3><div>/deaths</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / deathsMillion[index] * 100).toFixed(2)}%</h3><div>/deaths</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Deaths\", \"Lower Deaths\", \"Average Deaths\", \"Higher Deaths\", \"Highest Deaths\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [mild.length, contained.length, moderate.length, serious.length, extreme.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n\r\n        {\r\n            id: 3,\r\n            title: 'Active',\r\n            icon: 'tabitem__icon fa fa-network-wired',\r\n            content:\r\n                <>\r\n                    <Row>\r\n                        <Col className=\"pr-0\">\r\n                            <HorizontalBar\r\n                                height={830}\r\n                                width={200}\r\n                                options={{\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                    // title: {\r\n                                    //   display: true,\r\n                                    //   text: 'Mortality in ' + region,\r\n                                    //   fontSize: 13,\r\n\r\n                                    // },\r\n                                }}\r\n                                data={{\r\n                                    labels: countryNames,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"Cases/1000\",\r\n                                            data: activePerOneMillion,\r\n                                            backgroundColor: colorActive,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        <Col className=\"px-0\">\r\n\r\n                            {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                            {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                            <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                                <h1>{(activeMillion[index] / 1000).toFixed(2)}  <FontAwesomeIcon color=\"green\" icon={faArrowDown} /></h1>\r\n\r\n                                <h5 >/1000 Active</h5>\r\n                            </Row>\r\n\r\n                            {/* </Row> */}\r\n                            <Row className=\"subtitle px-3 pt-2\">\r\n                                <Line\r\n                                    width={160}\r\n                                    height={100}\r\n                                    options={{\r\n                                        // title: {\r\n                                        //     display: true,\r\n                                        //     text: 'Trends in ' + region,\r\n                                        //     fontSize: 13,\r\n                                        //     postion: 'bottom'\r\n                                        // },\r\n                                        legend: {\r\n                                            display: false,\r\n                                            position: 'bottom'\r\n                                        }\r\n                                    }}\r\n                                    data={{\r\n                                        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"First dataset\",\r\n                                                data: activePerOneMillion,\r\n                                                fill: true,\r\n                                                backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                                borderColor: \"rgba(75,192,192,1)\"\r\n                                            },\r\n                                            // {\r\n                                            //   label: \"Second dataset\",\r\n                                            //   data: [33, 25, 35, 51, 54, 76],\r\n                                            //   fill: false,\r\n                                            //   borderColor: \"#742774\"\r\n                                            // }\r\n                                        ]\r\n                                    }}\r\n                                />\r\n                            </Row>\r\n                            <div style={{ color: \"grey\", fontSize: \"14px\" }}>Statistics</div>\r\n                            <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(casesMillion[index] / activeMillion[index] * 100).toFixed(0)}%</h3><div>/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div>/active</div></Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row className=\"subtitle m-1\" >\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / activeMillion[index] * 100).toFixed(2)}%</h3><div >/active</div></Col>\r\n                                <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                            </Row>\r\n                            <div className=\"py-2\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                            <Doughnut\r\n                                width={170}\r\n                                options={{\r\n                                    // maintainAspectRatio: true,\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Countries in ' + region,\r\n                                    //     fontSize: 13\r\n                                    // },\r\n                                    elements: {\r\n                                        arc: {\r\n                                            borderWidth: 0\r\n                                        }\r\n                                    },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: ''\r\n                                    },\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Lowest Active\", \"Lower Active\", \"Average Active\", \"Higher Active\", \"Highest Active\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            data: [active1.length, active2.length, active3.length, active4.length, active5.length],\r\n                                            backgroundColor: colorsPie,\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n        },\r\n        {\r\n            id: 4,\r\n            title: 'Critical',\r\n            icon: 'tabitem__icon fa fa-network-wired',\r\n            content: <>\r\n                <Row>\r\n                    <Col className=\"pr-0\">\r\n                        <HorizontalBar\r\n                            height={830}\r\n                            width={200}\r\n                            options={{\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                                // title: {\r\n                                //   display: true,\r\n                                //   text: 'Mortality in ' + region,\r\n                                //   fontSize: 13,\r\n\r\n                                // },\r\n                            }}\r\n                            data={{\r\n                                labels: countryNames,\r\n                                datasets: [\r\n                                    {\r\n                                        label: \"Cases/1000\",\r\n                                        data: casesPerOneMillion,\r\n                                        backgroundColor: colorCases,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n\r\n                        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                            <h5 >/1000 Critical</h5>\r\n                        </Row>\r\n\r\n                        {/* </Row> */}\r\n                        <Row className=\"subtitle px-3 pt-2\">\r\n                            <Line\r\n                                width={160}\r\n                                height={100}\r\n                                options={{\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Trends in ' + region,\r\n                                    //     fontSize: 13,\r\n                                    //     postion: 'bottom'\r\n                                    // },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: 'bottom'\r\n                                    }\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"First dataset\",\r\n                                            data: casesPerOneMillion,\r\n                                            fill: true,\r\n                                            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                            borderColor: \"rgba(75,192,192,1)\"\r\n                                        },\r\n                                        // {\r\n                                        //   label: \"Second dataset\",\r\n                                        //   data: [33, 25, 35, 51, 54, 76],\r\n                                        //   fill: false,\r\n                                        //   borderColor: \"#742774\"\r\n                                        // }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Row>\r\n                        <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n                        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n                        </Row>\r\n\r\n                        <Row className=\"subtitle m-1\" >\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                        <Doughnut\r\n                            width={170}\r\n                            options={{\r\n                                // maintainAspectRatio: true,\r\n                                // title: {\r\n                                //     display: true,\r\n                                //     text: 'Countries in ' + region,\r\n                                //     fontSize: 13\r\n                                // },\r\n                                elements: {\r\n                                    arc: {\r\n                                        borderWidth: 0\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                datasets: [\r\n                                    {\r\n                                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                        backgroundColor: colorsPie,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        },\r\n        {\r\n            id: 5,\r\n            title: 'Tests',\r\n            icon: 'tabitem__icon fa fa-network-wired',\r\n            content: <>\r\n                <Row>\r\n                    <Col className=\"pr-0\">\r\n                        <HorizontalBar\r\n                            height={830}\r\n                            width={200}\r\n                            options={{\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                                // title: {\r\n                                //   display: true,\r\n                                //   text: 'Mortality in ' + region,\r\n                                //   fontSize: 13,\r\n\r\n                                // },\r\n                            }}\r\n                            data={{\r\n                                labels: countryNames,\r\n                                datasets: [\r\n                                    {\r\n                                        label: \"Cases/1000\",\r\n                                        data: casesPerOneMillion,\r\n                                        backgroundColor: colorCases,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n\r\n                        {/* <Row className=\"subtitle pt-1\" style={{ margin: \"2px 2px\" }} > */}\r\n                        {/* <Col className=\"box\" style={{ color: \"teal\" }}> Pop. <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{numberWithCommas((population[index] / 1000000000).toFixed(2))}</h3>billion</Col> */}\r\n\r\n                        <Row className=\"box p-2 m-1 \" style={{ color: \"teal\" }}>\r\n\r\n                            <h1>{(casesMillion[index] / 1000).toFixed(1)}  <FontAwesomeIcon color=\"green\" icon={faArrowUp} /></h1>\r\n\r\n                            <h5 >/1000 Tests</h5>\r\n                        </Row>\r\n\r\n                        {/* </Row> */}\r\n                        <Row className=\"subtitle px-3 pt-2\">\r\n                            <Line\r\n                                width={160}\r\n                                height={100}\r\n                                options={{\r\n                                    // title: {\r\n                                    //     display: true,\r\n                                    //     text: 'Trends in ' + region,\r\n                                    //     fontSize: 13,\r\n                                    //     postion: 'bottom'\r\n                                    // },\r\n                                    legend: {\r\n                                        display: false,\r\n                                        position: 'bottom'\r\n                                    }\r\n                                }}\r\n                                data={{\r\n                                    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n                                    datasets: [\r\n                                        {\r\n                                            label: \"First dataset\",\r\n                                            data: casesPerOneMillion,\r\n                                            fill: true,\r\n                                            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                                            borderColor: \"rgba(75,192,192,1)\"\r\n                                        },\r\n                                        // {\r\n                                        //   label: \"Second dataset\",\r\n                                        //   data: [33, 25, 35, 51, 54, 76],\r\n                                        //   fill: false,\r\n                                        //   borderColor: \"#742774\"\r\n                                        // }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Row>\r\n                        <div style={{ color: \"grey\", fontSize: \"14px\", paddingTop: \"10px\" }}>Statistics</div>\r\n                        <Row className=\"subtitle m-1 pt-1\" >\r\n\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Active<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(activeMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}>Critical<div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(criticalMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div>/cases</div></Col>\r\n\r\n                        </Row>\r\n\r\n                        <Row className=\"subtitle m-1\" >\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Deaths<div className=\"icon\"><FontAwesomeIcon color=\"green\" icon={faArrowUp} /></div> <h3>{(deathsMillion[index] / casesMillion[index] * 100).toFixed(2)}%</h3><div >/cases</div></Col>\r\n                            <Col className=\"box\" style={{ color: \"teal\" }}> Tests <div className=\"icon\"><FontAwesomeIcon color=\"rgb(212, 23, 83)\" icon={faArrowDown} /></div><h3>{(tests[index] / population[index]).toFixed(2)}</h3><div >/person</div></Col>\r\n                        </Row>\r\n                        <div className=\"py-3\" style={{ color: \"grey\", fontSize: \"14px\" }}>Countries in {region}</div>\r\n                        <Doughnut\r\n                            width={170}\r\n                            options={{\r\n                                // maintainAspectRatio: true,\r\n                                // title: {\r\n                                //     display: true,\r\n                                //     text: 'Countries in ' + region,\r\n                                //     fontSize: 13\r\n                                // },\r\n                                elements: {\r\n                                    arc: {\r\n                                        borderWidth: 0\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    display: false,\r\n                                    position: ''\r\n                                },\r\n                            }}\r\n                            data={{\r\n                                labels: [\"Lowest Cases\", \"Lower Cases\", \"Average Cases\", \"Higher Cases\", \"Highest Cases\"],\r\n                                datasets: [\r\n                                    {\r\n                                        data: [lowest.length, lower.length, average.length, higher.length, highest.length],\r\n                                        backgroundColor: colorsPie,\r\n                                    }\r\n                                ]\r\n                            }}\r\n                        />\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n            ,\r\n        },\r\n    ];\r\n\r\n\r\n    const TabsComponent = () => {\r\n        const [active, setActive] = useState(1);\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"tabs\">\r\n                    {tabItems.map(({ id, icon, title }) => <TabItemComponent\r\n                        key={title}\r\n                        icon={icon}\r\n                        title={title}\r\n                        onItemClicked={() => setActive(id)}\r\n                        isActive={active === id}\r\n                    />\r\n                    )}\r\n                </div>\r\n                <div className=\"content\">\r\n                    {tabItems.map(({ id, content }) => {\r\n                        return active === id ? content : ''\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const TabItemComponent = ({\r\n        icon = '',\r\n        title = '',\r\n        onItemClicked = () => console.error('You passed no action to the component'),\r\n        isActive = false,\r\n    }) => {\r\n        return (\r\n            <div className={isActive ? 'tabitem' : 'tabitem tabitem--inactive'} onClick={onItemClicked}>\r\n                <i className={icon}></i>\r\n                <p className=\"tabitem__title\">{title}</p>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={open ? \"visible\" : \"hidden\"}>\r\n                <Animated\r\n                    animationIn=\"fadeInLeft\"\r\n                    animationOut=\"fadeOut\"\r\n                    isVisible={true}\r\n                >\r\n\r\n                    <div className=\"side\">\r\n                        <div className={!open ? \"hidden\" : \"visible\"}>\r\n                            <Container>\r\n                                <Row className=\"title\" >\r\n                                    <Col xs={10} className=\"px-0 pt-2\">{region}</Col>\r\n                                    <Col className=\"px-0\">\r\n                                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                                            <Button\r\n                                                // onClick={toggleAsia}\r\n                                                onClick={handleClose}\r\n                                                // size=\"lg\"\r\n                                                variant=\"outline-info\"\r\n                                                // style={{ margin: \"10px\", padding: \"0px 10px 3px 10px\" }}\r\n                                                className=\"close button\"\r\n                                            >\r\n                                             \r\n                                                    <h6>x</h6>\r\n                                             \r\n                                            </Button>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <TabsComponent\r\n                                    countries={countries}\r\n                                    index={index}\r\n                                    region={region}\r\n                                    casesMillion={casesMillion}\r\n                                    activeMillion={activeMillion}\r\n                                    criticalMillion={criticalMillion}\r\n                                    deathsMillion={deathsMillion}\r\n                                    tests={tests}\r\n\r\n                                />\r\n\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </Animated>\r\n            </div>\r\n            {/* )\r\n    } */}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default Menu;\r\n\r\n\r\nlet colorsPie = [\r\n    \"#444e86\",\r\n    \"#955196\",\r\n    \"#ffa600\",\r\n    \"#ff6e54\",\r\n    \"#dd5182\",\r\n    \"rgb(212, 23, 83)\",\r\n    \"rgb(45, 182, 130)\",\r\n]\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContinentButtons from \"./components/ContinentButtons\";\r\nimport Map from './components/Map';\r\nimport GlobalMenu from \"./components/GlobalMenu\";\r\nimport Menu from \"./components/Menu\";\r\nimport './App.css'\r\n\r\n\r\nimport { CONTINENT_URL, COUNTRY_URL, GLOBAL_URL } from \"./api/api\";\r\n\r\nconst initialState = {\r\n    global: false,\r\n    open: false,\r\n    region: \"\",\r\n    index: \"\",\r\n};\r\n\r\nconst App = () => {\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [globaldata, setGlobal] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(GLOBAL_URL);\r\n                const globaldata = await result.json();\r\n                setGlobal([globaldata]);\r\n                console.log(globaldata, 'globalDATA')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n\r\n    //Map Continents Data\r\n    const getGlobal = (key) => {\r\n        return globaldata.map((data) => data[key]);\r\n    };\r\n\r\n    const globalCases = getGlobal(\"casesPerOneMillion\");\r\n    const globalDeaths = getGlobal(\"deathsPerOneMillion\");\r\n    const globalActive = getGlobal(\"activePerOneMillion\");\r\n    const globalCritical = getGlobal(\"criticalPerOneMillion\");\r\n    const globalTests = getGlobal(\"testsPerOneMillion\");\r\n    console.log(globalCases, 'globalCases')\r\n    const populationGlobal = getGlobal(\"population\")\r\n    const testsGlobal = getGlobal(\"tests\")\r\n\r\n\r\n\r\n    //Fetch Continents Data\r\n    const [continents, setContinents] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(CONTINENT_URL);\r\n                const continents = await result.json();\r\n                setContinents([...continents]);\r\n                // console.log(continents, 'continents')\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    }, []);\r\n    //Map Continents Data\r\n    const getContinents = (key) => {\r\n        return continents.map((continent) => continent[key]);\r\n    };\r\n\r\n    const population = getContinents(\"population\");\r\n    const casesMillion = getContinents(\"casesPerOneMillion\");\r\n    const activeMillion = getContinents(\"activePerOneMillion\");\r\n    const criticalMillion = getContinents(\"criticalPerOneMillion\");\r\n    const deathsMillion = getContinents(\"deathsPerOneMillion\");\r\n    const testsMillion = getContinents(\"testsPerOneMillion\");\r\n\r\n    const cases = getContinents(\"cases\");\r\n    const active = getContinents(\"active\");\r\n    const critical = getContinents(\"critical\");\r\n    const deaths = getContinents(\"deaths\");\r\n    const tests = getContinents(\"tests\");\r\n\r\n    const continentNames = getContinents(\"continent\")\r\n \r\n    console.log(continentNames, 'continentNames')\r\n\r\n    const mortality = deaths / cases;\r\n\r\n    //Fetch Countries Data\r\n    const [countries, setCountries] = useState([]);\r\n    useEffect(() => {\r\n        const countryNames = [];\r\n        async function fetchCountries() {\r\n            try {\r\n                const res = await fetch(COUNTRY_URL);\r\n                const countries = await res.json();\r\n                setCountries([...countries]);\r\n                // console.log(countries, 'countries')\r\n                for (let i = 0; i < countries.length; i++) {\r\n                    countryNames.push(String(countries[i].country))\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchCountries();\r\n    }, []);\r\n\r\n    const [state, setState] = useState([initialState]);\r\n\r\n    const toggle = ({ region, index }) => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: region,\r\n            index: index,\r\n            global: false\r\n        });\r\n    };\r\n\r\n    const toggleAsia = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Asia',\r\n            index: 1,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleOceania = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Australia-Oceania',\r\n            index: 4,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleEurope = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Europe',\r\n            index: 3,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleAfrica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'Africa',\r\n            index: 5,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleSouthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'South America',\r\n            index: 2,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleNorthAmerica = () => {\r\n        setState({\r\n            ...initialState,\r\n            open: true,\r\n            region: 'North America',\r\n            index: 0,\r\n            global: false\r\n        });\r\n    };\r\n    const toggleGlobal = () => {\r\n        setState({\r\n            ...initialState,\r\n           global: true,\r\n           region: 'Global',\r\n           index: 6,\r\n          \r\n        });\r\n    };\r\n\r\n    function handleClose() {\r\n        setState(!state);\r\n    }\r\n\r\n    console.log(initialState, 'initialState', state, 'state')\r\n\r\n    return (\r\n        <>\r\n            <ContinentButtons\r\n                toggleAsia={toggleAsia}\r\n                toggleEurope={toggleEurope}\r\n                toggle={toggle}\r\n                toggleGlobal={toggleGlobal}\r\n                toggleAfrica={toggleAfrica}\r\n                toggleSouthAmerica={toggleSouthAmerica}\r\n                toggleNorthAmerica={toggleNorthAmerica}\r\n                toggleOceania={toggleOceania}\r\n\r\n            />\r\n            <div className=\"sidebar\">\r\n                <Menu\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    open={state.open}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    casesMillion={casesMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    testsMillion={testsMillion}\r\n                    tests={tests}\r\n                    // globalCases={globalCases}\r\n                />\r\n\r\n                <GlobalMenu\r\n                    state={state.global}\r\n                    toggleGlobal={toggleGlobal}\r\n                    handleClose={handleClose}\r\n                    index={state.index}\r\n                    global={state.global}\r\n                    region={state.region}\r\n                    countries={countries}\r\n                    continents={continents}\r\n                    population={population}\r\n                    continentNames={continentNames}\r\n                    tests={tests}\r\n                    globalCases={globalCases}\r\n                    globalDeaths={globalDeaths}\r\n                    globalActive={globalActive}\r\n                    globalCritical={globalCritical}\r\n                    globalTests={globalTests}\r\n                    casesMillion={casesMillion}\r\n                    deathsMillion={deathsMillion}\r\n                    activeMillion={activeMillion}\r\n                    criticalMillion={criticalMillion}\r\n                    testsMillion={testsMillion}\r\n                    populationGlobal={populationGlobal}\r\n                    testsG={testsGlobal}\r\n                />\r\n            </div>\r\n            <Map />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export const BASE_URL =  \"https://disease.sh/v2\";\r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\";\r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=all\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}